[{"number":1,"categorie":"Java Basics","question":"What is the difference between JDK and JRE?","reponse":"JDK stands for Java Development Kit. It contains the tools and\nlibraries for development of Java programs. It also contains\ncompilers and debuggers needed to compile Java program,\n \nJRE stands for Java Runtime Environment. This is included in JDK.\nJRE provides libraries and JVM that is required to run a Java\nprogram."},{"number":2,"categorie":"Java Basics","question":"What is Java Virtual Machine (JVM)?","reponse":"Java Virtual Machine (JVM) is an abstract machine that executes\nJava Bytecode. There are different JVM for different hardware and\nsoftware platforms. So JVM is platform dependent. JVM is\nresponsible for loading, verifying and executing the Bytecode on a\nplatform."},{"number":3,"categorie":"Java Basics","question":"What are the different types of memory areas allocated by JVM?","reponse":"In java, JVM allocates memory to different processes, methods and\nobjects. Some of the memory areas allocated by JVM are:\n \n1. ClassLoader: It is a component of JVM used to load class\nfiles.\n2. Class (Method) Area: It stores per-class structures such as\nthe runtime constant pool, field and method data, and the\ncode for methods.\n3. Heap: Heap is created a runtime and it contains the runtime\ndata area in which objects are allocated.\n4. Stack: Stack stores local variables and partial results at\nruntime. It also helps in method invocation and return\nvalue. Each thread creates a private JVM stack at the time\nof thread creation.\n5. Program Counter Register: This memory area contains the\naddress of the Java virtual machine instruction that is\ncurrently being executed.\n6. Native Method Stack: This area is reserved for all the\nnative methods used in the application."},{"number":4,"categorie":"Java Basics","question":"What is JIT compiler?","reponse":"Just In Time compiler also known as JIT compiler is used for\nperformance improvement in Java. It is enabled by default. It is\ncompilation done at execution time rather earlier.\nJava has popularized the use of JIT compiler by including it in\nJVM."},{"number":5,"categorie":"Java Basics","question":"How Java platform is different from other platforms?","reponse":"Java is a platform independent language. Java compiler converts\nJava code in to byte code that can be interpreted by JVM. There are\nJVM written for almost all the popular platforms in the world.\n \nJava byte code can run on any supported platform in same way.\nWhere as other languages require libraries compiled for a specific\nplatform to run."},{"number":6,"categorie":"Java Basics","question":"Why people say that Java is 'write once and run anywhere' language?","reponse":"You can write Java code on Windows and compile it in Windows\nplatform. The class and jar files that you get from Windows\nplatform can run as it is on Unix environment. So it is a truly\nplatform independent language.\n \nBehind all this portability is Java byte code. Byte code generated by\nJava compiler can be interpreted by any JVM. So it becomes much\neasier to write programs in Java and expect those to run on any\nplatform.\n \nJava compiler javac compiles java code and JVM java runs that\ncode."},{"number":7,"categorie":"Java Basics","question":"How does ClassLoader work in Java?","reponse":"In Java, ClassLoader is a class that is used to load files in JVM.\nClassLoader loads files from their physical file locations e.g.\nFilesystem, Network location etc.\n \nThere are three main types of ClassLoaders in Java.\n \n1. Bootstrap ClassLoader: This is the first ClassLoader. It\nloads classes from rt.jar file.\n2. Extension ClassLoader: It loads class files from jre/lib/ext\nlocation.\n3. Application ClassLoader: This ClassLoader depends on\nCLASSPATH to find the location of class files. If you\nspecify your jars in CLASSPATH, then this ClassLoader\nwill load them."},{"number":8,"categorie":"Java Basics","question":"Do you think ‘main’ used for main method is a keyword in Java?","reponse":"No, main is just a name of method. There can be multiple methods\nwith same name main in a class file. It is not a keyword in Java."},{"number":9,"categorie":"Java Basics","question":"Can we write main method as public void static instead of public static void?","reponse":"No, you cannot write it like this.  Any method has to first specify the\nmodifiers and then the return value. The order of modifiers can\nchange.\n \nWe can write static public void main() instead of public static void\nmain()."},{"number":10,"categorie":"Java Basics","question":"In Java, if we do not specify any value for local variables, then what will be the default value of the local variables?","reponse":"Java does not initialize local variables with any default value. So\nthese variables will be just null by default."},{"number":11,"categorie":"Java Basics","question":"Let say, we run a java class without passing any arguments. What will be the value of String array of arguments in Main method?","reponse":"By default, the value of String array of arguments is empty in Java.\nIt is not null."},{"number":12,"categorie":"Java Basics","question":"What is the difference between byte and char data types in Java?","reponse":"Both byte and char are numeric data types in Java. They are used to\nrepresent numbers in a specific range.\n \nMajor difference between them is that a byte can store raw binary\ndata where as a char stores characters or text data.\n \nUsage of char is E.g. char ch = ‘x’;\n \nByte values range from -128 to 127.\n \nA byte is made of 8 bits. But a char is made of 16 bits. So it is\nequivalent to 2 bytes.\n \n OOPS"},{"number":13,"categorie":"OOPS","question":"What are the main principles of Object Oriented Programming?","reponse":"Main principles of Object Oriented Programming (OOPS) are:\n1. Abstraction\n2. Encapsulation\n3. Inheritance\n4. Polymorphism"},{"number":14,"categorie":"Polymorphism","question":"What is the difference between Object Oriented Programming language and Object Based Programming language?","reponse":"Object Oriented Programming languages like Java and C++ follow\nconcepts of OOPS like- Encapsulation, Abstraction, Polymorphism\nand Inheritance etc.\n \nObject Based Programming languages follow some features of\nOOPS but they do not provide support for Polymorphism and\nInheritance. Egg. JavaScript, VBScript etc.\n \nObject Based Programming languages provide support for Objects\nand you can build objects from constructor. They languages also\nsupport Encapsulation. These are also known as Prototype-oriented\nlanguages."},{"number":15,"categorie":"Polymorphism","question":"In Java what is the default value of an object reference defined as an instance variable in an Object?","reponse":"All the instance variable object references in Java are null."},{"number":16,"categorie":"Polymorphism","question":"Why do we need constructor in Java?","reponse":"Java is an object-oriented language, in which we create and use\nobjects. A constructor is a piece of code similar to a method. It is\nused to create an object and set the initial state of the object.\n \nA constructor is a special function that has same name as class\nname.\n \nWithout a constructor, there is no other way to create an object.\n \nBy default, Java provides a default constructor for every object. If\nwe overload a constructor then we have to implement default\nconstructor."},{"number":17,"categorie":"Polymorphism","question":"Why do we need default constructor in Java classes?","reponse":"Default constructor is the no-argument constructor that is\nautomatically generated by Java if no other constructor is defined.\n \nJava specification says that it will provide a default constructor if\nthere is no overloaded constructor in a class. But it does not say\nanything about the scenario in which we write an overloaded\nconstructor in a class.\n \nWe need at least one constructor to create an object, that’s why Java\nprovides a default constructor.\n \nWhen we have overloaded constructor, then Java assumes that we\nwant some custom treatment in our code. Due to which it does not\nprovide default constructor. But it needs default constructor as per\nthe specification. So it gives error."},{"number":18,"categorie":"Polymorphism","question":"What is the value returned by Constructor in Java?","reponse":"When we call a constructor in Java, it returns the object created by\nit. That is how we create new objects in Java."},{"number":19,"categorie":"Polymorphism","question":"Can we inherit a Constructor?","reponse":"No, Java does not support inheritance of constructor."},{"number":20,"categorie":"Polymorphism","question":"Why constructors cannot be final, static, or abstract in Java?","reponse":"If we set a method as final it means we do not want any class to\noverride it. But the constructor (as per Java Language\nSpecification) cannot be overridden. So there is no use of marking it\nfinal.\n \nIf we set a method as abstract it means that it has no body and it\nshould be implemented in a child class. But the constructor is called\nimplicitly when the new keyword is used. Therefore it needs a\nbody.\n \nIf we set a method as static it means that it belongs to the class, but\nnot a particular object. The constructor is always called to initialize\nan object. Therefore, there is no use of marking constructor static.Inheritance"},{"number":21,"categorie":"Polymorphism","question":"What is the purpose of ‘this’ keyword in java?","reponse":"In Java, ‘this’ keyword refers to current instance of the object.\n \nIt is useful for differentiating between instance variables and local\nvariables.\n \nIt can be used to call constructors. Or it can be used to refer to the\ninstance.\n \nIn case of method overriding, this is used for falling the method of\ncurrent class."},{"number":22,"categorie":"Polymorphism","question":"Explain the concept of Inheritance?","reponse":"Inheritance is an important concept in Object Oriented\nProgramming. Some objects share certain characteristics and\nbehavior. By using Inheritance, we can put the common behavior\nand characteristics in a base class which also known as super class.\nAnd then all the objects with common behavior inherit from this\nbase class.\n \nIt is also represented by IS-A relationship.\n \nInheritance promotes, code reuse, method overriding and poly-\nmorphism."},{"number":23,"categorie":"Polymorphism","question":"Which class in Java is superclass of every other class?","reponse":"Java is an object oriented programming language. In Java, Object\nclass is the superclass of every other class."},{"number":24,"categorie":"Polymorphism","question":"Why Java does not support multiple inheritance?","reponse":"Multiple Inheritance means that a class can inherit behavior from\ntwo or more parent classes.\n \nThe issue with Multiple Inheritance is that both the parent classes\nmay have different implementation for the same method. So they\nhave different ways of doing the same thing. Now which\nimplementation should the child class choose?\n \nThis leads to ambiguity in Multiple Inheritance. This is the main\nreason for Java not supporting Multiple Inheritance in\nimplementation.\n \nLets say you have a class TV and another class AtomBomb. Both\nhave method switchOn() but only TV has switchOff() method. If\nyour class inherits from both these classes then you have an issue\nthat you can switchOn() both parents, but switchOff will only\nswitchOff() TV.\n \nBut you can implement multiple interfaces in Java."},{"number":25,"categorie":"Polymorphism","question":"In OOPS, what is meant by composition?","reponse":"Composition is also known as “has-a” relationship. In composition,\n“has-a” relation relates two classes. E.g. Class Car has a steering\nwheel.\n \nIf a class holds the instance of another class, then it is called\ncomposition."},{"number":26,"categorie":"Polymorphism","question":"How aggregation and composition are different concepts?","reponse":"In OOPS, Aggregation and Composition are the types of association\nrelations. A composition is a strong relationship. If the composite\nobject is destroyed, then all its parts are destroyed. E.g. A Car has a\nSteering Wheel. If Car object is destroyed, then there is no meaning\nof Steering Wheel.\n \nIn Aggregation, the relationship is weaker than Composition.\n \nE.g. A Library has students. If a Library is destroyed, Students still\nexist. So Library and Student are related by Aggregation. A Library\nhas Books. If Library is destroyed, the Books are also destroyed.\nBooks of a Library cannot exist without the Library. So Book and\nLibrary are related by Composition."},{"number":27,"categorie":"Polymorphism","question":"Why there are no pointers in Java?","reponse":"In Java there are references instead of pointers. These references\npoint to objects in memory. But there is no direct access to these\nmemory locations. JVM is free to move the objects within VM\nmemory.\n \nThe absence of pointers helps Java in managing memory and\ngarbage collection effectively. Also it provides developers with\nconvenience of not getting worried about memory allocation and de-\nallocation."},{"number":28,"categorie":"Polymorphism","question":"If there are no pointers in Java, then why do we get NullPointerException?","reponse":"In Java, the pointer equivalent is Object reference. When we use a .\nit points to object reference.  So JVM uses pointers but\nprogrammers only see object references.\n \nIn case an object reference points to null object, and we try to\naccess a method or member variable on it, then we get\nNullPointerException"},{"number":29,"categorie":"Polymorphism","question":"What is the purpose of ‘super’ keyword in java?","reponse":"‘super’ keyword is used in the methods or constructor of a child\nclass. It refers to immediate parent class of an object.\n \nBy using ‘super’ we can call a method of parent class from the\nmethod of a child class.\n \nWe can also call the constructor of a parent class from the\nconstructor of a child class by using ‘super’ keyword."},{"number":30,"categorie":"Polymorphism","question":"Is it possible to use this() and super() both in same constructor?","reponse":"No, Java does not allow using both super() and this() in same\nconstructor. As per Java specification, super() or this() must be the\nfirst statement in a constructor."},{"number":31,"categorie":"Polymorphism","question":"What is the meaning of object cloning in Java?","reponse":"Object.clone() method is used for creating an exact copy of the\nobject in Java. It acts like a copy constructor. It creates and returns\na copy of the object, with the same class and with all the fields\nhaving same values as of the original object.\n \nOne disadvantage of cloning is that the return type is an Object. It\nhas to be explicitly cast to actual type.\n \n \n Static"},{"number":32,"categorie":"Static","question":"In Java, why do we use static variable?","reponse":"Whenever we want to have a common property for all objects of a\nclass, we use a class level variable i.e. a static variable.\n \nThis variable is loaded in memory only once at the time of class\nloading. So it saves memory, since it is not defined per object in\nJava."},{"number":33,"categorie":"Static","question":"Why it is not a good practice to create static variables in Java?","reponse":"Static variables are common to all the objects of a class. If a new\nobject is created, there is no need to test the value of static variable.\nAny code that uses static variable can be in any state. It can be\nwithin a new object or at a class level. So the scope of static\nvariable is open ended in a Java class.\n \nIf we want tighter control on scope, then variables should be\ncreated at the object creation level.\n \nAlso defining static variables is not a good practice because they go\nagainst the principles of Object Oriented Programming."},{"number":34,"categorie":"Static","question":"What is the purpose of static method in Java?","reponse":"Java provides the feature of static method to create behavior at the\nclass level. The static method is common to all the objects of a\nclass.  We do not need to create any object of a class to call a static\nmethod. So it provides convenience of not creating an object for\ncalling it.\n \nAlso a static method can access and modify static data members.\nThis also helps in keeping the behavior as well as state at the class\nlevel."},{"number":35,"categorie":"Static","question":"Why do we mark main method as static in Java?","reponse":"The main method in Java is marked as static, so that JVM can call it\nto start the program. If main method is not static, then which\nconstructor will be called by Java process?\n \nAs such it is a known as convention to mark main method static in\nJava. But if we remove the static, then there will be ambiguity. Java\nprocess may not know which method of a class to call to start the\nprogram.\n \nSo this convention helps in Java process to identify the starting code\nfor a program in class that is passed as an argument to java process."},{"number":36,"categorie":"Static","question":"In what scenario do we use a static block?","reponse":"At times, there is a class that has static member variables. These\nvariables need some complicated initialization. At this time static\nblock helps as a tool to initialize complex static member variable\ninitialization.\n \nThe static block is executed even before the execution of main.\n \nSometimes, we can also replace static block with a static method of\nclass."},{"number":37,"categorie":"Static","question":"Is it possible to execute a program without defining a main() method?","reponse":"No, with Java 7 onwards, you need a main() method to execute a\nprogram. In earlier versions of Java, there was a workaround\navailable to use static blocks for execution. But now this gap has\nbeen closed."},{"number":38,"categorie":"Static","question":"What happens when static modifier is not mentioned in the signature of main method?","reponse":"As per Java specification, main method has to be marked as static.\nIt needs only one argument that is an array of String.\n \nA program can compile with a non-static method. But on execution\nit will give NoSuchMethodError."},{"number":39,"categorie":"Static","question":"What is the difference between static method and instance method in Java?","reponse":"Often, there is a need to define a behavior for a class that is not\ndependent on member variables of an object. Such behavior is\ncaptured in a static method. If there is a behavior dependent upon\nthe member variables of an object, then we do not mark it static, it\nremains as instance method.\n \nTo call as static method, we do not need to create an object. We just\ncall it with class name. But to call an instance method, we need to\ncreate/get an object first.\n \nInstance member variables cannot be accessed by a static method.\nBut an instance method can call both instance variables and static\nvariables.\n \n  \nMethod Overloading and Overriding"},{"number":40,"categorie":"Method Overloading and Overriding","question":"What is the other name of Method Overloading?","reponse":"Method Overloading is also known as Static Polymorphism."},{"number":41,"categorie":"Method Overloading and Overriding","question":"How will you implement method overloading in Java?","reponse":"In Java, a class can have multiple methods with same name but\ndifferent arguments.  It is called Method Overloading. To implement\nmethod overloading we have to create two methods with same name\nin a class and do one/more of the following:\n \n1. Different number of parameters\n2. Different data type of parameters\n3. Different sequence of data type of parameters"},{"number":42,"categorie":"Method Overloading and Overriding","question":"What kinds of argument variations are allowed in Method Overloading?","reponse":"Method Overloading allows two methods with same name to differ\nin:\n1. Number of parameters\n2. Data type of parameters\n3. Sequence of data type of parameters"},{"number":43,"categorie":"Method Overloading and Overriding","question":"Why it is not possible to do method overloading by changing return type of method in java?","reponse":"If we change the return type of overloaded methods then it will lead\nto ambiguous behavior. How will clients know which method will\nreturn what type. Due to this different return type are not allowed in\noverloaded methods."},{"number":44,"categorie":"Method Overloading and Overriding","question":"Is it allowed to overload main() method in Java?","reponse":"Yes, Java allows users to create many methods with same name\n‘main’. But only public static void main(String[] args) method is\nused for execution."},{"number":45,"categorie":"Method Overloading and Overriding","question":"How do we implement method overriding in Java?","reponse":"To override a method, we just provide a new implementation of a\nmethod with same name in subclass. So there will be at least two\nimplementations of the method with same name. One\nimplementation is in parent class. And another implementation is in\nchild class."},{"number":46,"categorie":"Method Overloading and Overriding","question":"Are we allowed to override a static method in Java?","reponse":"No. Java does not allow overriding a static method. If you create a\nstatic method with same name in subclass, then it is a new method,\nnot an overridden method."},{"number":47,"categorie":"Method Overloading and Overriding","question":"Why Java does not allow overriding a static method?","reponse":"To override a method, you need an instance of a class. Static method\nis not associated with any instance of the class. So the concept of\noverriding does not apply here.\n \nTherefore, Java does not allow overriding a static method."},{"number":48,"categorie":"Method Overloading and Overriding","question":"Is it allowed to override an overloaded method?","reponse":"Yes. You can override an overloaded method in Java."},{"number":49,"categorie":"Method Overloading and Overriding","question":"What is the difference between method overloading and method overriding in Java?","reponse":"Differences between method overloading and overriding are:\n \n1. Method overloading is static polymorphism. Method\noverriding is runtime polymorphism.\n2. Method overloading occurs within the same class. Method\noverriding happens in two classes with hierarchy\nrelationship.\n3. Parameters must be different in method overloading.\nParameters must be same in method overriding.\n4. Method overloading is a compile time concept. Method\noverriding is a runtime concept."},{"number":50,"categorie":"Method Overloading and Overriding","question":"Does Java allow virtual functions?","reponse":"Yes. All instance methods in Java are virtual functions by default.\nOnly class methods and private instance methods are not virtual\nmethods in Java."},{"number":51,"categorie":"Method Overloading and Overriding","question":"What is meant by covariant return type in Java?","reponse":"A covariant return type of a method is one that can be replaced by a\n\"narrower\" type when the method is overridden in a subclass.\n \nLet say class B is child of class A. There is a get() method in class\nA as well as class B. get() method of class A can return an instance\nof A, and get() method of class B return an instance of B.  Here\nclass B overrides get() method, but the return type is different.\n \nBefore Java 5, any method that overrides the method of parent class\nwould have same return type.\n \nFrom Java 5 onwards, a child class can override a method of parent\nclass and the child class method can return an object that is child of\nobject return by parent class method.Polymorphism"},{"number":52,"categorie":"Method Overloading and Overriding","question":"What is Runtime Polymorphism?","reponse":"Runtime Polymorphism or Dynamic Polymorphism is the\npolymorphism that exists at runtime. In case of method overriding it\nis not known which method will be called at runtime. Based on the\ntype of object, JVM decides the exact method that should be called.\n \nSo at compile time it is not known which method will be called at\nrun time."},{"number":53,"categorie":"Method Overloading and Overriding","question":"Is it possible to achieve Runtime Polymorphism by data members in Java?","reponse":"No. We need to create Runtime Polymorphism by implementing\nmethods at two levels of inheritance in Java."},{"number":54,"categorie":"Method Overloading and Overriding","question":"Explain the difference between static and dynamic binding?","reponse":"In Static binding references are resolved at compile time. In\nDynamic binding references are resolved at Run time.\n \nE.g.\nPerson p = new Person();\np.walk();  // Java compiler resolves this binding at compile time.\n \npublic void walk(Object o){\n((Person) o).walk(); // this is dynamic binding.\n}\n Abstraction"},{"number":55,"categorie":"Method Overloading and Overriding","question":"What is Abstraction in Object Oriented programming?","reponse":"Abstraction is the process of hiding certain implementation details\nof an object and showing only essential features of the object to\noutside world.\n \nIt is different from Abstract class in Java.\n \nAbstraction process identifies commonalities and hides the\ncomplexity of implementation. It helps us in focusing on the\ninterface that we share with the outside world."},{"number":56,"categorie":"Method Overloading and Overriding","question":"How is Abstraction different from Encapsulation?","reponse":"Abstraction happens at class level design. It results in hiding the\nimplementation details. Encapsulation is also known as\n“Information Hiding”.  An example of encapsulation is marking the\nmember variables private and providing getter and setter for these\nmember variables."},{"number":57,"categorie":"Method Overloading and Overriding","question":"What is an abstract class in Java?","reponse":"An abstract class in Java has one or more abstract methods. An\nabstract method is just declared in the abstract class, but it is not\nimplemented.\n \nAn abstract class has to be extended in Java and its abstract\nmethods have to be implemented by a child class. Also Java does\nnot allow new instance of Abstract class."},{"number":58,"categorie":"Method Overloading and Overriding","question":"Is it allowed to mark a method abstract method without marking the class abstract?","reponse":"No. Java specification says that if there is at least one abstract\nmethod in a class, the class has to be marked abstract."},{"number":59,"categorie":"Method Overloading and Overriding","question":"Is it allowed to mark a method abstract as well as final?","reponse":"No. It will be contradictory statement to mark a method abstract as\nwell as final.\n \nAn abstract method has to be overridden by a child class. And a\nfinal method cannot be overridden.  Therefore a method can be\neither abstract or final in Java."},{"number":60,"categorie":"Method Overloading and Overriding","question":"Can we instantiate an abstract class in Java?","reponse":"No. We cannot create an instance of an abstract class in Java."},{"number":61,"categorie":"Method Overloading and Overriding","question":"What is an interface in Java?","reponse":"An Interface in Java is an abstract type blueprint of a class. It\ncontains the methods that a class must implement. It is like a\nprotocol.\n \nIt has method signatures and constant declarations."},{"number":62,"categorie":"Method Overloading and Overriding","question":"Is it allowed to mark an interface method as static?","reponse":"Yes, from Java 8 onwards, we can define static and default methods\nin an interface. Prior to Java 8, it was not allowed."},{"number":63,"categorie":"Method Overloading and Overriding","question":"Why an Interface cannot be marked as final in Java?","reponse":"A final method cannot be overridden. But an interface method has to\nbe implemented by another class. So the interface method cannot be\nmarked as final."},{"number":64,"categorie":"Method Overloading and Overriding","question":"What is a marker interface?","reponse":"There are interfaces that do not have any data member or methods.\nThese interfaces are called Marker interface.\nE.g. Serializable, Cloneable, Remote etc."},{"number":65,"categorie":"Method Overloading and Overriding","question":"What can we use instead of Marker interface?","reponse":"We can use annotations instead of Marker interface."},{"number":66,"categorie":"Method Overloading and Overriding","question":"How Annotations are better than Marker Interfaces?","reponse":"Annotations serve the purpose of conveying metadata about the\nclass to its consumers without creating a separate type for it.\n \nAnnotations are more powerful than a Marker interface. They allow\nprogrammers to pass more sophisticated information to classes that\n\"consume\" it."},{"number":67,"categorie":"Method Overloading and Overriding","question":"What is the difference between abstract class and interface in Java?","reponse":"Differences between Abstract class and Interface are as follows:\n \n1. An abstract class can have implemented methods with\nbody (non-abstract methods). Interface has only abstract\nmethods. From Java 8 onwards, interface can have\nstatic/default methods in implemented form.\n2. An abstract class can have instance member variables. An\ninterface cannot have instance variables. It can only have\nconstants.\n3. An abstract class can have a constructor. Interface cannot\nhave constructor. It has to be implemented by another\nclass.\n4. A class can extend only one abstract class. A class can\nimplement more than one interface."},{"number":68,"categorie":"Method Overloading and Overriding","question":"Does Java allow us to use private and protected modifiers for variables in interfaces?","reponse":"No. All the variables in an interface are implicitly public."},{"number":69,"categorie":"Method Overloading and Overriding","question":"How can we cast to an object reference to an interface reference?","reponse":"An Object that implements an Interface can be cast to the same\nInterface. Since An Object implementing an Interface already\nprovides implementation for the methods of that Interface, it is\nallowed to do so as per the rules of Inheritance.\n Final"},{"number":70,"categorie":"Final","question":"How can you change the value of a final variable in Java?","reponse":"Java does not allow changing the value of a final variable. Once the\nvalue is set, it cannot be changed."},{"number":71,"categorie":"Final","question":"Can a class be marked final in Java?","reponse":"Yes a class can be marked final in Java. Once a class is marked\nfinal, it cannot be extended."},{"number":72,"categorie":"Final","question":"How can we create a final method in Java?","reponse":"To mark a method, add modifier final to that method. A final method\ncan not be overridden by a child class."},{"number":73,"categorie":"Final","question":"How can we prohibit inheritance in Java?","reponse":"If you mark a class final, it cannot be extended. This will prohibit\nthe inheritance of that class in Java."},{"number":74,"categorie":"Final","question":"Why Integer class in final in Java?","reponse":"Integer class is a wrapper for int. If it is not marked final, then any\nother class can extend it and modify the behavior of Integer\noperations. To avoid this Integer wrapper class is marked as final."},{"number":75,"categorie":"Final","question":"What is a blank final variable in Java?","reponse":"When we declare a final variable without giving any initial value,\nthen it is called blank final variable."},{"number":76,"categorie":"Final","question":"How can we initialize a blank final variable?","reponse":"A blank final instance variable can be initialized in a constructor.\n \nA blank final static variable can be initialized in the static block of\nclass."},{"number":77,"categorie":"Final","question":"Is it allowed to declare main method as final?","reponse":"Yes, we can mark the main method as final.\n \n Package"},{"number":78,"categorie":"Package","question":"What is the purpose of package in Java?","reponse":"A package is used to encapsulate a group of classes, interfaces and\nsub-packages. Often, it is a hierarchical structure of storing\ninformation. It is easier to organize the related classes and sub-\npackages in this manner.\n \nA Package also provides access protection for classes and\ninterfaces. A package also helps in removing naming collision."},{"number":79,"categorie":"Package","question":"What is java.lang package?","reponse":"In Java, java.lang package contains the classes that are fundamental\nto the design of Java programming language. The most important\nclass in this package is Object class.\n \nIt also contains wrapper classes like- Integer, Boolean, Character\netc. It provides Math class for mathematical operations."},{"number":80,"categorie":"Package","question":"Which is the most important class in Java?","reponse":"It is an open-ended question with many answers. In my view, Object\nclass is the most important class of Java programming language. It\nis the root of all the classes in Java. It provides some very\nimportant and fundamental methods."},{"number":81,"categorie":"Package","question":"Is it mandatory to import java.lang package every time?","reponse":"No. By default, JVM loads it internally."},{"number":82,"categorie":"Package","question":"Can you import same package or class twice in your class?","reponse":"If we import same package multiple times in a class, compiler\nincludes it only once. So neither JVM nor Compiler gives any\nerror/warning on including a package multiple times.\n \nIf you have two classes with same name, then you may get name\ncollision on importing the class erroneously.\n \nJVM internally loads the class only one time."},{"number":83,"categorie":"Package","question":"What is a static import in Java?","reponse":"Static import is similar to normal import declaration. Normal\nimport allows us to import classes from packages without using\npackage qualifier. Static import allows us to import static members\nfrom a class without using class qualifier."},{"number":84,"categorie":"Package","question":"What is the difference between import static com.test.Fooclass and import com.test.Fooclass?","reponse":"First import is a static import and the second import is normal\nimport of a class. First import allows us to import static members of\nclass.\n \n  \nInternationalization"},{"number":85,"categorie":"Internationalization","question":"What is Locale in Java?","reponse":"A Locale object represents a specific geographical, political, or\ncultural region. It is used to locale-sensitive operations in Java.\n \nIt helps is following the local conventions of a country, native or\nregion. These conventions can be for formatting the dates, money,\nnumbers etc."},{"number":86,"categorie":"Internationalization","question":"How will you use a specific Locale in Java?","reponse":"To use a specific Locale, we need to load that Locale. We can use\nResourceBundle.getBundle(\"Locale.UK\") method to load a Locale. \nSerialization"},{"number":87,"categorie":"Serialization","question":"What is the serialization?","reponse":"Serialization is a process converting an object into a byte array.\nThis byte array represents the class, version and internal state of the\nobject. JVM can use this byte array to transmit/read the object over\na network."},{"number":88,"categorie":"Serialization","question":"What is the purpose of serialization?","reponse":"Some of the uses of serialization are:\n \n1. Communication: It is used for transmitting an object over\nnetwork between two machines.\n2. Persistence: We can store the object’s state in a database\nand retrieve it from database later on.\n3. Caching: Serialization can be used for caching to improve\nperformance. We may need 10 minutes to build an object,\nbut it may take just 10 seconds to de-serialize the object.\n4. Cross JVM Synchronization: It can be used in same way\nacross multiple JVM that follow different architecture."},{"number":89,"categorie":"Serialization","question":"What is Deserialization?","reponse":"Deserialization is the process of reconstructing the object from the\nserialized state. It is the reverse process of serialization."},{"number":90,"categorie":"Serialization","question":"What is Serialization and Deserialization conceptually?","reponse":"Serialization is to convert Object data into a stream of bytes\n \nDeserialization is to convert a stream of bytes back into a copy of\nthe original object."},{"number":91,"categorie":"Serialization","question":"Why do we mark a data member transient?","reponse":"Member variables of an object are marked transient to indicate that\nthey should not be serialized.\n \nDuring serialization process the transient variables are not\nconsidered part of the persistent state of an object."},{"number":92,"categorie":"Serialization","question":"Is it allowed to mark a method as transient?","reponse":"No, Java does not allow marking a method as transient. The\ntransient keyword is valid only for member variables."},{"number":93,"categorie":"Serialization","question":"How does marking a field as transient makes it possible to serialize an object?","reponse":"Let say we have a class ABC that implements Serializable\ninterface, but it contains a member variable object of class XYZ\nthat does not implement Serializable interface. Due to this it is not\npossible to Serialize the class ABC.\n \nTo solve this issue, we can mark the member variable XYZ as\nTransient in class ABC. This will allow us to serialize the class\nABC."},{"number":94,"categorie":"Serialization","question":"What is Externalizable interface in Java?","reponse":"Externalizable interface extends Serializable interface in Java. It is\nused for giving the Class control over saving and restoring the\ncontents of its instances.\n \nA class implements methods writeExternal() and readExternal() to \nstore and restore the object."},{"number":95,"categorie":"Serialization","question":"What is the difference between Serializable and Externalizable interface?","reponse":"Serializable is a marker interface but Externalizable is not a marker\ninterface.\n \nWhen we implement Serializable interface, the class is serialized\nautomatically by default. We can override writeObject() and\nreadObject()methods to control more complex object Serialization\nprocess.\n \nIn case of Externalizable, we use readExternal() and\nwriteExternal() methods to give control to class for class's\nserialization process.\n \nSerializable interface is based on recursive algorithm.\n \nSerializable gives you two options. One option is to provide custom\nway of serialization, the other default way. In Externalizable, you\nhave to always implement readExternal() and writeExternal()\nmethods.\n \nA public no-arg constructor is needed while using Externalizable\ninterface.\n \nIn Serialization, we need to define serialVersionUID. If it is not\nexplicitly defined it will be generated automatically based on all the\nfields, methods of the class.\n Reflection"},{"number":96,"categorie":"Reflection","question":"What is Reflection in Java?","reponse":"Reflection is Java language's ability to inspect and dynamically call\nclasses, methods, attributes etc. at Runtime. It helps in examining or\nmodifying the Runtime behavior of a class at Runtime."},{"number":97,"categorie":"Reflection","question":"What are the uses of Reflection in Java?","reponse":"Reflection is often used in Testing, Debugging and in Integrated\nDevelopment Environment (IDE).\n \nReflection allows you to write programs that do not have to \"know\"\neverything at compile time. It makes programs more dynamic, since\nthey can be tied together at runtime.\n \nMany modern frameworks like Spring etc. use Reflection. Some\nmodern languages like Python etc. also use Reflection.\n \nJAVA API for XML Parsing (JAXP) also uses Reflection."},{"number":98,"categorie":"Reflection","question":"How can we access private method of a class from outside the class?","reponse":"We can use Reflection to access private method of a class from\noutside the class. IN Java, we use getDeclaredMethod() to get\ninstance of a private method. Then we mark this method accessible\nand finally invoke it.\n \nIn following sample code, we are accessing private method\nmessage() of class Foo by Reflection.\n \nFileName: Foo.java\npublic class Foo { \n  private void message(){System.out.println(\"hello java\"); } \n} \n \nFileName: FooMethodCall.java\nimport java.lang.reflect.Method; \npublic class FooMethodCall{ \npublic static void main(String[] args)throws Exception{ \n \n    Class c = Class.forName(\"Foo\"); \n    Object o= c.newInstance(); \n    Method m =c.getDeclaredMethod(\"message\", null); \n    m.setAccessible(true); \n    m.invoke(o, null); \n} \n}"},{"number":99,"categorie":"Reflection","question":"How can we create an Object dynamically at Runtime in Java?","reponse":"We can use Reflection to create an Object dynamically at Runtime\nin Java. We can use Class.newInstance() or\nConstructor.newInstance() methods for creating such Objects.\n \n Garbage Collection"},{"number":100,"categorie":"Garbage Collection","question":"What is Garbage Collection in Java?","reponse":"Java has an internal mechanism called Garbage collection to\nreclaim the memory of unused projects at run time.\n \nGarbage collection is also known as automatic memory\nmanagement."},{"number":101,"categorie":"Garbage Collection","question":"Why Java provides Garbage Collector?","reponse":"In Java, there are no pointers. Memory management and allocation\nis done by JVM. Since memory allocation is automated, after some\ntime JVM may go low on memory. At that time, JVM has to free\nmemory from unused objects. To help with the process of\nreclaiming memory, Java provides an automated process called\nGarbage Collector."},{"number":102,"categorie":"Garbage Collection","question":"What is the purpose of gc() in Java?","reponse":"Java provides two methods System.gc() and Runtime.gc() to request\nthe JVM to run the garbage collection. By using these methods,\nprogrammers can explicitly send request for Garbage Collection.\nBut JVM process can reject this request and wait for some time\nbefore running the GC."},{"number":103,"categorie":"Garbage Collection","question":"How does Garbage Collection work in Java?","reponse":"Java has an automated process called Garbage Collector for\nMemory Management. It is a daemon in JVM that monitors the\nmemory usage and performs memory cleanup. Once JVM is low on\nmemory, GC process finds the unused objects that are not\nreferenced by other objects. These unused objects are cleaned up by\nGarbage Collector daemon in JVM."},{"number":104,"categorie":"Garbage Collection","question":"When does an object become eligible for Garbage Collection in Java?","reponse":"An object can be Garbage Collected by JVM, if it is not reachable.\nThere are two cases for deciding eligibility of objects for Garbage\nCollection:\n \n1. An Object/instance that cannot be reached by a live thread.\n2. A set of circularly referenced instances that cannot be\nreached by any other instance outside that set."},{"number":105,"categorie":"Garbage Collection","question":"Why do we use finalize() method in Java?","reponse":"Java provides finalize() method to perform any cleanup before\nGarbage Collection. This method is in Object class, and it is\ninvoked by JVM internally. Developers are free to implement this\nmethod for any custom cleanup in case of Garbage Collection.\n \nIf an Object is not Garbage Collected, then this method may not be\ncalled.\n \nThis method is never invoked more than once by JVM."},{"number":106,"categorie":"Garbage Collection","question":"What are the different types of References in Java?","reponse":"In Java, there are four types of references:\n \n1. Strong Reference\n2. Soft Reference\n3. Weak Reference\n4. Phantom Referenc"},{"number":107,"categorie":"Garbage Collection","question":"How can we reference an unreferenced object again?","reponse":"We can provide implementation in finalize() method to reference\nand unreferenced object. For an unreferenced object, finalize()\nmethod is called at the time of Garbage Collection. At this time,\nObject can pass its reference ‘this’ to finalize() method and revive\nitself."},{"number":108,"categorie":"Garbage Collection","question":"What kind of process is the Garbage collector thread?","reponse":"Garbage Collection is a Daemon process in JVM. It is an internal\nprocess that keep checking Memory usage and cleans up the\nmemory."},{"number":109,"categorie":"Garbage Collection","question":"What is the purpose of the Runtime class?","reponse":"The purpose of the Runtime class is to provide access to the Java\nRuntime system. This class provides certain important methods like:\n \n1. Runtime.freeMemory() – This method returns the value of\nfree memory in JVM\n \n2. Runtime.maxMemory() - This method returns the value of\nmaximum memory that JVM can use.\n \n3. Runtime.gc() – This method can invoke garbage collection."},{"number":110,"categorie":"Garbage Collection","question":"How can we invoke an external process in Java?","reponse":"Java provides the method Runtime.getRuntime().exec() to invoke an\nexternal process from JVM."},{"number":111,"categorie":"Garbage Collection","question":"What are the uses of Runtime class?","reponse":"Runtime class in Java provides following benefits:\n \n1. It allows to read data via key board\n2. It can use system properties and environment variables\n3. It helps in running non-java programs from within a java\napplication.Inner Classes"},{"number":112,"categorie":"Inner Classes","question":"What is a Nested class?","reponse":"In Java, a Nested class is a class declared inside another class. We\ncan have more than one class declared inside a file."},{"number":113,"categorie":"Inner Classes","question":"How many types of Nested classes are in Java?","reponse":"Java provides four types of Nested classes:\n \n1. Member inner class\n2. Local inner class\n3. Anonymous inner class\n4. Static nested class"},{"number":114,"categorie":"Inner Classes","question":"Why do we use Nested Classes?","reponse":"There are following reasons for using nested classes:\n \n1. Logical Grouping: We can logically group classes in one\nplace. If one class is useful to only one other class, then\nwe put smaller class within the larger class and keep them\nin one file. This kind of nesting \"helper classes\" in a top-\nlevel class makes the package more streamlined.\n \n2. Encapsulation: Nested classes increase encapsulation. Let\nsay there are two top-level classes, Foo and Bar. Bar\nneeds access to private members of Foo. We can hide\nclass Bar within class Foo. In this way, private members\nof Foo can be accessed by class Bar. So class Foo remains\nencapsulated. Also, class Bar remains hidden from the\noutside world.\n \n3. Code Clarity: Nested classed make the code more\nreadable and well organized. Only Top-level classes are\nexposed. The helper classes are kept hidden and closer the\ncode where it is used by a Top-level class."},{"number":115,"categorie":"Inner Classes","question":"What is the difference between a Nested class and an Inner class in Java?","reponse":"An Inner class in Java is non-static class. It is a type of Nested class\nthat is defined in another class but not qualified with a Static\nmodifier. A Nested class is also a class can be Static Nested class\nor a non-Static Inner class.\n \nAn Inner class has access to other members of the enclosing class,\neven if they are declared private. A Static Nested class can not\naccess the other members of the enclosing class."},{"number":116,"categorie":"Inner Classes","question":"What is a Nested interface?","reponse":"A Nested interface is declared inside another interface or a top-\nlevel class. By default it is static.\n \nA Nested interface is also known as Static interface."},{"number":117,"categorie":"Inner Classes","question":"How can we access the non-final local variable, inside a Local Inner class?","reponse":"Java allows a Local Inner class to access only Constant local\nmembers. So we have to make the non-final local variable as final\nconstant to access it inside a Local Inner class."},{"number":118,"categorie":"Inner Classes","question":"Can an Interface be defined in a Class?","reponse":"Yes, we can define a Static Nested interface within a class. Only the\nenclosing class can access it."},{"number":119,"categorie":"Inner Classes","question":"Do we have to explicitly mark a Nested Interface public static?","reponse":"A Nested Interface is implicitly public static. So the modifiers\npublic and static are redundant in declaration"},{"number":120,"categorie":"Inner Classes","question":"Why do we use Static Nested interface in Java?","reponse":"Only the enclosing class can access a Static Nested interface.\nConsider following code in which interface Xyz is enclosed in\nclass Abc.\n \npublic class Abc {\n \n    public interface Xyz {\n        void callback();\n    }\n \n    public static void registerCallback(Xyz xyz) {...}\n}\n \n// Client Code\nAbc.registerCallback(new Abc.Xyz() {\n    public void callback() {...}\n});\n \nAny code that cannot access Abc can not access interface Xyz also.\n \nSo the purpose of declaring an Inner interface is to restrict its\naccess from outside world.\n  \nString"},{"number":121,"categorie":"String","question":"What is the meaning of Immutable in the context of String class in Java?","reponse":"An Immutable object cannot be modified or changed in Java. String\nis an Immutable class in Java.\n \nOnce a String object is created, it cannot be changed. When we\nassign the String to a new value, a new object is created."},{"number":122,"categorie":"String","question":"Why a String object is considered immutable in java?","reponse":"Java language uses String for a variety of purposes. For this it has\nmarked String Immutable.\n \nThere is a concept of String literal in Java.\n \nLet say there are 2 String variables A and B that reference to a\nString object “TestData”. All these variables refer to same String\nliteral. If one reference variable A changes the value of the String\nliteral from “TestData” to “RealData”, then it will affect the other\nvariable as well. Due to which String is considered Immutable. In\nthis case, if one variable A changes the value to “RealData”, then a\nnew String literal with “RealData” is created and A will point to\nnew String literal. While B will keep pointing to “TestData”"},{"number":123,"categorie":"String","question":"How many objects does following code create?","reponse":"Code:\nString s1=\"HelloWorld\"; \nString s2=\" HelloWorld \"; \nString s3=\" HelloWorld \"; \n \n \nThe above code creates only one object. Since there is only one\nString Literal “HelloWorld” created, all the references point to\nsame object."},{"number":124,"categorie":"String","question":"How many ways are there in Java to create a String object?","reponse":"Java provides two ways to create a String object. One is by using\nString Literal, the other is by using new operator."},{"number":125,"categorie":"String","question":"How many objects does followingcode create?","reponse":"Code:\nString s = new String(\"HelloWorld\"); \n \nThe above code creates two objects. One object is created in String\nconstant pool and the other is created on the heap in non-pool area."},{"number":126,"categorie":"String","question":"What is String interning?","reponse":"String interning refers to the concept of using only one copy of a\ndistinct String value that is Immutable.\n \nIt provides the advantage of making String processing efficient in\nTime as well as Space complexity. But it introduces extra time in\ncreation of String."},{"number":127,"categorie":"String","question":"Why Java uses String literal concept?","reponse":"Java uses String literal concept to make Java more efficient in\nmemory. If same String already exists in String constant pool, it can\nbe reused. This saves memory usage."},{"number":128,"categorie":"String","question":"What is the basic difference between a String and StringBuffer object?","reponse":"String is an immutable object. Its value cannot change after creation.\nStringBuffer is a mutable object. We can keep appending or\nmodifying the contents of a StringBuffer in Java."},{"number":129,"categorie":"String","question":"How will you create an immutable class in Java?","reponse":"In Java, we can declare a class final to make it immutable. There\nare following detailed steps to make it Immutable:\n \n1. Add final modifier to class to prevent it from getting\nextended\n2. Add private modifier to all the fields to prevent direct\naccess\n3. Do not provide any setter methods for member variables\n4. Add final modifier to all the mutable fields to assign value\nonly once\n5. Use Deep Copy to initialize all the fields by a constructor\n6. In clone method, return a copy of object instead of the\nactual object reference"},{"number":130,"categorie":"String","question":"What is the use of toString() method in java ?","reponse":"In Java, Object class has toString() method. This method can be\nused to return the String representation of an Object. When we print\nan object, Java implicitly calls toString() method.\n \nJava provides a default implementation for toString() method. But\nwe can override this method to return the format that we want to\nprint."},{"number":131,"categorie":"String","question":"Arrange the three classes String, StringBuffer and StringBuilder in the order of efficiency for String processing operations?","reponse":"StringBuilder is the most efficient class. It does not have the\noverhead of Synchronization. StringBuffer is a Synchronized class.\nIt has better performance than String but it is slower than\nStringBuilder. String is the slowest for any String processing\noperations, since it is leads to creation of new String literal with\neach modification.\n \nSo the decreasing order of efficiency is: StringBuilder, StringBuffer,\nString\n Exception Handling"},{"number":132,"categorie":"Exception Handling","question":"What is Exception Handling in Java?","reponse":"Java provides Exception Handling mechanism to handle Runtime\nerrors that occur in JVM. There are checked exceptions in a\nprogram that we expect to occur in certain situations.\n \nException handling mechanism catches these checked exceptions\nand takes relevant actions."},{"number":133,"categorie":"Exception Handling","question":"In Java, what are the differences between a Checked and Unchecked?","reponse":"Checked Exceptions extend Throwable class, but they do not extend\nRuntimeException or Error classes. UncheckedException extend\nRuntimeException class.\n \nChecked Exceptions are checked at compile time in Java.\nUnchecked Exceptions happen at Runtime, so they are not checked\nat compile time.\n \nIOException, SQLException etc. are examples of Checked\nExceptions. NullPointerException, ArithmeticException etc. are\nexamples of Unchecked Exceptions."},{"number":134,"categorie":"Exception Handling","question":"What is the base class for Error and Exception classes in Java?","reponse":"Error as well as Exception class is derived from Throwable class\nin Java."},{"number":135,"categorie":"Exception Handling","question":"What is a finally block in Java?","reponse":"Java provides a finally block with a try block. This is an optional\nblock. But finally block is always executed after the execution of try\nblock."},{"number":136,"categorie":"Exception Handling","question":"What is the use of finally block in Java?","reponse":"As per Java specification, a finally block is always executed,\nwhether an error occurs or not, whether an exception is handled or\nnot. It helps in doing the cleanup like- Rollback Transaction, Close\nConnection, Close a file etc."},{"number":137,"categorie":"Exception Handling","question":"Can we create a finally block without creating a catch block?","reponse":"Yes. A finally block can follow a try block or catch block. So we\ncan defined a finally block just after a try block."},{"number":138,"categorie":"Exception Handling","question":"Do we have to always put a catch block after a try block?","reponse":"Java does not enforce the rule to put a catch block after try block.\nWe can write catch block or finally block after a try block.\n \nAny exception that we want to catch is mentioned in catch block."},{"number":139,"categorie":"Exception Handling","question":"In what scenarios, a finally block will not be executed?","reponse":"There are two main scenarios in which finally block is not\nexecuted:\n \n1. Program exits by calling system.exit() call.\n2. A fatal error causes JVM to crash."},{"number":140,"categorie":"Exception Handling","question":"Can we re-throw an Exception in Java?","reponse":"Yes, Java allows to re-throw an Exception."},{"number":141,"categorie":"Exception Handling","question":"What is the difference between throw and throws in Java?","reponse":"Java provides throw keyword to throw an exception from a method\nor a static block. Java provides throws keyword to mention the\nprobable exception thrown by a method in its declaration.\n \nWe use throw to explicitly throw an exception. We used             \nthrows to declare an exception in method definition.\n \nWe cannot propagate checked exceptions with throw only. But\nchecked exceptions can be propagated with throws keyword.\n \nA throw call is followed by an instance. Class or Exception follows\na throws keyword.\n \nCall to throw occurs within a method. throws is just used with\nmethod signature.\n \nWe can throw only one exception at a time. But we can mention as\nmany exceptions in throws clause."},{"number":142,"categorie":"Exception Handling","question":"What is the concept of Exception Propagation?","reponse":"In Exception Propagation, uncaught exceptions are propagated in the\ncall stack until stack becomes empty. This propagation is called\nException Propagation.\n \n \nLet say an exception propagates from one method to another method.\nA() calls B(), which calls C(), which calls D(). And if D() throws\nan exception, the exception will propagate from D to C to B to A,\nunless one of the methods catches the exception."},{"number":143,"categorie":"Exception Handling","question":"When we override a method in a Child class, can we throw an additional Exception that is not thrown by the Parent class method?","reponse":"Yes, Java allows us to throw additional Exception in a child class,\nbut the additional exception should be an unchecked exception\n(RuntimeException).\n \n \n \n Java Collection"},{"number":144,"categorie":"Java Collection","question":"What is the difference between Collection and Collections Framework in Java?","reponse":"In Java, a Collection is an object that contains multiple elements of\nsame type in a single unit. These multiple elements can be accessed\nthrough one Collection object.\n \nIn Java Collections Framework is a library that provides common\narchitecture for creating, updating and accessing different types of\ncollections. In Collections framework there are common methods\nthat are frequently used by developers for working on a Collection\nobject."},{"number":145,"categorie":"Java Collection","question":"What are the main benefits of Collections Framework in Java?","reponse":"Main benefits of Collections Framework in Java are as follows:\n \n1. Reusability: Java Collections Framework provides\ncommon classes and utility methods than can be used with\ndifferent types of collections. This promotes the reusability\nof the code. A developer does not have to re-invent the\nwheel by writing the same method again.\n \n2. Quality: Using Java Collection Framework improves the\nprogram quality, since the code is already tested and used\nby thousands of developers.\n \n3. Speed: Most of programmers report that their development\nspeed increased since they can focus on core logic and use\nthe generic collections provided by Java framework.\n \n4. Maintenance: Since most of the Java Collections\nframework code is open source and API documents is\nwidely available, it is easy to maintain the code written\nwith the help of Java Collections framework. One\ndeveloper can easily pick the code of previous developer."},{"number":146,"categorie":"Java Collection","question":"What is the root interface of Collection hierarchy in Java?","reponse":"The root interface of Collection hierarchy in Java is Collection\ninterface.\n \nBut the Collection interface extends Iterable interface. Due to this\nsome people consider Iterable interface as the root interface.\n \nIterable interface is present in java.lang package but Collection\ninterface is present in java.util package. Oracle Java API docs\nmention that Collection interface is a member of the Java\nCollections framework. \n \nWhereas, Iterable interface is not stated as a part of Java\nCollections framework in Java docs.\n \nDue to this Collection interface is the root of Collections\nFramework."},{"number":147,"categorie":"Java Collection","question":"What are the main differences between Collection and Collections?","reponse":"Main differences between Collection and Collections are as\nfollows:\n \n1. Collection is an interface in Java. But Collections is a\nclass in Java.\n \n2. Collection is a base interface. Collections is a utility class\nin Java.\n \n3. Collection defines methods that are used for data structures\nthat contain the objects. Collections defines the methods\nthat are used for operations like access, find etc. on a\nCollection."},{"number":148,"categorie":"Java Collection","question":"What are the Thread-safe classes in Java Collections framework?","reponse":"The Thread-safe classes in Java Collections framework are:\n \nStack\nProperties\nVector\nHashtable\nBlockingQueue\nConcurrentMap\nConcurrentNavigableMap"},{"number":149,"categorie":"Java Collection","question":"How will you efficiently remove elements while iterating a Collection?","reponse":"The right way to remove elements from a collection while iterating\nis by using ListIterator.remove() method.\n \nE.g.\n \nListIterator<Integer> iter = myList.iterator();\nwhile(iter.hasNext()) {\nitr.remove();\n}\n \nSome developers use following code to remove an element which is\nincorrect:\n \nIterator<Integer> iter = myList.iterator();\nwhile(iter.hasNext()) {\nitr.remove();\n}\n \nBy doing so we get ConcurrentModificationException.\n \nAn iterator is first created to traverse the list. But at the same time\nthe list is changed by remove() method.\n \nIn Java, it is not allowed for a thread to modify a collection while\nanother thread is iterating it. ListIterator provides the capability of\nremoving an object during traversal."},{"number":150,"categorie":"Java Collection","question":"How will you convert a List into an array of integers like- int[]?","reponse":"We can use ArrayUtils class in Apache Commons Lang library.\n \nSample code is:\nint[]intArray = ArrayUtils.toPrimitive(myList.toArray(new\nInteger[0]));\n \n \nIf we use List.toArray(), it will convert List to Integer[].\n \nAnother option is:\n \nint[] intArray = new int[myList.size()];\nfor (int i=0; i < myList.size(); i++) {\n  intArray [i] = myList.get(i);\n}"},{"number":151,"categorie":"Java Collection","question":"How will you convert an array of primitive integers int[] to a List collection?","reponse":"We can use ArrayUtils in Apache Commons Lang library for this\npurpose.\n \nSample code is:\n \nList intList = Arrays.asList(ArrayUtils.toObject(intArray));\n \nThe other option would be to use a for loop and explicitly adding\nintegers to a List.\n \nSample code is:\n \nint[]intArray = {10,20,30};\nList<Integer> intList = new ArrayList<Integer>();\nfor (int i: intArray) {\n  intList.add(i);\n}"},{"number":152,"categorie":"Java Collection","question":"How will you run a filter on a Collection?","reponse":"We can use CollectionUtils of Apache for this purpose. We will\nhave to create a Predicate that will define the condition for our\nfilter. Then we can apply this Predicate in filter() method.\n \nSample code is:\n \nIn this example we filter any names that are less than 5 characters\nlong.\n \nList<String> namesList = asList( \"Red\", \"Blue\", \"Green\" );\n \nList<String> shortNamesList = new ArrayList<String>();\nshortNamesList.addAll( namesList );\n \n     CollectionUtils.filter( shortNamesList, new Predicate(){\n         public boolean evaluate( Object input ) {\n            return ((String) input).length() < 5;\n         }\n      } );\n \n \nWe can also use Google Guava library for this.\n \nIn Java 8, we can use Predicate to filter a Collection through\nStream."},{"number":153,"categorie":"Java Collection","question":"How will you convert a List to a Set?","reponse":"There are two ways to convert a List to a Set in Java.\n \nOption 1: Use HashSet\n \nSet<Integer> mySet = new HashSet<Integer>(myList);\n \nIn this case we put a list into a HashSet. Internally hashCode()\nmethod is used to identify duplicate elements.\n \nOption 2: Use TreeSet\nIn this case we use our own comparator to find duplicate objects.\n \nSet<Integer> mySet = new TreeSet<Integer>(myComparator);\nmySet.addAll(myList);"},{"number":154,"categorie":"Java Collection","question":"How will you remove duplicate elements from an ArrayList?","reponse":"The trick in this question is to use a collection that does not allow\nduplicate elements. So we use a Set for this purpose.\n \nOption 1: Use Set\nIf ordering of elements is not important then we just put the elements\nof ArrayList in a HashSet and then add them back to the ArrayList.\n \nSample Code is: \nArrayList  myList = // ArrayList with duplicate elements\nSet<Integer> mySet = new HashSet<Integer>(myList);\nmyList.clear();\nmyList.addAll(mySet);\n \nOption 2: Use LinkedHashSet\nIf ordering of elements is important then we put the elements of\nArrayList in a LinkedHashSet and then add them back to the\nArrayList.\n \nSample Code is: \nArrayList  myList = // ArrayList with duplicate elements\nSet<Integer> mySet = new LinkedHashSet<Integer>(myList);\nmyList.clear();\nmyList.addAll(mySet);"},{"number":155,"categorie":"Java Collection","question":"How can you maintain a Collection with elements in Sorted order?","reponse":"In Java, there are many ways to maintain a Collection with elements\nin sorted order.\n \nSome collections like TreeSet store elements in the natural\nordering. In case of natural ordering we have to implement\nComparable interface for comparing the elements.\n \nWe can also maintain custom ordering by providing a custom\nComparator to a Collection.\n \nAnother option is to use the utility method Collections.sort() to  sort\na List. This sorting gives nlog(n) order of performance. But if we\nhave to use this method multiple times then it will be costly on\nperformance.\n \nAnother option is to use a PriorityQueue that provides an ordered\nqueue. The main difference between PriorityQueue and\nCollections.sort() is that PriorityQueue maintains a queue in Order\nall the time, but we can only retrieve head element from queue. We\ncannot access the elements of PriorityQueue in Random order.\n \nWe can use TreeSet to maintain sorted order of elements in\ncollection if there are no duplicate elements in collection."},{"number":156,"categorie":"Java Collection","question":"What are the differences between the two data structures: a Vector and an ArrayList?","reponse":"An ArrayList is a newer class than a Vector. A Vector is considered a\nlegacy class in Java. The differences are:\n \n1. Synchronization: Vector is synchronized, but the ArrayList\nis not synchronized. So an ArrayList has faster operations\nthan a Vector.\n2. Data Growth: Internally both an ArrayList and Vector use\nan array to store data. When an ArrayList is almost full it\nincreases its size by 50% of the array size. Whereas a\nVector increases it by doubling the underlying array size."},{"number":157,"categorie":"Java Collection","question":"What are the differences between Collection and Collections in Java?","reponse":"Main differences between Collection and Collections are:\n \n1. Type: Collection is an interface in Java. Collections is a\nclass.\n2. Features: Collection interface provides basic features of\ndata structure to List, Set and Queue interfaces.\nCollections is a utility class to sort and synchronize\ncollection elements. It has polymorphic algorithms to\noperate on collections.\n3. Method Type: Most of the methods in Collection are at\ninstance level. Collections class has mainly static methods\nthat can work on an instance of Collection."},{"number":158,"categorie":"Java Collection","question":"In which scenario, LinkedList is better than ArrayList in Java?","reponse":"ArrayList is more popular than LinkedList in Java due to its ease of\nuse and random access to elements feature.\n \nBut LinkedList is better in the scenario when we do not need\nrandom access to elements or there are a lot of insertion, deletion of\nelements."},{"number":159,"categorie":"Java Collection","question":"What are the differences between a List and Set collection in Java?","reponse":"Main differences between a List and a Set are:\n \n1. Order: List collection is an ordered sequence of elements.\nA Set is just a distinct collection of elements that is\nunordered.\n \n2. Positional Access: When we use a List, we can specify\nwhere exactly we want to insert an element. In a Set there\nis no order, so we can insert element anywhere without\nworrying about order.\n \n3. Duplicate: In a List we can store duplicate elements. A Set\ncan hold only unique elements."},{"number":160,"categorie":"Java Collection","question":"What are the differences between a HashSet and TreeSet collection in Java?","reponse":"Main differences between a HashSet and TreeSet are:\n \n \n1. Ordering: In a HashSet elements are stored in a random\norder. In a TreeSet, elements are stored according to\nnatural ordering.\n \n2. Null Value Element: We can store null value object in a\nHashSet. A TreeSet does not allow to add a null value\nobject.\n \n3. Performance: HashSet performs basic operations like\nadd(), remove(), contains(), size() etc in a constant size\ntime. A TreeSet performs these operations at the order of\nlog(n) time.\n \n4. Speed: A HashSet is better than a TreeSet in performance\nfor most of operations like add(), remove(), contains(),\nsize() etc .\n \n5. Internal Structure: a HashMap in Java internally backs a\nHashSet. A NavigableMap backs a TreeSet internally.\n \n6. Features:  A  TreeSet has more features compared to a\nHashSet. It has methods like pollFirst(), pollLast(), first(),\nlast(), ceiling(), lower() etc.\n \n7. Element Comparison: A HashSet uses equals() method for\ncomparison. A TreeSet uses compareTo() method forcomparison to maintain ordering of elements."},{"number":161,"categorie":"Java Collection","question":"In Java, how will you decide when to use a List, Set or a Map collection?","reponse":"1. If we want a Collection that does not store duplicate\nvalues, then we use a Set based collection.\n2. If we want to frequently access elements operations based\non an index value then we use a List based collection. E.g.\nArrayList\n \n3. If we want to maintain the insertion order of elements in a\ncollection then we use a List based collection.\n \n4. For fast search operation based on a key, value pair, we\nuse a HashMap based collection.\n \n5. If we want to maintain the elements in a sorted order, then\nwe use a TreeSet based collection."},{"number":162,"categorie":"Java Collection","question":"What are the differences between a HashMap and a Hashtable in Java?","reponse":"Main differences between a HashMap and a Hashtable are:\n \n1. Synchronization: HashMap is not a synchronized\ncollection. If it is used in  multi-thread environment, it may\nnot provide thread safety.  A Hashtable is a synchronized\ncollection. Not more than one thread can access a\nHashtable at a given moment of time. The thread that\nworks on Hashtable acquires a lock on it and it makes\nother threads wait till its work is completed.\n \n2. Null values: A HashMap allows only one null key and any\nnumber of null values. A Hashtable does not allow null\nkeys and null values.\n \n3. Ordering: A HashMap implementation by LinkedHashMap\nmaintains the insertion order of elements. A TreeMap sorts\nthe mappings based on the ascending order of keys. On the\nother hand, a Hashtable does not provide guarantee of any\nkind of order of elements. It does not maintain the\nmappings of key values in any specific order.\n \n4. Legacy: Hashtable was not the initial part of collection\nframework in Java. It has been made a collection\nframework member, after being retrofitted to implement the\nMap interface. A HashMap implements Map interface and\nis a part of collection framework since the beginning.\n \n5. Iterator: The Iterator of HashMap is a fail-fast and it\nthrows ConcurrentModificationException if any other\nThread modifies the map by inserting or removing any\nelement except iterator’s own remove() method.Enumerator of the Hashtable is not fail-fast."},{"number":163,"categorie":"Java Collection","question":"What are the differences between a HashMap and a TreeMap?","reponse":"Main differences between a HashMap and a TreeMap in Java are:\n \n1. Order: A HashMap does not maintain any order of its keys.\nIn a HashMap there is no guarantee that the element\ninserted first will be retrieved first.\n \n2. In a TreeMap elements are stored according to natural\nordering of elements. A TreeMap uses compareTo()\nmethod to store elements in a natural order.\n \n \n3. Internal Implementation: A HashMap uses Hashing\ninternally. A TreeMap internally uses Red-Black tree\nimplementation.\n \n4. Parent Interfaces: A HashMap implements Map interface.\nTreeMap implements NavigableMap interface.\n \n5. Null values: A HashMap can store one null key and\nmultiple null values. A TreeMap can not contain null key\nbut it may contain multiple null values.\n \n6. Performance: A HashMap gives constant time performance\nfor operations like get() and put(). A TreeMap gives order\nof log(n) time performance for get() and put() methods.\n \n7. Comparison: A HashMap uses equals() method to compare\nkeys. A TreeMap uses compareTo() method for\nmaintaining natural ordering.\n \n 8. Features: A TreeMap has more features than a HashMap. It\nhas methods like pollFirstEntry() , pollLastEntry() ,\ntailMap() , firstKey() , lastKey() etc. that are not provided\nby a HashMap."},{"number":164,"categorie":"Java Collection","question":"What are the differences between Comparable and Comparator?","reponse":"Main differences between Comparable and Comparator are:\n \n1. Type: Comparable<T> is an interface in Java where T is\nthe type of objects that this object may be compared to.\n \n2. Comparator<T> is also an interface where T is the type of\nobjects that may be compared by this comparator.\n \n3. Sorting: In Comparable, we can only create one sort\nsequence. In Comparator we can create multiple sort\nsequences.\n \n4. Method Used: Comparator<T> interface in Java has\nmethod public int compare (Object o1, Object o2) that\nreturns a negative integer, zero, or a positive integer when\nthe object o1 is less than, equal to, or greater than the\nobject o2. A Comparable<T> interface has method public\nint compareTo(Object o) that returns a negative integer,\nzero, or a positive integer when this object is less than,\nequal to, or greater than the object o.\n \n5. Objects for Comparison: The Comparator compares two\nobjects given to it as input.  Comparable interface\ncompares \"this\" reference with the object given as input.\n \n6. Package location: Comparable interface in Java is defined\nin java.lang package. Comparator interface in Java is\ndefined in java.util package."},{"number":165,"categorie":"Java Collection","question":"In Java, what is the purpose of Properties file?","reponse":"A Properties file in Java is a list of key-value pairs that can be\nparsed by java.util.Properties class.\n \nGenerally a Properties file has extension .properties e.g.\nmyapp.properties.\n \nProperties files are used for many purposes in all kinds of Java\napplications. Some of the uses are to store configuration, initial\ndata, application options etc.\nWhen we change the value of a key in a properties file, there is no\nneed to recompile the Java application. So it provides benefit of\nchanging values at runtime."},{"number":166,"categorie":"Java Collection","question":"What is the reason for overriding equals() method?","reponse":"The equals() method in Object class is used to check whether two\nobjects are same or not. If we want a custom implementation we can\noverride this method.\n \nFor example, a Person class has first name, last name and age. If we\nwant two Person objects to be equal based on name and age, then\nwe can override equals() method to compare the first name, last\nname and age of Person objects.\n \nGenerally in HashMap implementation, if we want to use an object\nas key, then we override equals() method."},{"number":167,"categorie":"Java Collection","question":"How does hashCode() method work in Java?","reponse":"Object class in Java has hashCode() method. This method returns a\nhash code value, which is an integer.\n \nThe hashCode() is a native method and its implementation is not\npure Java.\n \nJava doesn't generate hashCode(). However, Object generates a\nHashCode based on the memory address of the instance of the\nobject.\n \nIf two objects are same then their hashCode() is also same."},{"number":168,"categorie":"Java Collection","question":"Is it a good idea to use Generics in collections?","reponse":"Yes. A collection is a group of elements put together in an order or\nbased on a property. Often the type of element can vary. But the\nproperties and behavior of a Collection remains same. Therefore it\nis good to create a Collection with Generics so that it is type-safe\nand it can be used with wide variety of elements."},{"number":169,"categorie":"Java Collection","question":"What is the difference between Collections.emptyList() and creating new instance of Collection?","reponse":"In both the approaches, we get an empty list. But\nCollections.emptyList() returns an Immutable list. We cannot add\nnew elements to an Immutable empty list.\n \nCollections.emptyList() works like Singleton pattern. It does not\ncreate a new instance of List. It reuses an existing empty list\ninstance.\n \nTherefore, Collections.emptylist() gives better performance if we\nneed to get an emptyList multiple times."},{"number":170,"categorie":"Java Collection","question":"How will you copy elements from a Source List to another list?","reponse":"There are two options to copy a Source List to another list.\n \nOption 1: Use ArrayList constructor\n \nArrayList<Integer> newList = new ArrayList<Integer>(sourceList);\n \nOption 2:  Use Collection.copy()\nTo use Collections.copy() destination list should be of same or\nlarger size than source list.\n \nArrayList<Integer> newList = new ArrayList<Integer>\n(sourceList.size());\nCollections.copy(newList, sourceList);\n \n \nCollections.copy() does not reallocate the capacity of destination\nList if it does not have enough space to contain all elements of\nsource List. It throws IndexOutOfBoundsException.\n \nThe benefit of Collection.copy() is that it guarantees that the copy\nwill happen in linear time. It is also good for the scenario when we\nwant to reuse an array instead of allocating more memory in the\nconstructor of ArrayList.\n \nOne limitation of Collections.copy() is that it can accept only List\nas source and destination parameters."},{"number":171,"categorie":"Java Collection","question":"What are the Java Collection classes that implement List interface?","reponse":"Java classes that implement List interface are:\n \nAbstractList\nAbstractSequentialList\nArrayList\nAttributeList\nCopyOnWriteArrayList\nLinkedList\nRoleList\nRoleUnresolvedList\nStack\nVector"},{"number":172,"categorie":"Java Collection","question":"What are the Java Collection classes that implement Set interface?","reponse":"Java classes that implement Set interface are:\n \nAbstractSet\nConcurrentSkipListSet\nCopyOnWriteArraySet\nEnumSet\nHashSet\nJobStateReasons\nLinkedHashSet\nTreeSet"},{"number":173,"categorie":"Java Collection","question":"What is the difference between an Iterator and ListIterator in Java?","reponse":"Iterator and ListIterator are two interfaces in Java to traverse data\nstructures. The differences between these two are:\n \n1. ListIterator can be used to traverse only a List. But Iterator\ncan be used to traverse List, Set, and Queue etc.\n \n2. An Iterator traverses the elements in one direction only. It\njust goes. ListIterator can traverse the elements in two\ndirections i.e. backward as well as forward directions.\n \n3. Iterator cannot provide us index of an element in the Data\nStructure. ListIterator provides us methods like nextIndex()\nand previousIndex() to get the index of an element during\ntraversal.\n \n4. Iterator does not allow us to add an element to collection\nwhile traversing it. It throws\nConcurrentModificationException. ListIterator allows use\nto add an element at any point of time while traversing a\nlist.\n \n5. An existing element’s value cannot be replaced by using\nIterator. ListIterator provides the method set(e) to replace\nthe value of last element returned by next() or previous()\nmethods."},{"number":174,"categorie":"Java Collection","question":"What is the difference between Iterator and Enumeration?","reponse":"Both Iterator and Enumeration are interfaces in Java to access Data\nStructures. The main differences between these are:\n \n1. Enumeration is an older interface. Iterator is a newer\ninterface.\n \n2. Enumeration can only traverse legacy collections. Iterator\ncan traverse both legacy as well as newer collections.\n \n3. Enumeration does not provide remove() method. So we\ncannot remove any element during traversal. Iterator\nprovides remove() method.\n \n4. Iterator is a fail-fast interface, it gives\nConcurrentModificationException if any thread tries to\nmodify an element in the collection being iterated.\nEnumeration is not fail-fast.\n \n5. Method names in Iterator are shorter than in an\nEnumeration."},{"number":175,"categorie":"Java Collection","question":"What is the difference between an ArrayList and a LinkedList data structure?","reponse":"Main differences between ArrayList and LinkedList data structures\nare:\n \n1. Data Structure: An ArrayList is an indexed based\ndynamic array. A LinkedList is a Doubly Linked List data\nstructure.\n \n2. Insertion: It is easier to insert new elements in a\nLinkedList, since there is no need to resize an array.\nInsertion in ArrayList is O(n), since it may require resizing\nof array and copying its contents to new array.\n \n3. Remove elements: LinkedList has better performance in\nremoval of elements than ArrayList.\n \n4. Memory Usage: LinkedList uses more memory than\nArrayList, since it has to maintain links for next and\nprevious nodes as well.\n \n5. Access: LinkedList is slower in accessing an element,\nsince we have to traverse the list one by one to access the\nright location."},{"number":176,"categorie":"Java Collection","question":"What is the difference between a Set and a Map in Java?","reponse":"Main differences between a Set and a Map in Java are:\n \n \n1. Duplicate Elements: A Set does not allow inserting\nduplicate elements. A Map does not allow using duplicate\nkeys, but it allows inserting duplicate values for unique\nkeys.\n \n2. Null values: A Set allows inserting maximum one null\nvalue. In a Map we can have single null key at most and\nany number of null values.\n \n3. Ordering: A Set does not maintain any order of elements.\nSome of sub-classes of a Set can sort the elements in an\norder like LinkedHashSet. A Map does not maintain any\norder of its elements. Some of its sub-classes like\nTreeMap store elements of the map in ascending order of\nkeys."},{"number":177,"categorie":"Java Collection","question":"What is the use of a Dictionary class?","reponse":"The Dictionary class in Java is used to store key-value pairs. Any\nnon-null object can be used for key or value. But we cannot insert a\nnull key or null object in Dictionary.\n \nDictionary class is deprecated now. So it should not be used in\nnewer implementations."},{"number":178,"categorie":"Java Collection","question":"What is the default size of load factor in a HashMap collection in Java?","reponse":"Default value of load factor in a HashMap is 0.75."},{"number":179,"categorie":"Java Collection","question":"What is the significance of load factor in a HashMap in Java?","reponse":"A HashMap in Java has default initial capacity 16 and the load\nfactor is 0.75f (i.e. 75% of current map size). The load factor of a\nHashMap is the level at which its capacity should be doubled.\n \nFor example, in a HashMap of capacity 16 and load factor .75. The\ncapacity will become 32 when the HashMap is 75% full. Therefore,\nafter storing the 12th key– value pair (16 * .75 = 12) into HashMap,\nits capacity becomes 32."},{"number":180,"categorie":"Java Collection","question":"What are the major differences between a HashSet and a HashMap?","reponse":"The main difference between a HashSet and a HashMap are:\n \n1. Base class: A HashSet class implements the Set interface.\nWhereas a HashMap class implements the Map interface.\n \n2. Storage: A HashSet is used to store distinct objects. A\nHashMap is used for storing key & value pairs, so that\nthese can be retrieved by key later on.\n \n3. Duplicate Elements: A HashSet does not allow storing\nduplicate elements. A HashMap also does not allow\nduplicate keys. But we can store duplicate values in a\nHashMap.\n \n4. Null Elements: In a HashSet we can store a single null\nvalue. In a HashMap we can store single null key, but any\nnumber of null values.\n \n5. Element Type: A HashSet contains only values of objects\nas its elements. Whereas a HashMap contains entries(key\nvalue pairs).\n \n6. Iteration: By using an Iterator we can iterate a HashSet.\nBut a HashMap has to be converted into Set for iteration."},{"number":181,"categorie":"Java Collection","question":"What are the similarities between a HashSet and a HashMap in Java?","reponse":"As the name suggests, HashSet and HashMap are Hashing based\ncollections. Similarities between HashSet and HashMap are:\n \n1. Thread Safety: Both HashMap and HashSet are not\nsynchronized collections. Therefore they are not good for\nthread-safe operations. To make these thread-safe we need\nto explicitly use synchronized versions.\n \n2. Order of Elements: None of these classes guarantee the\norder of elements. These are unordered collections.\n \n3. Internal Implementation: A HashMap backs up a HashSet\ninternally. So HashSet uses a HashMap for performing its\noperations.\n \n4. Performance: Both of these collections provide constant\ntime performance for basic operations such as insertion\nand removal of elements."},{"number":182,"categorie":"Java Collection","question":"What is the reason for overriding equals() method?","reponse":"The equals() method in Object class is used to check whether two\nobjects are same or not. If we want a custom implementation we can\noverride this method.\n \nFor example, a Person class has first name, last name and age. If we\nwant two Person objects to be equal based on name and age, then\nwe can override equals() method to compare the first name, last\nname and age of Person objects.\n \nGenerally in HashMap implementation, if we want to use an object\nas key, then we override equals() method."},{"number":183,"categorie":"Java Collection","question":"How can we synchronize the elements of a List, a Set or a Map?","reponse":"Sometimes we need to make collections Thread-safe for use in\nMulti-threading environment. In Java, Collections class provides\nuseful static methods to make a List, Set or Map as synchronized\ncollections. Some of these methods are:\n \nstatic <T> Collection<T>synchronizedCollection(Collection<T>\nc)\nReturns a synchronized (thread-safe) collection backed by the\nspecified collection.\n \nstatic <T> List<T>synchronizedList(List<T> list)\nReturns a synchronized (thread-safe) list backed by the specified\nlist.\n \nstatic <K,V> Map<K,V>synchronizedMap(Map<K,V> m)\nReturns a synchronized (thread-safe) map backed by the specified\nmap.\n \nstatic <T> Set<T>  synchronizedSet(Set<T> s)\nReturns a synchronized (thread-safe) set backed by the specified\nset.\n \nstatic <K,V>\nSortedMap<K,V>synchronizedSortedMap(SortedMap<K,V> m)\nReturns a synchronized (thread-safe) sorted map backed by the\nspecified sorted map.\n \nstatic <T> SortedSet<T>synchronizedSortedSet(SortedSet<T> s)\nReturns a synchronized (thread-safe) sorted set backed by the\nspecified sorted set."},{"number":184,"categorie":"Java Collection","question":"What is Hash Collision?","reponse":"How\nJava handles hash-collision in\nHashMap?\n \nIn a Hashing scenario, at times two different objects may have same\nHashCode but they may not be equal. Therefore, Java will face\nissue while storing the two different objects with same HashCode in\na HashMap. This kind of situation is Hash Collision.\n \nThere are different techniques of resolving or avoiding Hash\nCollision. But in HashMap, Java simply replaces the Object at old\nKey with new Object in case of Hash Collision."},{"number":185,"categorie":"Java Collection","question":"What are the Hash Collision resolution techniques?","reponse":"To resolve a Hash Collision we can use one of the following\ntechniques:\n \nSeparate Chaining with Linked List\nSeparate Chaining with List Head Cells\nOpen Addressing with Coalesced Hashing\nOpen Addressing with Cuckoo Hashing\nHopscotch Hashing\nRobinhood Hashing"},{"number":186,"categorie":"Java Collection","question":"What is the difference between Queue and Stack data structures?","reponse":"Queue is a FIFO data structure. FIFO stands for First In First Out. It\nmeans the element added first will be removed first from the queue.\nA real world example of Queue is a line for buying tickets at a\nstation. The person entering first in the Queue is served first.\n \nStack is a LIFO data structure. LIFO stands for Last In First Out.\nThe element that is added last is removed first from the collection.\nIn a Stack elements are added or removed from the top of stack.\n \nA real world example of Stack is back button in browser. We can go\nback one by one only and it works in the reverse order of adding\nwebpages to history              ."},{"number":187,"categorie":"Java Collection","question":"What is an Iterator in Java?","reponse":"Iterator is an interface in Java to access the elements in a collection.\nIt is in java.util package.\nIt provides methods to iterate over a Collection class in Java.\n \nIterator interface in Java is based on Iterator design pattern. By\nusing an Iterator one can traverse a container of objects and can\nalso access the objects in the container. A container of objects is a\nCollection class in Java."},{"number":188,"categorie":"Java Collection","question":"What is the difference between Iterator and Enumeration in Java?","reponse":"Main differences between Iterator and Enumeration in Java are:\n \n1. Version: Enumeration interface is in Java since JDK 1.0.\nIterator interface was introduced in Java 1.2.\n \n2. remove() method: The main difference between\nEnumeration and Iterator interface is remove() method.\nEnumeration can just traverse a Collection object. If we\nuse Enumeration, we cannot do any modifications to a\nCollection while traversing the collection. Iterator\ninterface provides remove() method to remove an element\nwhile traversing the Collection. There is not remove()\nmethod in Enumeration interface.\n \n3. Method names: Names of methods in Iterator interface are\nhasNext(), next(), remove(). Names of methods in\nEnumeration interface are hasMoreElements(),\nnextElement().\n \n4. Legacy Interface: Enumeration is considered as a legacy\ninterface. It is used to traverse legacy classes like Vector,\nStack and HashTable. Iterator is a newer interface that is\nused to traverse almost all of the classes in Java\nCollections framework.\n \n5. Fail-fast vs. Fail-safe: Iterator is based on fail-fast\nprinciple. It throws ConcurrentModificationException if a\ncollection is modified during iteration over that collection.\nAn Enumeration is based on fail-safe principle. It doesn’t\nthrow any exception if a collection is modified during\ntraversal.\n 6. Safety: Since Iterator is fail-fast and does not allow\nmodification of a collection by other threads, it is\nconsidered safer than Enumeration."},{"number":189,"categorie":"Java Collection","question":"What is the design pattern used in the implementation of Enumeration in Java?","reponse":"Enumeration is based on Iterator design pattern. Iterator design\npattern provides a common interface with methods to traverse the\ncollection of objects. It hides the underlying implementation details\nof the collection."},{"number":190,"categorie":"Java Collection","question":"Which methods do we need to override to use an object as key in a HashMap?","reponse":"If we want to use an object as a key in a HashMap in Java, then we\nhave to make sure that it has the implementation of equals() and\nhashCode() methods."},{"number":191,"categorie":"Java Collection","question":"How will you reverse a List in Java?","reponse":"In Collections class, Java provides a method reverse(List list) that\ncan be used to reverse a List.\n \nE.g.\nCollections.reverse(myList);"},{"number":192,"categorie":"Java Collection","question":"How will you convert an array of String objects into a List?","reponse":"Java provides Arrays class in java.util package. Arrays class has a\nmethod asList() that accepts an Array as input and returns a List as\noutput.\n \npublic static <T> List<T> asList(T... a)\n \nString[]  myArray =  {\"George\"  , \"Jack\" , \"Ryan\"};\nList myList =  Arrays.asList(myArray);"},{"number":193,"categorie":"Java Collection","question":"What is the difference between peek(), poll() and remove() methods of Queue interface in java?","reponse":"In a Java Queue, poll() and remove() methods can be used for\nremoving the head object of Queue. The main difference arises in\nthe case when Queue is empty().\n \nIf Queue is empty then poll() method returns null value. If Queue is\nempty then remove() method throws NoSuchElementException.\n \nIn a Java Queue, peek() method retrieves the head of Queue but it\ndoes not remove it. If queue is empty then peek() method returns\nnull value."},{"number":194,"categorie":"Java Collection","question":"What is the difference between Array and ArrayList in Java?","reponse":"The main differences between Array and ArrayList in Java are:\n \n1. Size: Array in Java is fixed in size. We cannot change the\nsize of array after creating it. ArrayList is dynamic in size.\nWhen we add elements to an ArrayList, its capacity\nincreases automatically.\n \n2. Performance: In Java Array and ArrayList give different\nperformance for different operations.\n \n \n3. add() or get(): Adding an element to or retrieving an\nelement from an array or ArrayList object has similar\nperformance. These are constant time operations.\n \n4. resize(): Automatic resize of ArrayList slows down the\nperformance. ArrayList is internally backed by an Array.\nIn resize() a temporary array is used to copy elements from\nold array to new array.\n \n \n5. Primitives: Array can contain both primitive data types as\nwell as objects. But ArrayList cannot contain primitive\ndata types. It contains only objects.\n \n6. Iterator: In an ArrayList we use an Iterator  object to\ntraverse the elements. We use for loop for iterating\nelements in an array. \n \n7. Type Safety:  Java helps in ensuring Type Safety of\nelements in an ArrayList by using Generics. An Array cancontain objects of same type of class. If we try to store a\ndifferent data type object in an Array then it throws\nArrayStoreException.\n \n8. Length:  Size of ArrayList can be obtained by using size()\nmethod. Every array object has length variable that is same\nas the length/size of the array.\n \n9. Adding elements: In an ArrayList we can use add()\nmethod to add objects. In an Array assignment operator is\nused for adding elements.\n \n10. Multi-dimension: An Array can be multi-dimensional. An\nArrayList is always of single dimension."},{"number":195,"categorie":"Java Collection","question":"How will you insert, delete and retrieve elements from a HashMap collection in Java?","reponse":"We use following methods to insert, delete and retrieve elements in\na HashMap.\n \n1. Retrieve: We use get() method to retrieve elements from a\nHashMap.\nValue get(Object key)\n \n2. Insert: We use put() method to insert a key value pair in a\nHashMap.\nValue put(Key k, Value v)\n \n3. Delete: We use remove() method to delete key-value pair\nfrom the HashMap.\nValue remove(Object key)"},{"number":196,"categorie":"Java Collection","question":"What are the main differences between HashMap and ConcurrentHashMap in Java?","reponse":"Main differences between HashMap and ConcurrentHashMap are:\n \n1. Synchronization: A HashMap is not synchronized. But a\nConcurrentHashMap is a synchronized object.\n2. Null Key: A HashMap can have one null key and any\nnumber of null values. A ConcurrentHashMap cannot have\nnull keys or null values.\n3. Multi-threading: A ConcurrentHashMap works well in a\nmulti-threading environment."},{"number":197,"categorie":"Java Collection","question":"What is the increasing order of performance for following collection classes in Java?","reponse":"The increasing order of performance is:\n \nHashtable   \nCollections.SynchronizedMap\nConcurrentHashMap\nHashMap\n \nHashtable has the worst performance and HashMap has the best\nperformance."},{"number":198,"categorie":"Java Collection","question":"Why does Map interface not extend Collection interface in Java?","reponse":"A Map is a collection objects. But Map interface is not compatible\nwith Collection interface in Java.\n \nA Map requires key as well as a value. So it requires two\nparameters to add an element to a HashMap.\n \nBut Collection interface provides add(Object o) method with only\none parameter.\n \nMap collection has to provide methods like valueSet, keySet etc. \nThese methods are specific to Map collection. Where as methods in\nCollection interface can be reused by a List, Set, Queue etc."},{"number":199,"categorie":"Java Collection","question":"What are the different ways to iterate elements of a list in Java?","reponse":"There are mainly two ways to iterate the elements of list in Java:\n \n1. Iterator: We can get an Iterator for list and use it to iterate\nthe objects of the list.\n \n2. For-each loop: We can use for-each loop to traverse all\nthe elements of a list."},{"number":200,"categorie":"Java Collection","question":"What is CopyOnWriteArrayList?","reponse":"How it is\ndifferent from ArrayList in Java?\n \nCopyOnWriteArrayList was introduced in Java 5 version. It is a\nthread-safe collection. It is similar to an ArrayList.\n \nIn CopyOnWriteArrayList, all mutative operations (add, set etc.)\nare implemented by making a fresh copy of the underlying array.\n \nIterator of CopyOnWriteArrayList is guaranteed to not throw\nConcurrentModificationException. But Iterator also does not reflect\nany additions, removals that happened to list after the Iterator was\ncreated.\n \nAll elements including null are permitted in CopyOnWriteArrayList."},{"number":201,"categorie":"Java Collection","question":"How remove() method is implemented in a HashMap?","reponse":"Remove() method in HashMap uses logic similar to the one used in\nget() method. First we locate the correct bucket in HashMap for an\nentry. Then within that bucket we remove the element e. It is similar\nto removing a node from a single-linked list.\n \nIf e is the first element in the bucket we set the corresponding\nelement of Hash to e.next. Else we set the next field of the element\njust before e to e.next"},{"number":202,"categorie":"Java Collection","question":"What is BlockingQueue in Java Collections?","reponse":"BlockingQueue was introduced in Java 1.5. It extends Queue\ninterface in Java.\n \nBlockingQueue supports operations that wait for the queue to\nbecome non-empty when retrieving an element. Also it supports the\noperations that wait for space to become available in the queue\nwhile storing an element.\n \nSome of the features of BlockingQueue are:\n \nIt does not accept null elements.\nIts main use is in producer-consumer problems.\nBlockingQueue implementation is thread-safe.\nIt can be used in inter-thread communications.\nIt does not support any kind of \"close\" or \"shutdown\"\noperation to indicate that no more items will be added."},{"number":203,"categorie":"Java Collection","question":"How is TreeMap class implemented in Java?","reponse":"Internally, a TreeMap class in Java uses Red-Black tree.\n \nIt is a NavigableMap. The map sorts the keys in natural order or it\ncan use a Comparator supplied at the creation time.\n \nThe implementation of TreeMap is not synchronized in Java."},{"number":204,"categorie":"Java Collection","question":"What is the difference between Fail-fast and Fail-safe iterator in Java?","reponse":"Differences between Fail-fast and Fail-safe iterators are as\nfollows:\n \nFail-fast iterator throws ConcurrentModificationException. But\nFail-safe iterator does not throw this exception.\n \nFail-fast iterator does not clone the original collection. Fail-safe\niterator creates a copy of the original collection of objects.\n \nA Fail-fast iterator tries to immediately throw Exception when it\nencounters failure. A Fail-safe Iterator works on a copy of\ncollection instead of original collection."},{"number":205,"categorie":"Java Collection","question":"How does ConcurrentHashMap work in Java?","reponse":"ConcurrentHashMap extends AbstractMap in Java. It was\nintroduced in Java 1.5. It provides concurrency in a collection\nbased on a HashMap.\n \nAll methods are thread-safe in ConcurrentHashMap.\n \nInternally there is a Hashtable backing a ConcurrentHashMap. This\nHashtable supports the concurrent methods for retrieval of data as\nwell as updates on ConcurrentHashMap.\n \nIt has same functional specification as a Hashtable.\n \nIt also supports a set of sequential and bulk operations. These\noperations accept parallelismThreshold argument."},{"number":206,"categorie":"Java Collection","question":"What is the importance of hashCode() and equals() methods?","reponse":"In a HashMap collection it is very important for a key object to\nimplement hashCode() method and equals() method. If hashCode()\nmethod returns same hashcode for all key objects then the hash\ncollision will be high in HashMap. Also with same hashcode, we\nwill get same equals method that will make our HashMap\ninefficient.\n \nThe problem arises when HashMap treats both outputs same instead\nof different. It will overwrite the most recent key-value pair with\nthe previous key-value pair.\n \nSo it is important to implement hashCode() and equals() methods\ncorrectly for an efficient HashMap collection."},{"number":207,"categorie":"Java Collection","question":"What is the contract of hashCode() and equals() methods in Java?","reponse":"Contract of hashCode() and equals() methods is as follows in Java:\n \nIf  object1.equals(object2), then  object1.hashCode() ==\nobject2.hashCode() should always be true. It means if two objects\nare equal then their hashCode should be same.\n \nIf object1.hashCode() == object2.hashCode() is true, it does not\nguarantee that object1.equals(object2). It means if two objects have\nsame hashCode, then can still have different values so that may not\nbe equal objects."},{"number":208,"categorie":"Java Collection","question":"What is an EnumSet in Java?","reponse":"Set: EnumSet is a specialized implementation of Set.\n \n1. Use: It is mainly used with enum types.\n \n2. Single enum type: All the elements in an EnumSet must\ncome from a single enum type when the set is created.\n \n3. Bit vector: Internally, EnumSet is represented as bit\nvector.\n \n4. Iterator: The iterator of EnumSet traverses the elements in\ntheir natural order. (It is the order in which the enum\nconstants are declared).\n \n5. Null: In an EnumSet, null elements are not permitted. If we\ntry to insert a null element it throws NullPointerException.\n \n6. Thread-safe: EnumSet is not a synchronized collection.\nFor use in multi-threading scenarios, EnumSet should be\nsynchronized.\n \n7. Bit flags: EnumSet is a very good alternative to int based\n“bit flags” implementation."},{"number":209,"categorie":"Java Collection","question":"What are the main Concurrent Collection classes in Java?","reponse":"Java 1.5 has provided new package java.util.concurrent. This\npackage contains thread-safe collection classed. These collection\nclasses can be modified while iterating. The iterator of these\nclasses is fail-safe.\n \nMain Concurrent Collection classes in Java 8 are:\n \nArrayBlockingQueue\nCopyOnWriteArrayList\nCopyOnWriteArraySet\nConcurrentHashMap\nConcurrentLinkedDeque\nConcurrentLinkedQueue\nLinkedBlockingQueue\nLinkedBlockingDeque\nPriorityBlockingQueue"},{"number":210,"categorie":"Java Collection","question":"How will you convert a Collection to SynchronizedCollection in Java?","reponse":"Java provides an easy method in java.utils.Collections class to\ncreate a ThreadSafe collection from a regular collection. \n \nWe can use the method synchronizedCollection() for this purpose.\n \nFor any class of type T we can use following method:\n \nstatic <T> Collection<T>synchronizedCollection(Collection<T>\nc)"},{"number":211,"categorie":"Java Collection","question":"How IdentityHashMap is different from a regular Map in Java?","reponse":"IndentityHashMap in Java implements Map interface. But it is not a\ngeneral purpose implementation. It violates the general contract of\nMap interface by a different implementation of equals() method.\n \nIn an IdentityHashMap, two keys k1 and k2 are equal if and only if\n(k1==k2). (In a normal Map implementation (like HashMap) two\nkeys k1 and k2 are considered equal if and only if (k1==null ?\nk2==null : k1.equals(k2)).)\n \nIt implements the Map interface with a hash table, using reference-\nequality in place of object-equality when comparing keys (and\nvalues)."},{"number":212,"categorie":"Java Collection","question":"What is the main use of IdentityHashMap?","reponse":"Main uses of IdentityHashMap are:\n \n1. Topology Preservation: The typical use of\nIdentityHashMap class is topology-preserving object\ngraph transformations, such as serialization or deep-\ncopying. In such a scenario, a program must maintain a\n\"node table\" to  keep track of all the object references that\nhave already been processed.\n \n2. The node table should not considered distinct objects as\nequal even if they happen to be equal.\n \n3. Proxy objects: Another use of this class is to maintain\nproxy objects. A debugging program has to maintain a\nproxy object for each object in the program being\ndebugged."},{"number":213,"categorie":"Java Collection","question":"How can we improve the performance of IdentityHashMap?","reponse":"IdentityHashMap class has one tuning parameter for performance\nimprovement: expectedMaxSize.\n \nThis parameter is the maximum number of key-value mappings that\nthe map is expected to hold.\n \nWe can use this parameter is used to determine the number of\nbuckets initially in the hash table. The precise relationship between\nthe expected maximum size and the number of buckets is\nunspecified.\n \nIf the number of key-value mappings exceeds the expected maximum\nsize, the number of buckets is increased.\n \nIncreasing the number of buckets is also known as rehashing.\nRehashing may be fairly expensive. So it is better to create identity\nhash maps with a sufficiently large expected maximum size.\n \nBut iteration over a Map collection requires time proportional to\nthe number of buckets in the hash table. So iteration may take extra\ntime due to large number of buckets.\n \nTherefore the value of expectedMaxSize should be set in\nconsideration with both of these aspects."},{"number":214,"categorie":"Java Collection","question":"Is IdentityHashMap thread- safe?","reponse":"The implementation of IdentityHashMap is not thread-safe, since its\nmethods are not synchronized.\n \nThe iterators returned by the iterator method of IdentityHashMap\nare fail-fast. But the fail-fast behavior of an iterator cannot be\nguaranteed.\n \nSince the Iterator is fail-fast, it throws\nConcurrentModificationException."},{"number":215,"categorie":"Java Collection","question":"What is a WeakHashMap in Java?","reponse":"WeakHashMap is a class similar to IdentityHashMap.\n \nInternally, it is represented by a Hashtable.\n \nIt is not a synchronized class. We can make a WeakHashMap thread\nsafe by using Collections.synchronizedMap() method.\n \nAn entry in WeakHashMap is automatically removed when it is no\nlonger in ordinary use.\n \nThe presence of a mapping for a given key does not prevent the key\nfrom being discarded by the garbage collector.\n \nWeakHashMap also permits null keys and null values."},{"number":216,"categorie":"Java Collection","question":"How can you make a Collection class read Only in Java?","reponse":"In Java, there are useful methods to make a Collection class read\nOnly. We can make the Collection read Only by using one of the\nfollowing methods:\n \n \nCollections.unmodifiableMap(Map m)\nCollections.unmodifiableList(List l)\nCollections.unmodifiableSet(Set s)\nCollections.unmodifiableCollection(Collection c)"},{"number":217,"categorie":"Java Collection","question":"When is UnsupportedOperationException thrown in Java?","reponse":"In a Java collection UnsupportedOperationException is thrown\nwhen the requested operation is not supported by the collection.\n \nIt is an unchecked exception that is thrown on optional operations.\n \nIf there is an optional add() or remove() methods in a read only\ncollection, then this exception can be thrown."},{"number":218,"categorie":"Java Collection","question":"Let say there is a Customer class. We add objects of Customer class to an ArrayList. How can we sort the Customer objects in ArrayList by using customer firstName attribute of Customer class?","reponse":"There are two ways to handle this scenario. We can use these\noptions:\nComparable: Implement the Comparable interface for Customer\nclass and compare customer objects by firstName attribute.\n \nComparator: Implement Comparator for comparing two Customer\nobjects on the basis of firstName attribute. Then use this comparator\nobject in sort method of Collections class."},{"number":219,"categorie":"Java Collection","question":"What is the difference between Synchronized Collection and Concurrent Collection?","reponse":"In Java 1.5 many Concurrent collection classes were added in SDK.\nThese are ConcurrentHashMap, CopyOnWriteArrayList,\nBlockingQueue etc.\n \nJava also provides utility methods to get a synchronized copy of\ncollection like ArrayList, HashMap etc. by using\nCollections.synchronizedList(), Collections.synchronizedMap()\nmethods.\n \nThe main difference is in performance. Concurrent collection\nclasses have better performance than synchronized collection\nclasses because they lock only a portion of the class to achieve\nconcurrency and thread-safety."},{"number":220,"categorie":"Java Collection","question":"What is the scenario to use ConcurrentHashMap in Java?","reponse":"ConcurrentHashMap is more suited for scenarios where we have\nmultiple reader threads and one writer thread. In this case map is\nlocked only during the write operation.\n \nIf we have an equal number of reader and writer threads then\nConcurrentHashMap performance is similar to a Hashtable or a\nsynchronized HashMap."},{"number":221,"categorie":"Java Collection","question":"How will you create an empty Map in Java?","reponse":"There are two ways to create an empty Map in Java.\n \n1. Immutable: If we want an immutable empty Map, we can\nuse following code:\n \nmyMap = Collections.emptyMap();\n \n2. Any map: For all other scenarios, we can use following\ncode by using new method:\n \nmyMap = new HashMap();"},{"number":222,"categorie":"Java Collection","question":"What is the difference between remove() method of Collection and remove() method of Iterator?","reponse":"In Collection interface remove(Object o) method is used to remove\nobjects from a Collection.\n \nList interface also provides remove(int index) method to remove an\nobject at a specific index.\n \nThese methods are used to remove an entry from Collection, while\nno thread is iterating over it.\n \nWhen we are iterating over a Collection, then we have to remove()\nmethod of Iterator. This method removes current element from\nIterator’s point of view. If we use remove(0 method of Collection\nor List, then we will get ConcurrentModificationException.\n \nTherefore, it is recommended to use remove() method of Iterator\nduring the traversal of a Collection by an Iterator."},{"number":223,"categorie":"Java Collection","question":"Between an Array and ArrayList, which one is the preferred collection for storing objects?","reponse":"An ArrayList is backed up by array internally. There are many\nusability advantages of using an ArrayList over an array in Java.\n \nArray has a fixed length at the time of creation. Once it is created\nwe cannot change its length.\n \nArrayList is dynamic in size. Once it reaches a threshold, it\nautomatically allocates a new array and copies contents of old array\nto new array.\n \nAlso ArrayList provides support of Generics. But Array does not\nsupport Generics.\n \nE.g. If we store an Integer object in a String array at Runtime it will\nthrow ArrayStoreException. Whereas, if we use ArrayList then as\ncompile time we will get the error. This helps in preventing errors\nfrom happening at runtime.\n \nIf we know the size in advance and do not need re-sizing the\ncollection then Array should be used in place of an ArrayList."},{"number":224,"categorie":"Java Collection","question":"Is it possible to replace Hashtable with ConcurrentHashMap in Java?","reponse":"Yes, a ConcurrentHashMap can be replaced with Hashtable in Java.\n \nBut it requires careful observation, since locking behavior of\nHashtable is different than that of ConcurrentHashmap.\n \nA Hashtable locks whole Map instead of a portion of Map.\nCompound operations like if(Hashtable.get(key) == null) put(key,\nvalue) work in Hashtable but not in ConcurrentHashMap.\n \nIn a ConcurrentHashMap we use putIfAbsent() method for such a\nscenario."},{"number":225,"categorie":"Java Collection","question":"How CopyOnWriteArrayList class is different from ArrayList and Vector classes?","reponse":"CopyOnWriteArrayList was introduced in Java 1.5. It implements\nList interface.\n \nIt provides better concurrent access methods than a Synchronized\nList.\n \nIn CopyOnWriteList, concurrency is achieved by copying ArrayList\nover each write and replace with original instead of locking.\n \nCopyOnWriteArrayList also does not throw any\nConcurrentModification Exception during Iteration.\n \nIt is a thread-safe list.\n \nIt is different from a Vector in terms of Concurrency.\nCopyOnWriteArrayList provides better Concurrency by reducing\ncontention among readers and writers."},{"number":226,"categorie":"Java Collection","question":"Why ListIterator has add() method but Iterator does not have?","reponse":"ListIterator can iterate in the both directions of a Collection. It\nmaintains two pointer for previous and next element. In ListIterator\nwe can use add() method to add an element into the list immediately\nbefore the element returned by next() method.\n \nSo a subsequent call to next() method will not be affected. And the\ncall to previous() method will return the newly added element.\n \nIn Iterator we can only traverse in one direction. So there is no\npurpose of add() method there."},{"number":227,"categorie":"Java Collection","question":"Why do we sometime get ConcurrentModificationException during iteration?","reponse":"When we remove an object by using remove() method of a\nCollection or List while an Iterator thread is traversing it, we get\nConcurrentModificationException. If an Iterator detects any\nstructural change in Collection it can throw\nConcurrentModificationException."},{"number":228,"categorie":"Java Collection","question":"How will you convert a Map to a List in Java?","reponse":"In Java, a Map has three collection sets:\n \nkey set\nvalue set\nkey-value set\n \nEach of these Sets can be converted to List by using a constructor.\n \nSample code is as follows:\n \nList keyList = new ArrayList(map.keySet());\nList valueList = new ArrayList(map.values());\nList entryList = new ArrayList(map.entrySet());"},{"number":229,"categorie":"Java Collection","question":"How can we create a Map with reverse view and lookup in Java?","reponse":"In a Map we can lookup for a value by using a distinct key. In a Map\nwith reverse view and lookup, even the values are distinct. So there\nis one to one mapping between keys and values and vice version.\n \nIf we enable this constraint on a Map then we can look up a key by\nits value. Such data structure is called bi-directional map.\n \nThere is no built data structure similar to reverse lookup Map in\nJDK.\n \nBut Apache Common Collections and Guava libraries provide\nimplementation of bidirectional map. It is called BidiMap and\nBiMap. Both of these data structure enforce the constraint of one to\none mapping between keys and values."},{"number":230,"categorie":"Java Collection","question":"How will you create a shallow copy of a Map?","reponse":"In Java, most implementations of Map interface provide a\nconstructor to create copy of another map. But the copy method is\nnot synchronized.\n \nTherefore, when a thread is copying the map, another thread can\nmodify it.\n \nTo prevent such a scenario, we should use\nCollections.synchronizedMap() method to first create a thread-safe\nmap.\n \nAnother way of to create a shallow copy is by using clone() method.\nBut it is not considered as a recommended approach."},{"number":231,"categorie":"Java Collection","question":"Why we cannot create a generic array in Java?","reponse":"Java does not allow creation of array with generics as elements. \n \nIn Java an array has to know the type information of its elements at\nruntime.\n \nThis information is used at runtime to throw ArrayStoreException if\ndata type of an element to be inserted does not match the type of\nArray.\n \nIn case of Generics, the type information of a collection is erased at\nruntime by Type Erasure. Due to this array cannot use generics as\nelements."},{"number":232,"categorie":"Java Collection","question":"What is a PriorityQueue in Java?","reponse":"A PriorityQueue is data structure based on Queue. Unlike Queue,\nthe elements on PriorityQueue are not returned in FIFO order.\n \nA PriorityQueue maintains the natural order of its elements or it\nuses a Comparator provided at initialization.\n \nIt is an unbounded queue based on a priority heap.\n \nPriorityQueue does not allow null values. We cannot add any object\nthat does not provide natural ordering to PriorityQueue.\n \nPriorityQueue in Java is not thread-safe.\n \nIt gives O(log n) time for enqueing and dequeing operations."},{"number":233,"categorie":"Java Collection","question":"What are the important points to remember while using Java Collections Framework?","reponse":"Some of the important points to remember while using Java\nCollections Framework are:\n \n1. Interfaces: For Collections, we should write code with\ngeneric interfaces instead of concrete implementation. Due\nto this we maintain the flexibility of changing the\nimplementation at a later point of time.\n \n2. Generics: We should use Generics for type-safety and to\navoid ClassCastException at runtime.\n \n3. Collections: It is recommended to use Collections utility\nclass for algorithms and various other common methods\nfor Collections.\n \n4. Right Type: We have to choose the right type of Java\ncollection based on our need. If size is fixed, we can use\nArray over ArrayList. If we do not want duplicate\nelements we use Set.\n \nIf we need the ability to iterate the elements of a Map in\nthe order of insertion then we use a TreeMap.\n \n5. Initial Size: In some collection classes we can specify the\ninitial size/capacity. Therefore we should have an estimate\nof number of elements in a Collection before deciding the\nright collection type. We can use it to avoid rehashing or\nresizing.\n \n 6. Map: We should use immutable classes provided by Java\nas key elements in a Map."},{"number":234,"categorie":"Java Collection","question":"How can we pass a Collection as an argument to a method and ensure that method will not be able to modify it?","reponse":"To ensure that a method is not able to modify a Collection passed as\nan argument, we have to make the Collection read only.\n \nWe can make a read only collection by using\nCollections.unmodifiableCollection(Collection c) method.\n \nThis will make sure that any operation to change the collection will\nthrow UnsupportedOperationException."},{"number":235,"categorie":"Java Collection","question":"Can you explain how HashMap works in Java?","reponse":"In Java, a HashMap works on the concept of hashing.\n \nA HashMap in Java stores both key and value objects, in a bucket. It\nis stored as an Entry object that implements Map.Entry interface.\n \nThe key object used in a HashMap has to provide implementation\nfor hashCode() and equals() methods.\n \nWhen put() method is used to store a key-value pair, the HashMap\nimplementation calls hashCode() method on Key object to calculate\na hash that is used to find a bucket where Entry object will be\nstored.\n \nWhen get() method is used to retrieve a value stored against a key\nobject, we first calculate a hash of Key object. Then we use this\nhash to find the bucket in which that particular key is stored.\n \nOnce Key object’s location is found, it may happen that more than\none Key is stored in same location. So now we use equals() method\nto find the exact Key object. Once the exact Key object is found we\nuse it to get Value object."},{"number":236,"categorie":"Java Collection","question":"Can you explain how HashSet is implemented in Java?","reponse":"Internally, a HashSet uses a HashMap to store the elements and to\nmaintain the uniqueness of elements.\n \nWhen we create a HashSet object, a corresponding HashMap object\nis also created.\n \nWhen we insert an element in HashSet, it inserts it into\ncorresponding HashMap."},{"number":237,"categorie":"Java Collection","question":"What is a NavigableMap in Java?","reponse":"As the name suggests, NavigableMap provides the capability to\nnavigate the keys of a Map in Java. A NavigableMap extends\nSortedMap interface.\n \nSome of the interesting methods of a NavigableMap are\ndescendingKeySet(), descendingMap(), headMap() and tailMap()"},{"number":238,"categorie":"Java Collection","question":"What is the difference between descendingKeySet() and descendingMap() methods of NavigableMap?","reponse":"The descendingKeySet() method of NavigableMap returns a\nNavigableSet in which the elements are stored in reversed order as\ncompared to the original key set.\n \nThe returned view is internally represented by the original KeySet\nof NavigableMap. Therefore any changes to the descending set also\nget reflected in the original set.\n \nBut it is not recommended to remove elements directly from the key\nset. We should use the Map.remove() method.\n \nThe descendingMap() method of NavigableMap returns a\nNavigableMap which is an inverse view of the original Map. The\norder of the elements in this view are in reverse order of the\nelements in original map. Any changes to this view are also\nreflected in the original map."},{"number":239,"categorie":"Java Collection","question":"What is the advantage of NavigableMap over Map?","reponse":"The main advantage of NavigableMap over Map is the Navigation\ncapability.\n \nIt provides the capabilities of a Map, SortedMap and navigation in\none collection.\n \nIt even returns the closest matches for given search targets.\n \nMethods like lowerEntry, floorEntry, ceilingEntry, and higherEntry\nreturn Map.Entry objects associated with keys respectively less\nthan, less than or equal, greater than or equal, and greater than a\ngiven key.\n \nMethods like lowerKey, floorKey, ceilingKey, and higherKey return\nonly the associated keys. All of these methods are designed for\nlocating, not traversing entries."},{"number":240,"categorie":"Java Collection","question":"What is the difference between headMap(), tailMap() and subMap() methods of NavigableMap?","reponse":"The headMap() method returns a view of the original\nNavigableMap that contains the elements that are less than a given\nelement.\n \n \nNavigableMap original = new TreeMap();\noriginal.put(\"1\", \"1\");\noriginal.put(\"2\", \"2\");\noriginal.put(\"3\", \"3\");\n \n//this headmap1 will contain elements \"1\" and \"2\"\nSortedMap headmap1 = original.headMap(\"3\");\n \n//this headmap2 will contain elements \"1\", \"2\", and \"3\" because\n\"inclusive\"=true\nNavigableMap headmap2 = original.headMap(\"3\", true);\n \n \nThe tailMap() method works similar to headMap() method, but it\nreturns all elements that are higher than the given input element.\n \nThe subMap() method accepts two parameters demarcating the\nboundaries of the view map to return.\n \nAll the three methods return a subset of the original map in a view\nform."},{"number":241,"categorie":"Java Collection","question":"How will you sort objects by Natural order in a Java List?","reponse":"We can use Collections.sort method to sort the elements of a List in\nnatural order. To use this method, we have to make sure that element\nobjects implement compareTo() method.\n \nWe can also use a Comparator to define the natural ordering for\nelements of a List. Then we can use this Custom Comparator in sort\nmethod of Collections class."},{"number":242,"categorie":"Java Collection","question":"How can we get a Stream from a List in Java?","reponse":"From Java 8 onwards it is a very easy to get a Stream from a List.\nWe can just use stream() method to get a stream from a list of\nelements."},{"number":243,"categorie":"Java Collection","question":"Can we get a Map from a Stream in Java?","reponse":"Yes, we can create a Map from the elements of a Stream. We can\nuse map() method to get a Map.\n \nE.g. items.stream()\n     .map( item -> item.toLowerCase() )\n \nIn this example we are creating a map with each item object\nmapped to its LowerCase equivalent.\n \nThis is also used in Map-Reduce implementation on a Stream"},{"number":244,"categorie":"Java Collection","question":"What are the popular implementations of Deque in Java?","reponse":"The two most popular implementation of Deque interface in Java\nare:\n \n1. ArrayDeque: It is a resizable array implementation of\nDeque. The capacity of ArrayDeque can increase based\non the need of the program. It is not thread safe\nimplementation. Also the iterator on ArrayDeque is fail-\nfast.\n \n2. LinkedList: This is another popular implementation of\nDeque interface in Java. It is also not synchronized, so it\nis not thread-safe. It mainly provides functionality of a\ndoubly linked list.\n \n Multi-threading"},{"number":245,"categorie":"Multi-threading","question":"What is a Thread in Java?","reponse":"A thread in Java is a lightweight process that runs within another\nprocess or thread.\n \nIt is an independent path of execution in an application. JVM gives\neach thread its own method-call stack.\n \nWhen we start JVM, Java starts one thread.  This thread calls the\nmain method of the class passed in argument to java call."},{"number":246,"categorie":"Multi-threading","question":"What is the priority of a Thread and how it is used in scheduling?","reponse":"In Java, every Thread has a priority. This priority is specified as a\nnumber between 1 to 10.\n \nScheduler in Java schedules different threads based on the priority\nof a thread. It is also known as pre-emptive scheduling.\n \nThe thread with higher priority gets preference in execution over a\nthread with lower priority."},{"number":247,"categorie":"Multi-threading","question":"What is the default priority of a thread in Java?","reponse":"In Java, a new thread gets the same priority as the priority of the\nparent thread that creates it.\n \nDefault priority of a thread is 5 (NORM_PRIORITY)."},{"number":248,"categorie":"Multi-threading","question":"What are the three different priorities that can be set on a Thread in Java?","reponse":"We can set following three priorities on a Thread object in Java:\n \n1. MIN_PRIORITY: This is the minimum priority that a\nthread can have.\n \n2. NORM_PRIORITY: This is the default priority that is\nassigned to a thread.\n \n \n3. MAX_PRIORITY: This is the maximum priority that a\nthread can have.\n \nDefault priority of a thread is 5 NORM_PRIORITY. The value of\nMIN_PRIORITY is 1 and the value of MAX_PRIORITY is 10."},{"number":249,"categorie":"Multi-threading","question":"What is the purpose of join() method in Thread class?","reponse":"In Java, Thread Scheduler controls thread scheduling. But we can\nuse join() method on a thread to make current thread to wait for\nanother thread to finish.\n \nWhen we use join(), the current thread stops executing. It wait for\nthe thread on which join() is called to finish.\n \nThis makes sure that current thread will continue only after the\nthread it joined finished running. Consider following example:\n \nPublic class ThreadJoin {\n Thread importantThread = new Thread(\n               new Runnable() {\n                   public void run () {\n                       //do something\n                   }\n                }\n  );\n  Thread currentThread = new Thread(\n               new Runnable() {\n                   public void run () {\n                       //do something\n                   }\n                }\n  );\n  importantThread.start(); // Line 1\n  importantThread.join();  // Line 2\n  currentThread.start(); // Line 3\n}\n \nIn the above example, main thread is executing. On Line 1, a new\nthread called importantThread is ready to run. But at Line 2, mainthread joins the importantThread. Now it lets importantTread to\nfinish and then it moves to Line 3. So currentThread at Line 3 will\nnot start till the importantThread has finished."},{"number":250,"categorie":"Multi-threading","question":"What is the fundamental difference between wait() and sleep() methods?","reponse":"The main difference between wait() and sleep() is that wait is an\nObject level method, whereas sleep() is a static method in Thread\nclass. A waiting thread can be woken up by another thread by\ncalling notify() on the monitor which is being waited on. But a\nsleeping thread cannot be woken up.\n \nA wait() and notify() has to happen within the same block that is\nsynchronized on the monitor object.\n \nWhen we call wait() the current thread releases the monitor and\ngoes to waiting state. Then another thread calls notify() to wake it\nup.\n \nIn case of sleep() current thread does not release the monitor or\nlocks. It just sleeps for some pre-defined time period."},{"number":251,"categorie":"Multi-threading","question":"Is it possible to call run() method instead of start() on a thread in Java?","reponse":"Yes. We can call run() method of a thread. But it does not work as a\nseparate thread. It will just work as a normal object in main thread\nand there will not be context switching between the threads."},{"number":252,"categorie":"Multi-threading","question":"How Multi-threading works in Java?","reponse":"Java provides support for Multithreading. In a Multithreading\nenvironment, one process can execute multiple threads in parallel at\nthe same time.\n \nIn Java, you can create process and then create multiple threads\nfrom that process. Each process can execute in parallel to perform\nindependent tasks.\n \nJava provides methods like- start(), notify(), wait(), sleep() etc. to\nmaintain a multi-threading environment."},{"number":253,"categorie":"Multi-threading","question":"What are the advantages of Multithreading?","reponse":"Main advantages of Multithreading are:\n \n1. Improved performance: We can improve performance of a\njob by Multi-threading.\n2. Simultaneous access to Multiple Applications: We can\naccess  multiple applications from a process by doing\nmultithreading\n3. Reduced number of Servers required: With Multi-\nthreading we need lesser number of servers, since one\nprocess can spawn multiple threads.\n4. Simplified Coding: In certain scenarios, it is easier to\ncode multiple threads than managing it from same thread."},{"number":254,"categorie":"Multi-threading","question":"What are the disadvantages of Multithreading?","reponse":"There are certain downsides to Multithreading. These are:\n \n1. Difficult to Debug: Multithreading code is difficult to\ndebug in case of an issue.\n2. Difficult to manage concurrency: Due to multiple threads,\nwe may experience different kinds of issues.\n3. Difficulty of porting code: It is difficult to convert existing\nsingle threaded code into multi-threading code.\n4. Deadlocks: In case of multi-threading we can experience\ndeadlocks in threads that are waiting for same resource."},{"number":255,"categorie":"Multi-threading","question":"What is a Thread in Java?","reponse":"In Java, a thread is a lightweight process that runs within another\nprocess or thread. It is an independent path of execution in an\napplication. Each thread runs in a separate stack frame.\n \nBy default Java starts one thread when the main method of a class is\ncalled."},{"number":256,"categorie":"Multi-threading","question":"What is a Thread’s priority and how it is used in scheduling?","reponse":"In Java, every Thread has a priority. This priority is specified as an\ninteger value. The priority value is used in scheduling to pick up the\nthread with higher priority for execution. The threads with higher\npriority get more preference in execution than the threads with\nlower priority.\n \nThe task scheduler schedules the higher priority threads first,\nfollowed by the lower priority threads."},{"number":257,"categorie":"Multi-threading","question":"What are the differences between Pre-emptive Scheduling Scheduler and Time Slicing Scheduler?","reponse":"In Pre-emptive scheduling, the highest priority task will keep getting\ntime to execute until it goes to waiting state or dead state or a task\nwith higher priority comes into queue for scheduling.\n \nIn Time slicing scheduling, every task gets a predefined slice of\ntime for execution, and then it goes to the pool of tasks ready for\nexecution. The scheduler picks up the next task for execution, based\non priority and various other factors."},{"number":258,"categorie":"Multi-threading","question":"Is it possible to call run() method instead of start() on a thread in Java​?","reponse":"Yes. We can call run() method of a thread. But it does not work as a\nseparate thread. It will just work as a normal object in main thread\nand there will not be context-switching between the threads."},{"number":259,"categorie":"Multi-threading","question":"How will you make a user thread into daemon thread if it has already started?","reponse":"No. We cannot make a user thread to daemon thread once it has\nalready started.\n \nIf we do it by calling setDaemon(), it will throw\nIllegalThreadStateException"},{"number":260,"categorie":"Multi-threading","question":"Can we start a thread two times in Java?","reponse":"No. We can call start() method only once on a thread in Java. If we\ncall it twice, it will give us exception."},{"number":261,"categorie":"Multi-threading","question":"In what scenarios can we interrupt a thread?","reponse":"We can interrupt a thread if we want to wake it up from the sleep or\nwait state."},{"number":262,"categorie":"Multi-threading","question":"In Java, is it possible to lock an object for exclusive use by a thread?","reponse":"Yes. We can use synchronized block to lock an object. The locked\nobject is inaccessible to any other thread. Only the thread that has\nlocked it can access it."},{"number":263,"categorie":"Multi-threading","question":"How notify() method is different from notifyAll() method?","reponse":"In Java, notify() method is used to unblock a specific thread that is\nin waiting stated. Whereas, notifyAll() method is used to unblock\nall the threads that are in waiting state."},{"number":264,"categorie":"Multi-threading","question":"What is a daemon thread in Java?","reponse":"A daemon thread in Java is a low priority thread that does not\nprevent the JVM from exiting when the program finishes. The thread\nkeeps running. Garbage Collection is an example of daemon thread."},{"number":265,"categorie":"Multi-threading","question":"How can we make a regular thread Daemon thread in Java?","reponse":"We can call setDaemon(boolean) method to change a thread to\ndaemon thread before the thread starts."},{"number":266,"categorie":"Multi-threading","question":"How will you make a user thread into daemon thread if it has already started?","reponse":"No. We cannot make a user thread to daemon thread once it has\nalready started. If we do it by calling setDaemon(), it will throw\nIllegalThreadStateException"},{"number":267,"categorie":"Multi-threading","question":"Can we start a thread two times in Java?","reponse":"No. We can call start() method only once on a thread in Java. If we\ncall it twice, it will give us exception."},{"number":268,"categorie":"Multi-threading","question":"What is a Shutdown hook in Java?","reponse":"The shutdown hook is a thread that is invoked implicitly by JVM\njust before the shut down. It can be used to clean up unused\nresources etc.\n \nWe can use java.lang.Runtime.addShutdownHook(Thread hook)\nmethod to register a new virtual-machine shutdown hook."},{"number":269,"categorie":"Multi-threading","question":"What is synchronization in Java?","reponse":"The concept of Synchronization in Java is used in Multi-threading\nprogramming.\n \nIt is a feature in Java that helps in controlling the access of multiple\nthreads to a shared resource.\n \nIt is used to prevent Deadlock between multiple threads."},{"number":270,"categorie":"Multi-threading","question":"What is the purpose of Synchronized block in Java?","reponse":"Synchronized block has many uses in Java multi-threading\nenvironment. Some of the uses are:\n \nIt can prevent thread interference\n \nIt is also used to avoid memory inconsistency issues\n \nIn general, scope of synchronized block is smaller than the scope of\na method."},{"number":271,"categorie":"Multi-threading","question":"What is static synchronization?","reponse":"We can make a static method as synchronized in Java. Adding\nsynchronized keyword to a static method can do this.\n \nIn static synchronization, the lock is on class not on object."},{"number":272,"categorie":"Multi-threading","question":"What is a Deadlock situation?","reponse":"A Deadlock is a situation in which two or more threads are waiting\non each other to release a resource. Each thread is waiting for a\nresource that is held by the other waiting thread.\n \nAt times there is a circular wait when more than two threads are\nwaiting on each other’s resources."},{"number":273,"categorie":"Multi-threading","question":"What is the meaning of concurrency?","reponse":"Concurrency is the ability of a program to execute several programs\nsimultaneously. This is achieved by distributing computations over\nmultiple CPU cores of a machine or even over different machines\nwithin the same network.\n \nIt can increase the speed of execution of the overall program in\nmulti-processor or multi-core system."},{"number":274,"categorie":"Multi-threading","question":"What is the main difference between process and thread?","reponse":"As such both process and thread are independent sequences of\nexecution.\n \nThe main difference is that a thread runs in a shared memory space,\nwhere as a process runs in its own memory space.\n \nA process runs the execution in an environment provided by the\noperating system. A process has its own set of private resources\n(e.g. memory, open files, etc.).\n \nA thread lives within a process and shares the resources like-\nmemory, open files etc. with the other threads of the same process.\n \nThis ability to share resources between different threads makes\nthread more suitable for tasks where performance is a significant\nfactor."},{"number":275,"categorie":"Multi-threading","question":"What is a process and thread in the context of Java?","reponse":"In Java, a process refers to the running of Java Virtual Machine\n(JVM). But a thread lives within a JVM and it can be created or\nstopped by the Java application at runtime."},{"number":276,"categorie":"Multi-threading","question":"What is a Scheduler?","reponse":"A scheduler is a program that is the implementation of a scheduling\nalgorithm to manage access of processes and threads to limited\nresource like CPU or an I/O channel.\n \nThe goal of most scheduling algorithms is to provide load balancing\nfor the available processes/threads and to guarantee that each\nprocess/thread will get a reasonable time frame to access the\nrequested resource exclusively"},{"number":277,"categorie":"Multi-threading","question":"What is the minimum number of Threads in a Java program?","reponse":"In a JVM, each Java program is executed within the main process\nthat starts with java.exe. Therefore each Java application has at\nleast one thread."},{"number":278,"categorie":"Multi-threading","question":"What are the properties of a Java thread?","reponse":"Each Java thread has following properties:\n \n1. Identifier: An identifier of type long that is unique within\nthe JVM\n2. Name: A name of type String\n3. Priority: Priority of type int\n4. State: A state of type java.lang.Thread.State\n5. Group: A thread group the thread belongs to"},{"number":279,"categorie":"Multi-threading","question":"What are the different states of a Thread in Java?","reponse":"Following are the different states of a Thread in Java:\n \n1. New: In the New state the thread has not yet.\n \n2. Runnable: A thread executing in the JVM is in Runnable\nstate.\n \n3. Blocked: A thread waiting for a monitor lock is in\nBlocked state.\n \n4. Waiting: A thread waiting indefinitely for another thread\nto perform a particular action is in Waiting state.\n \n5. Timed_waiting: A thread waiting for another thread to\nperform an action for up to a specified waiting time is in\nTimed_waiting state.\n \n6. Terminated: A thread that has exited is in Terminated\nstate."},{"number":280,"categorie":"Multi-threading","question":"How will you set the priority of a thread in Java?","reponse":"The priority of a thread in Java can be set by using setPriority(int\npriority) method.\n \nWe can use constant Thread.MAX_PRIORITY to set the maximum\npriority of a thread.\n \nWe can use constant Thread.MIN_PRIORITY to set the minimum\npriority of a thread.\n \nOr we can use constant Thread.NORM_PRIORITY to set the default\npriority of a thread."},{"number":281,"categorie":"Multi-threading","question":"What is the purpose of Thread Groups in Java?","reponse":"In Java, every thread belongs to a group of threads.\n \nThe JDK class java.lang.ThreadGroup provides methods to handle\na whole group of Threads.\n \nWith the help of these methods we can interrupt all threads of a\ngroup or set the maximum priority of all threads of a group.\n \nSo a thread group is used for taking collective actions on a group of\nthreads."},{"number":282,"categorie":"Multi-threading","question":"Why we should not stop a thread by calling its stop() method?","reponse":"The stop() method in Thread class is a deprecated method. Its use is\nnot recommended.\n \nWhen we call stop() method, the thread unlocks all monitors that it\nhas acquired. If any locked object was in an inconsistent state, this\nstate gets visible to all other threads.\n \nIt can cause unexpected behavior when other threads work on this\ninconsistent object.\n \nSo calling stop() method to stop a thread is not advisable."},{"number":283,"categorie":"Multi-threading","question":"How will you create a Thread in Java?","reponse":"There are two main ways to create a thread in Java.\n \n1. Extend Thread class: We can extend java.lang.Thread\nclass and implement run() method. On calling start()\nmethod it will start a new thread.\n \n2. Implement Runnable interface: We can implement\njava.lang.Runnable interface and pass the implemented\nobject to the constructor of java.lang.Thread class. On\ncalling start() it will start a new thread."},{"number":284,"categorie":"Multi-threading","question":"How can we stop a thread in the middle of execution in Java?","reponse":"We can use a volatile variable as an indicator to stop the thread.\n \nWe can create a volatile reference pointing to the current thread.\nThis reference can be set to null by other threads to flag that the\ncurrent thread should stop execution.\n \nIn following example threadStopper is the volatile reference that\ncan be set as null in stopThread() method by other threads.\n \nSample code is as follows:\n \npublic static class MyThread extends Thread {\n \n    private volatile Thread threadStopper;\n \n    public void start() {\n        threadStopper = new Thread(this);\n        threadStopper.start();\n    }\n \n    public void stopThread() {\n        threadStopper = null;\n    }\n \n    public void run() {\n        Thread currThread = Thread.currentThread();\n        while(currThread == threadStopper) {\n            try {\n                Thread.sleep(100);\n            } catch (InterruptedException e) {\n            }\n        }    }\n}"},{"number":285,"categorie":"Multi-threading","question":"How do you access the current thread in a Java program?","reponse":"We can access the current thread in Java by calling the static method\ncurrentThread() of java.lang.Thread class.\n \nSample code is as follows:\n \npublic class MyThread {\n \n    public static void main(String[] args) {\n    // Get ID of Current Thread\n        long id = Thread.currentThread().getId();\n \n    // Get Name of Current Thread\n        String name = Thread.currentThread().getName();\n    }\n}"},{"number":286,"categorie":"Multi-threading","question":"What is Busy waiting in Multi- threading?","reponse":"Busy waiting is also known as busy-looping or spinning. It is a\nmulti-threading technique in which a process repeatedly checks if a\ncondition is true.\n \nFor example, a process can keep checking if any keyboard input is\navailable.\n \nIn general, busy waiting is considered as Anti-pattern that wastes\nprocessor time, so it should be avoided.\n \nSample code for busy waiting is as follows:\n \n \nThread thread = new Thread(new Runnable() {\n  @Override\n  public void run() {\n    long timeToStop = System.currentTimeMillis() + 1000;\n    long currentTime = System.currentTimeMillis();\n \n    // Busy waiting    \n    while (timeToStop > currentTime) {\n    currentTime = System.currentTimeMillis();\n    }\n  }\n});"},{"number":287,"categorie":"Multi-threading","question":"How can we prevent busy waiting in Java?","reponse":"There is a simple way to prevent busy-waiting in Java. We can just\nput the current thread to sleep for given amount of time.\n \nIt can be done by calling sleep() method of java.lang.Thread class.\nWe can pass the number of milliseconds to sleep() method  as an\nargument."},{"number":288,"categorie":"Multi-threading","question":"Can we use Thread.sleep() method for real-time processing in Java?","reponse":"Java does not guarantee that Thread.sleep() will cause the thread to\nsleep for exactly N number of milliseconds. Sometime the thread\ncan sleep for than N number of milliseconds.\n \nIn real-time processing we need precise time period for which a\nthread should run or sleep.\n \nTherefore the invocation of Thread.sleep() method is not\nrecommended for use in real-time processing."},{"number":289,"categorie":"Multi-threading","question":"Can we wake up a thread that has been put to sleep by using Thread.sleep() method?","reponse":"We can use interrupt() method of java.lang.Thread class to interrupt\na thread that is in sleep state. It will get  InterruptedException to\nwake up from the sleep.\nSample code is as follows:\n \npublic class ThreadInterrupt implements Runnable {\n  public void run() {\n  try {\n      Thread.sleep(Long.MAX_VALUE);\n    } catch (InterruptedException e) {\n      SOP(“Interrupted by exception!\");\n    }\n  }\n  public static void main(String[] args) throws InterruptedException\n{\n    Thread myThread = new Thread(new ThreadInterrupt(),\n“myThread\");\n    myThread.start();\n    SOP(“Sleeping in main thread for 10 seconds”);\n \n    Thread.sleep(10000);\n    SOP(“Interrupting myThread\");\n \n    myThread.interrupt();\n  }\n}"},{"number":290,"categorie":"Multi-threading","question":"What are the two ways to check if a Thread has been interrupted?","reponse":"These are the two ways to check for thread interruption:\n \n1. In Java, a Thread can call Thread.interrupted() method to\ncheck if it has been interrupted or not.\n \n2. The other option is to call isInterrupted() method of\nThread class to check if it has been interrupted or not."},{"number":291,"categorie":"Multi-threading","question":"How can we make sure that Parent thread waits for termination of Child thread?","reponse":"We can use join() method for this purpose. On calling join() method,\ncurrent thread waits for the child thread to which it joins to finish.\n \nSample code is as follows:\n \nThread myThread = new Thread(new Runnable() {\n  public void run() {\n    }\n});\n \nmyThread.start();\n// Join on myThread\nmyThread.join();"},{"number":292,"categorie":"Multi-threading","question":"How will you handle InterruptedException in Java?","reponse":"In Java we can get InterruptedException from sleep() or join()\nmethods. Throwing InterruptedException is way to inform that\nanother thread has interrupted this thread.\n \nIn general, the purpose of Interrupt is to ask current thread to stop its\ncurrent execution and finish unexpectedly.\n \nTherefore ignoring this exception by catching it and only logging it\nto the console or some log file is not the recommended approach.\n \nThe run() method of the Runnable interface does not allow that\nthrowing any exceptions. So we cannot re-throw\nInterruptedException.\n \nTherefore the correct way to handle this exception is that run()\nmethod should check and handle this exception by itself and take\nappropriate action."},{"number":293,"categorie":"Multi-threading","question":"Which intrinsic lock is acquired by a synchronized method in Java?","reponse":"When we mark a method as synchronized and then call this method,\nthen this method will first acquire the intrinsic lock of the object in\nwhich that method is mentioned.\n \nOnce the synchronized method returns, it releases the lock.\n \nIn case the synchronized method throws an exception, the intrinsic\nlock will be released.\n \n \nSample code equivalent to a synchronized method is:\n \npublic void myMethod() {\n  synchronized(this) {\n  }"},{"number":294,"categorie":"Multi-threading","question":"Can we mark a constructor as synchronized in Java?","reponse":"No. We cannot mark a constructor as synchronized.\n \nThis will lead to compiler error.\n \nThe reasoning behind this is that, in this case, only the constructing\nthread would have access to the object being constructed."},{"number":295,"categorie":"Multi-threading","question":"Can we use primitive values for intrinsic locks?","reponse":"No. Java does not allow primitive values to be used for intrinsic\nlocks."},{"number":296,"categorie":"Multi-threading","question":"Do we have re-entrant property in intrinsic locks?","reponse":"Yes. An intrinsic lock can be accessed by the same thread multiple\ntimes. So an Intrinsic lock is re-entrant.\n \nIf it is not allowed then the code that acquires a lock would have to\navoid acquiring the lock that it has already acquired."},{"number":297,"categorie":"Multi-threading","question":"What is an atomic operation?","reponse":"An atomic operation is an operation that completes in a single step\nrelative to other threads.\n \nAn Atomic operation is either executed completely or not at all.\n \nThere is no halfway mark in Atomic operation."},{"number":298,"categorie":"Multi-threading","question":"Can we consider the statement i++ as an atomic operation in Java?","reponse":"No. The statement i++ is not an Atomic operation. It has more than\none operation.\n \nFirst JVM loads the current value of i in memory. Then it \nincrements it. Finally it stores the new value back into variable i.\n \nThe current thread that executes this operation may be interrupted\nbetween any of the above-mentioned three steps. Therefore it is not\nan atomic operation."},{"number":299,"categorie":"Multi-threading","question":"What are the Atomic operations in Java?","reponse":"Java language provides some basic Atomic operations. These\noperations can be used to make sure that concurrent threads always\nsee the same value.\n \nSome of these Atomic operations are:\n \n1. Read operations on reference variables and primitive\nvariables (except long and double)\n \n2. Write operations on reference variables and primitive\nvariables (except long and double)\n \n3. Read operations on all variables declared as volatile\n \n4. Write operations on all variables declared as volatile"},{"number":300,"categorie":"Multi-threading","question":"Can you check if following code is thread-safe?","reponse":"public class SingletonDoubleCheck {\nprivate SingletonDoubleCheck instance = null;\n \npublic SingletonDoubleCheck getInstance() {\nif (instance == null) {\nsynchronized (SingletonDoubleCheck.class) {\nif (instance == null) {\ninstance = new SingletonDoubleCheck();\n}\n}\n}\nreturn instance;\n}\n}\n \nThe above-mentioned code is for creating a Singleton class. But this\ncode is not thread-safe.\n \nIn this we check the value of instance second time in the\nsynchronized block. But the JIT compiler can rearrange the\nBytecode in such a way that the reference to SingletonDoubleCheck \ninstance will be set before the execution of constructor.\n \nDue to this the method getInstance() will return an object that may\nnot have been initialized properly.\n \nWe can use the keyword volatile for instance to make this thread-\nsafe code.\n \nAny variables that is marked as volatile will be visible to other\nthreads only after the completion of the constructor of the object."},{"number":301,"categorie":"Multi-threading","question":"What are the minimum requirements for a Deadlock situation in a program?","reponse":"For a deadlock to occur following are the minimum requirements:\n \n1. Mutual exclusion: There has to be a resource that can be\naccessed by only one thread at any point of time.\n \n2. Resource holding: One thread locks one resource and\nholds it, and at the same time it tries to acquire lock on\nanother mutually exclusive resource.\n \n3. No preemption: There is no pre-emption mechanism by\nwhich resource held by a thread can be freed after a\nspecific period of time.\n \n4. Circular wait: There can be a scenario in which two or\nmore threads lock one resource each and they wait for\neach other’s resource to get free. This causes circular wait\namong threads for same set of resources."},{"number":302,"categorie":"Multi-threading","question":"How can we prevent a Deadlock?","reponse":"To prevent a Deadlock from occurring at least one requirement for a\ndeadlock has to be removed:\n \n1. Mutual exclusion: We can use optimistic locking to\nprevent mutual exclusion among resources.\n \n2. Resource holding: A thread has to release all its exclusive\nlocks if it does not succeed in acquiring all exclusive locks\nfor resources required.\n \n3. No preemption: We can use timeout period for an\nexclusive lock to get free after a given amount of time.\n \n4. Circular wait: We can check and ensure that circular wait\ndoes not occur, when all exclusive locks have been\nacquired by all the threads in the same sequence."},{"number":303,"categorie":"Multi-threading","question":"How can we detect a Deadlock situation?","reponse":"We can use ThreadMXBean.findDeadlockedThreads() method to\ndetect deadlocks in Java program. This bean comes with JDK:\n \n \nSample code is as follows:\n \nThreadMXBean bean = ManagementFactory.getThreadMXBean();\nlong[] threadIds = bean.findDeadlockedThreads(); // It will return\nnull for no deadlock\nif (threadIds != null) {\n    ThreadInfo[] infos = bean.getThreadInfo(threadIds);\n \n    for (ThreadInfo info : infos) {\n        StackTraceElement[] stack = info.getStackTrace();\n        // Log or store stack trace information.\n    }"},{"number":304,"categorie":"Multi-threading","question":"What is a Livelock?","reponse":"Livelock is a scenario in which two or more block each other by\nresponding to an action caused by another thread.\n \nIn a deadlock situation two or more threads wait in one specific\nstate.\n \nIn a Livelock scenario, two more threads change their state in such a\nway that it prevents progress on their regular work.\n \nE.g. Consider scenario in which two threads try to acquire two\nlocks. They release a lock that they have acquired, when they cannot\nacquire the second lock.\n \nIn a Livelock situation, both threads concurrently try to acquire the\nlocks. Only one thread would succeed, the second thread may\nsucceed in acquiring the second lock.\n \nNow both threads hold two different locks. And both threads want\nto have both locks. So they release their lock and try again from the\nbeginning. This situation keeps repeating multiple times.."},{"number":305,"categorie":"Multi-threading","question":"What is Thread starvation?","reponse":"In a priority based scheduling, Threads with lower priority get\nlesser time for execution than higher priority threads.\n \nIf a lower priority thread performs a long running computation, it\nmay happen that this thread does not get enough time to finish its\ncomputations just in time. In such a scenario, the tread with lower\npriority would starve. It will remain away from the threads with\nhigher priority."},{"number":306,"categorie":"Multi-threading","question":"How can a synchronized block cause Thread starvation in Java?","reponse":"It is not defined for synchronization that which thread will enter a\nsynchronized block. It may happen that if many threads are waiting\nfor the entry to a synchronized block, some threads may have to wait\nlonger than other threads.\n \nHence these threads with lower priority will not get enough time to\nfinish their work in time."},{"number":307,"categorie":"Multi-threading","question":"What is a Race condition?","reponse":"A race condition is an unwanted situation in which a program\nattempts to perform two or more operations at the same time, but\nbecause of the logic of the program, the operations have to be\nperformed in proper sequence to run the program correctly.\n \nSince it is an undesirable behavior, it is considered as a bug in\ncode.\n \nMost of the time race condition occurs in “check then act” scenario.\nBoth threads check and act on same value. But one of the threads\nacts in between check and act. See this example to understand race\ncondition.\n \n \nif (x == 3) // Check\n{\n   y = x * 5; // Act\n \n   // If another thread changes x\n   // between \"if (x == 3)” and \"y = x * 5”,\n   // then y will not be equal to 15.\n}"},{"number":308,"categorie":"Multi-threading","question":"What is a Fair lock in multi- threading?","reponse":"In Java there is a class ReentrantLock that is used for implementing\nFair lock. This class accepts an optional parameter fairness. When\nfairness is set to true, the RenentrantLock will give access to the\nlongest waiting thread.\n \nThe most popular use of Fair lock is in avoiding thread starvation.\nSince longest waiting threads are always given priority in case of\ncontention, no thread can starve.\n \nDownside of Fair lock is the low throughput of the program. Since\nlow priority or slow threads are getting locks multiple time, it leads\nto slower execution of a program.\n \nThe only exception to a Fair lock is tryLock() method of\nReentrantLock. This method does not honor the value of fairness\nparameter."},{"number":309,"categorie":"Multi-threading","question":"Which two methods of Object class can be used to implement a Producer Consumer scenario?","reponse":"In a Producer Consumer scenario, one thread is a Producer and\nanother thread is a Consumer.\n \nFor this scenario to start working, a Consumer has to know when\nthe Producer has produced. In Object class, there is a wait()\nmethod. A Consumer calls wait method to wait on Producer. The\nProducer used notify() method of Object class to inform Consumer\nthat it has produced.\n \nIn this way the processor time between produce and consume\noperations is freed due to the use of wait() and notify() methods."},{"number":310,"categorie":"Multi-threading","question":"How JVM determines which thread should wake up on notify()?","reponse":"If multiple threads are waiting on an object’s monitor, JVM\nawakens one of them. As per Java specification the choice of this\nthread is arbitrary and it is at the discretion of the implementation.\nSo there is no guarantee of rule that a specific thread will be\nawakened by JVM on notify() method call."},{"number":311,"categorie":"Multi-threading","question":"Check if following code is thread- safe for retrieving an integer value from a Queue?","reponse":"public class QueueCheck {\nQueue queue;\n \npublic Integer getNextInt() {\nInteger retVal = null;\nsynchronized (queue) {\ntry {\nwhile (queue.isEmpty()) {\nqueue.wait();\n}\n} catch (InterruptedException e) {\ne.printStackTrace();\n}\n}\nsynchronized (queue) {\nretVal = queue.poll();\nif (retVal == null) {\nSystem.err.println(\"retVal is null\");\nthrow new IllegalStateException();                                          }\n}\nreturn retVal;\n}\n}\n \nIn the above code Queue is used as object monitor to handle\nconcurrency issues. But it may not behave correctly in a multi-\nthreading scenario.\n \nThere are two separate synchronized blocks in above code. In case\ntwo threads are woken up simultaneously by another thread, boththreads will enter one after in the second synchronized block.\n \nOnly one of the two threads will get new value from the queue and\nmake it empty. The second thread will poll on an empty queue and it\nwill not get any non-null return value."},{"number":312,"categorie":"Multi-threading","question":"How can we check if a thread has a monitor lock on a given object?","reponse":"In Java, Thread class has a static method holdsLock(Object\nobjToCheck) to check whether thread has a lock on objToLock\nobject. \n \nThis method will return true if current thread holds the lock on the\nobjToLock object that was passed as an argument to this method."},{"number":313,"categorie":"Multi-threading","question":"What is the use of yield() method in Thread class?","reponse":"The yield() method of Thread class is used to give a hint to\nscheduler that the current thread wants to free the processor.\n \nThe scheduler can either use this hint or just ignore this hint. Since\nthe scheduler behavior is not guaranteed, it may happen that the\ncurrent thread again gets the processor time.\n \nIt can be used for debugging or testing purposes. But there is rarely\nany concrete use of this method."},{"number":314,"categorie":"Multi-threading","question":"What is an important point to consider while passing an object from one thread to another thread?","reponse":"This is a multi-threading scenario. In a multi-threading scenario, the\nmost important point is to check whether two threads can update\nsame object at the same time.\n \nIf it is possible for two threads to update the same object at the\nsame time, it can cause issues like race condition.\n \nSo it is recommended to make the object Immutable. This will help\nin avoiding any concurrency issues on this object."},{"number":315,"categorie":"Multi-threading","question":"What are the rules for creating Immutable Objects?","reponse":"As per Java specification, following are the rules for creating an\nImmutable object:\n \nDo not provide \"setter\" methods that modify fields or objects\nreferred to by fields.\n \nMake all fields final and private.\n \nDo not allow subclasses to override methods. The simplest way to\ndo this is to declare the class as final. A more sophisticated\napproach is to make the constructor private and construct instances\nin factory methods.\n \nIf the instance fields include references to mutable objects, do not\nallow those objects to be changed.\n \nDo not provide methods that modify the mutable objects.\n \nDo not share references to the mutable objects. Never store\nreferences to external, mutable objects passed to the constructor; if\nnecessary, create copies, and store references to the copies.\nSimilarly, create copies of your internal mutable objects when\nnecessary to avoid returning the originals in your methods."},{"number":316,"categorie":"Multi-threading","question":"What is the use of ThreadLocal class?","reponse":"ThreadLocal class provides thread-local variables. Each thread\naccesses only its own local variables. It has its own copy of the\nvariable.\n \nBy using ThreadLocal, if thread X stores a variable with value x\nand another thread Y stores same variable with the value y, then X\ngets x from its ThreadLocal instance and Y gets y from its\nThreadLocal instance.\n \nTypically, ThreadLocal instances are private static fields that are\nassociated with the state of a thread."},{"number":317,"categorie":"Multi-threading","question":"What are the scenarios suitable for using ThreadLocal class?","reponse":"We can use instance of ThreadLocal class to transport information\nwithin an application.\n \nOne use case is to transport security or login information within an\ninstance of ThreadLocal so that every method can access it.\n \nAnother use case is to transport transaction information across an\napplication, without using the method-to-method communication."},{"number":318,"categorie":"Multi-threading","question":"How will you improve the performance of an application by multi-threading?","reponse":"In an environment with more than one CPU, we can parallelize the\ncomputation tasks on multiple CPUs. This leads to parallel\nprocessing of a bigger task that takes lesser time due to multiple\nthreads dividing the work among themselves.\n \nOne example is that if we have to process 1000 data files and\ncalculate the sum of numbers in each file. If each file takes 5\nminutes, then 1000 files will take 5000 minutes for processing.\n \nBut by using multi-threading we can process these files in 10\nparallel threads. So each thread will take 100 files each. Since now\nwork is happening in 10 parallel threads, the time taken will be\naround 500 minutes."},{"number":319,"categorie":"Multi-threading","question":"What is scalability in a Software program?","reponse":"Scalability is the capability of a program to handle growing amount\nof work or its potential to be enlarged in order to accommodate\ngrowth.\n \nA program is considered scalable, if it is suitable to handle a large\namount of input data or a large number of users or a large number of\nnodes.\n \nWhen we say a program does not scale, it means that program fails\non increasing the size of task."},{"number":320,"categorie":"Multi-threading","question":"How will you calculate the maximum speed up of an application by using multiple processors?","reponse":"Amdahl’s law gives the theoretical speedup in latency of the\nexecution of a task at fixed workload.\n \nIt gives the formula to compute the theoretical maximum speed up\nthat can be achieved by providing multiple processors to an\napplication.\n \nIf S is the theoretical speedup then the formula is:\nS(n) = 1 / (B + (1-B)/n)\n \nwhere n is the number of processors\nB is the fraction of the program that cannot be executed in parallel.\n \nWhen n converges against infinity, the term (1-B)/n converges\nagainst zero. Therefore, the formula can be reduced in this special\ncase to 1/B.\n \nIn general, the theoretical maximum speedup behaves in inverse\nproportion to the fraction that has to be executed serially. This\nmeans the lower this fraction is, the more theoretical speedup can\nbe achieved."},{"number":321,"categorie":"Multi-threading","question":"What is Lock contention in multi- threading?","reponse":"Lock contention is the situation when one thread is waiting for a\nlock/object that being held by another thread. The waiting thread\ncannot use this object until the other thread releases the lock on that\nobject.\n \nIt is also known as Thread contention.\n \nIdeally locks reduce the thread contention. Without locks, multiple\nthreads can operate on same object and cause undesirable behavior.\nIf locking is implemented correctly it reduces the occurrence of\ncontention between multiple threads."},{"number":322,"categorie":"Multi-threading","question":"What are the techniques to reduce Lock contention?","reponse":"There are following main techniques to reduce Lock contention:\n \n1. Reduce the scope of lock.\n2. Reduce object pooling.\n3. Reduce the number of times a certain lock can be acquired.\n4. Avoid synchronization at unnecessary places.\n5. Implement hardware supported Optimistic locking in place\nof synchronization."},{"number":323,"categorie":"Multi-threading","question":"What technique can be used in following code to reduce Lock contention?","reponse":"synchronized (map) {\nRandom r = new Random();\nInteger value = Integer.valueOf(42);\nString key = r.nextString(5);\nmap.put(key, value);\n}\n \nThe code uses Random() to get a random string and it also used\nInteger to convert 42 in an object. Since these lines of code are\nspecific to this thread, these can be moved out of Synchronization\nblock.\n \nRandom r = new Random();\nInteger value = Integer.valueOf(42);\nString key = r.nextString(5);\n \nsynchronized (map) {\nmap.put(key, value);\n}"},{"number":324,"categorie":"Multi-threading","question":"What is Lock splitting technique?","reponse":"Lock splitting is a technique to reduce Lock contention in multi-\nthreading. It is applicable in scenario when one lock is used to\nsynchronize access to different aspects of the same application.\n \nSometimes we put one lock to protect the whole array. There can be\nmultiple threads trying to get the lock for same array. This single\nlock on array can cause Lock contention among threads. To resolve\nthis we can give one lock to each element of the array. Or we can\nuse modulus function to assign different locks to a small group of\narray elements. In this way we can reduced the chance of Lock\ncontention. This is Lock splitting technique."},{"number":325,"categorie":"Multi-threading","question":"Which technique is used in ReadWriteLock class for reducing Lock contention?","reponse":"ReadWriteLock uses two locks. One lock for read-only operations,\nanother lock for write operations.\n \nIts implementation is based on the premise that concurrent threads\ndo not need a lock when they want to read a value while no other\nthread is trying to write.\n \nIn this implementation, read-only lock can be obtained by multiple\nthreads. And the implementation guarantees that all read operation\nwill see only the latest updated value as soon as the write lock is\nreleased."},{"number":326,"categorie":"Multi-threading","question":"What is Lock striping?","reponse":"In Lock splitting we use different locks for different parts of the\napplication. In Lock striping we use multiple locks to protect\ndifferent parts of the same data structure.\n \nConcurrentHashMap class of Java internally uses different buckets\nto store its values. Each bucket is chosen based on the value of key.\nConcurrentHashMap uses different locks to guard different buckets.\nWhen one thread that tries to access a hash bucket, it can acquire the\nlock for that bucket. While another thread can simultaneously\nacquire lock for another bucket and access it. In a synchronized\nversion of HashMap, the whole map is has one lock.\n \nLock striping technique gives better performance than Synchronizing\nthe whole data structure."},{"number":327,"categorie":"Multi-threading","question":"What is a CAS operation?","reponse":"CAS is also known a Compare-And-Swap operation.\n \nIn a CAS operation, the processor provides a separate instruction\nthat can update the value of a register only if the provided value is\nequal to the current value.\n \nCAS operation can be used as an alternate to synchronization.\n \nLet say thread T1 can update a value by passing its current value\nand the new value to be updated to the CAS operation. In case\nanother thread T2 has updated the current value of previous thread,\nthe previous thread T1’s current value is not equal to the current\nvalue of T2. Hence the update operation fails.\n \nIn this case, thread T1 will read the current value again and try to\nupdate it.\n \nThis is an example of optimistic locking."},{"number":328,"categorie":"Multi-threading","question":"Which Java classes use CAS operation?","reponse":"Java classes like AtomicInteger or AtomicBoolean internally use\nCAS operations to support multi-threading.\n \nThese classes are in package java.util.concurrent.atomic."},{"number":329,"categorie":"Multi-threading","question":"Is it always possible to improve performance by object pooling in a multi-threading application?","reponse":"By using Object pools in an application we limit the number of new\nobjects to be created for a class. In a single thread operation, it can\nimprove the performance by reusing an already created object from\na pool.\n \nIn a multi-threading application an object pool has to provide\nsynchronized access to multiple threads. Due to this only one thread\ncan access the pool at a time. Also there is additional cost due to\nLock contention on pool. These additional costs can outweigh the\ncost saved by reuse of an object from the pool.\n \nTherefore using an Object pool may not always improve the\nperformance in a multi-threading application."},{"number":330,"categorie":"Multi-threading","question":"How can techniques used for performance improvement in a single thread application may degrade the performance in a multi-threading application?","reponse":"In a single thread applications we can use Object pool for\nperformance optimization. Where as in multi-threading environment,\nit may not be a good idea to use an Object pool. Increased overhead\nof synchronization and lock contention can degrade the performance\ngained by using Object pool in a multi-threading application.\n \nAnother example is the implementation in which a List keeps a\nseparate variable to hold the number of elements. This technique is\nuseful in single thread application where size() method can return\nthe value from this variable, without the need to count all the\nelements of list.\n \nBut in a multi-threading application, this separate variable can\nrather degrade the performance. This variable has to be access\ncontrolled by a lock since multiple concurrent threads can insert an\nelement in a list. The additional cost of lock on this variable can\noutweigh the benefit gained by it in a multi-threading application."},{"number":331,"categorie":"Multi-threading","question":"What is the relation between Executor and ExecutorService interface?","reponse":"Executor interface  has only execute(Runnable) method. The\nimplementing class of this interface has to execute the given\nRunnable instance passed to execute() method at some time in the\nfuture.\n \nExecutorService interface extends Executor interface. It provides\nadditional methods like- invokeAny(), invokeAll(), shutdown(),\nawaitTermination(). These method provide the ability to shutdown\nthe thread so that further requests can be rejected. Also it provides\nability to invoke a collection of Callable tasks."},{"number":332,"categorie":"Multi-threading","question":"What will happen on calling submit() method of an ExecutorService instance whose queue is already full?","reponse":"The implementation of ExecutorService will throw\nRejectedExecutionException, when its queue is already full and a\nnew task is submitted by calling submit() method."},{"number":333,"categorie":"Multi-threading","question":"What is a ScheduledExecutorService?","reponse":"ScheduledExecutorService interface extends the interface\nExecutorService. It provides various schedule() methods that can be\nused to submit new tasks to be executed at a given point of time.\n \nOne of the schedule() method provides the ability to schedule a one-\nshot task that can be executed after given delay.\n \nAnother version of schedule() method provides the ability to\nexecute ScheduleFuture after a given amount of delay.\n \nIn addition there are scheduleAtFixedRate() and\nscheduleWithFixedDelay() methods that can execute an action at a\nperiodic interval of time."},{"number":334,"categorie":"Multi-threading","question":"How will you create a Thread pool in Java?","reponse":"In Java, Executors framework provides a method\nnewFixedThreadPool(int nThreads) that can be used to create a\nThread pool with a fixed number of threads.\n \nSample code is as follows:\n \npublic static void main(String[] args) throws InterruptedException,\nExecutionException\n{\nExecutorService myService = Executors.newFixedThreadPool(5);\nFuture<Integer>[] futureList = new Future[5];\nfor (int i = 0; i < futureList.length; i++) {\nfutureList[i] = myService.submit(new MyCallable());\n}\nfor (int i = 0; i < futureList.length; i++) {\nInteger retVal = futureList[i].get();\nprintln(retVal);\n}\nmyService.shutdown();\n}"},{"number":335,"categorie":"Multi-threading","question":"What is the main difference between Runnable and Callable interface?","reponse":"Runnable interface defines run() method that does not return any\nvalue.\n \nCallable interface allows call() method to return a value to its\ncaller. A Callable interface can also throw an exception in case of\nan error. Also Callable is a newer addition to Java since version\n1.5."},{"number":336,"categorie":"Multi-threading","question":"What are the uses of Future interface in Java?","reponse":"We can use Future interface to represent the result of an\nasynchronous computation.\n \nThese are the operations whose result is not immediately available.\n \nTherefore Future interface provides isDone() method to check if the\nasynchronous computation has finished or not.\n \nWe can also check if the task was cancelled by calling\nisCancelled() method.\n \nFuture also provides cancel() method to attempt the cancellation of\na task."},{"number":337,"categorie":"Multi-threading","question":"What is the difference in concurrency in HashMap and in Hashtable?","reponse":"In a Hashtable class all methods are synchronized.\n \nIn a HashMap implementation all the methods are not synchronized.\n \nTherefore Hashtable is a thread-safe collection. HashMap is not a\nthread-safe collection.\n \nIn a multi-threading it is not advisable to use regular HashMap. We\ncan use ConcurrentHashMap class in multi-threading applications."},{"number":338,"categorie":"Multi-threading","question":"How will you create synchronized instance of List or Map Collection?","reponse":"In Java, Collections class provides methods to synchronize any\ncollection.\n \nIt also provides synchronizedList(List) and synchronizedMap(Map)\nmethods that can be used to convert a List or Map to a synchronized\ninstance."},{"number":339,"categorie":"Multi-threading","question":"What is a Semaphore in Java?","reponse":"Semaphore class in Java is used to implement a counting\nsemaphore. It is used to restrict the number of threads that can\naccess a physical or logical resource.\n \nA Semaphore maintains a set of permits that should be acquired by\ncompeting threads.\n \nWe can also use it to control how many threads can access the\ncritical section of a program or a resource concurrently.\n \nThe first argument in Semaphore constructor is the total number of\npermits available. Each invocation of acquire() method tries to\nobtain one of the available permits.\n \nThe acquire() method is used to acquire a permit from the\nsemaphore. If we pass number of permits required to acquire()\nmethod, then it blocks the thread until that number of permits are\navailable.\n \nOnce a thread has finished its work, we can use release() method to\nrelease the permits."},{"number":340,"categorie":"Multi-threading","question":"What is a CountDownLatch in Java?","reponse":"CountDownLatch class helps in implementing synchronization in\nJava. It is used to implement the scenarios in which one or more\nthreads have to wait until other threads have reached the same state\nsuch that all thread can start.\n \nThere is a synchronized counter that is decremented until it reaches\nthe value zero. Once it reaches zero, it means that all waiting\nthreads can proceed now.\n \nIt is a versatile tool that can be used for other Synchronization\nscenarios as well. It can also work as on/off latch or gate. All\nthreads invoking await() method wait at the gate until it is opened\nby a thread invoking countdown() method."},{"number":341,"categorie":"Multi-threading","question":"What is the difference between CountDownLatch and CyclicBarrier?","reponse":"CyclicBarrier takes an optional Runnable task that is run once the\ncommon barrier condition is achieved.\n \nCountDownLatch is used in simple use cases where a simple start\nstop is required. A CyclicBarrier is useful in complex scenarios\nwhere more coordination is required. E.g. MapReduce algorithm\nimplementation.\n \nCyclicBarrier resets the internal value to the initial value once the\nvalue reaches zero. CyclicBarrier can be used to implement the\nscenarios in which threads have to wait for each other multiple\ntimes."},{"number":342,"categorie":"Multi-threading","question":"What are the scenarios suitable for using Fork/Join framework?","reponse":"ForkJoinPool class is in the center of Fork/Join framework. It is a\nthread pool that can execute instances of ForkJoinTask.\n \nForkJoinTask class provides the fork() and join() methods. The\nfork() method is used to start the asynchronous execution of a task.\nThe join() method is used to await the result of the computation.\n \nTherefore, divide-and-conquer algorithms can be easily\nimplemented with Fork/Join framework."},{"number":343,"categorie":"Multi-threading","question":"What is the difference between RecursiveTask and RecursiveAction class?","reponse":"RecursiveAction class has compute() method that does not have to\nreturn a value.\n \nRecursiveAction can be used when the action has to directly\noperate on a Data structure. It does not need to return any computed\nvalue.\n \nIn RecursiveTask class has compute() method that always returns a\nvalue.\n \nBoth RecursiveTask and RecursiveAction classes are used in\nForkJoinTask implementations."},{"number":344,"categorie":"Multi-threading","question":"In Java 8, can we process stream operations with a Thread pool?","reponse":"In Java 8, Collections provide parallelStream() method to create a\nstream that can be processed by a Thread pool.\n \nWe can also call the intermediate method parallel() on a given\nstream to convert it into a sequential stream of parallel tasks."},{"number":345,"categorie":"Multi-threading","question":"What are the scenarios to use parallel stream  in Java 8?","reponse":"A parallel stream in Java 8 has a much higher overhead compared\nto a sequential one.\n \nIt takes a significant amount of time to coordinate the threads.\n \nWe can use parallel stream in following scenarios:\n \nWhen there are a large number of items to process and the\nprocessing of each item takes time and is parallelizable.\nWhen there is a performance problem in the sequential processing.\nWhen current implementation is not already running in a multi-\nthread environment. If there is already a multi-threading\nenvironment, adding parallel stream can degrade the performance."},{"number":346,"categorie":"Multi-threading","question":"How Stack and Heap work in Java multi-threading environment?","reponse":"In Java, Stack and heap are memory areas available to an\napplication. Every thread has its own stack. It is used to store local\nvariables, method parameters and call stack.\n \nLocal variables stored in Stack of one Thread are not visible to\nanother Thread.\n \nWhere as, Heap is a common memory area in JVM. Heap is shared\nby all threads. All objects are created inside heap.\n \nTo improve performance thread can cache the values from heap into\ntheir stack. This can create problem if the same variable is modified\nby more than one thread.\n \nIn such a scenario we should used volatile keyword to mark a\nvariable volatile. For a volatile variable the thread always reads\nthe value from main memory."},{"number":347,"categorie":"Multi-threading","question":"How can we take Thread dump in Java?","reponse":"The steps to take Thread dump of Java process depends on the\noperating system.\n \nOn taking Thread dump, Java writes the state of all threads in log\nfiles or standard error console.\n \nWe can press Ctrl + Break key together to take thread dump in\nWindows.\nWe can execute kill -3 command for taking Thread dump on Linux.\nAnother option to take Thread dump is jstack tool. We can pass\nprocess id of java process to this tool for taking Thread dump.\n \n \nThis is the simple one, -Xss parameter is used to control stack size\nof Thread in Java. You can see this list of JVM options to learn\nmore about this parameter."},{"number":348,"categorie":"Multi-threading","question":"Which parameter can be used to control stack size of a thread in Java?","reponse":"We use –Xss parameter to control the stack size of a thread in Java.\n \nIf we set it as 1 MB, then every thread will get 1MB of stack size."},{"number":349,"categorie":"Multi-threading","question":"There are two threads T1 and T2?","reponse":"How will you ensure that these\nthreads run in sequence T1, T2 in\nJava?\n \nIn Java there are multiple ways to execute threads in a sequence.\n \nOne of the simplest way for sequencing is join() method of Thread\nclass.\n \nWe can call join() method to start a thread when another thread has\nfinished.\n \nWe start with the last thread to execute first. And make this thread\njoin on the next thread.\n \nIn this case we start thread T2 first. And then call T1.join() so that\nthread T2 waits for thread T1 to finish execution.\n \nOnce T1 completes execution, T2 thread starts executing.\n Java 8"},{"number":350,"categorie":"Java 8","question":"What are the new features released in Java 8?","reponse":"The new features released in Java 8 are:\n \n1. Lambda Expression\n2. Stream API\n3. Date and Time API\n4. Functional Interface\n5. Interface Default and Static Methods\n6. Optional\n7. Base64 Encoding and Decoding\n8. Nashorn JavaScript Engine\n9. Collections API Enhancements\n10. Concurrency Enhancements\n11. Fork/Join Framework Enhancements\n12. Spliterator\n13. Internal Iteration\n14. Type Annotations and Repeatable Annotations\n15. Method Parameter Reflection\n16. JVM Parameter Changes"},{"number":351,"categorie":"Java 8","question":"What are the main benefits of new features introduced in Java 8?","reponse":"The main benefits of Java 8 features are:\n \n1. Support for functional programming by Lambda and\nStreams\n2. Ease of high volume data processing by Streams\n3. Ease of use by getting Parameter names through Reflection\n4. Reusable code with enhanced Collection APIs\n5. Smart exception handling with Optional\n6. Control on JVM with new Parameters\n7. Enhanced encryption support with Base 64\n8. Faster execution with Nashorn JavaScript engine support"},{"number":352,"categorie":"Java 8","question":"What is a Lambda expression in Java 8?","reponse":"Lambda expression is an anonymous function. It is like a method\nthat does not need any access modifiers, name or return value\ndeclaration. It accepts a set of input parameters and returns result.\n \nLambda expression can be passed as a parameter in a method. So\nwe can treat code in Lambda expression as data. This piece of code\ncan be passed to other objects and methods."},{"number":353,"categorie":"Java 8","question":"What are the three main parts of a Lambda expression in Java?","reponse":"Three main parts of a Lambda expression are:\n \n1. Parameter list: A Lambda expression can have zero or\nmore parameters. Parameter list is optional to Lambda.\n \n \n2. Lambda arrow operator: “->” is known as Lambda arrow\noperator. It separates the list of parameters and the body of\nLambda.\n \n3. Lambda expression body: The piece of code that we want\nto execute is written in Lambda expression body.\n \nE.g. In following example:\n \nArrays.asList( \"a\", \"b\", \"d\" ).forEach( e -> System.out.println( e ) );\n \nParameter list = e\nArrow =  ->\nBody = System.out.println( e )"},{"number":354,"categorie":"Java 8","question":"What is the data type of a Lambda expression?","reponse":"A Lambda expression fulfills the purpose of passing code as data.\n \nThe data type of a Lambda expression is a Functional interface.\n \nIn most of the cases this is java.lang.Runnable interface."},{"number":355,"categorie":"Java 8","question":"What is the meaning of following lambda expression?","reponse":"( e -> System.out.println( e ) );\n \n \nThis Lambda expression takes a parameter e and prints it via\nSystem.out."},{"number":356,"categorie":"Java 8","question":"Why did Oracle release a new version of Java like Java 8?","reponse":"The main theme of Java 8 is support for functional programming.\nWith increase in Database size and growth of multi-code CPU\nservers, there is need for Java to support such large-scale systems.\n \nWith new features of Java 8, it is possible to create functional\nprograms to interact efficiently with Big Data systems. Support for\nStreams is very helpful in this regard.\n \n \nLambda expressions are very useful for cloud computing where we\ncan pass code as data and run the same code on multiple servers.\n \nOptional is a best practice that is borrowed from Google Guava\nlibrary for handling the exceptional cases. This has made programs\nmore robust with support for edge cases."},{"number":357,"categorie":"Java 8","question":"What are the advantages of a lambda expression?","reponse":"We can pass a lambda expression as an object to a method. This\nreduces the overhead involved in passing an anonymous class.\n \nWe can also pass a method as a parameter to another method using\nlambda expressions"},{"number":358,"categorie":"Java 8","question":"What is a Functional interface in Java 8?","reponse":"A Functional interface in Java is an interface that has exactly one\nabstract method.\n \nIt can have default methods with implementation. A default method\nis not abstract.\n \nIn Java 8, java.lang.Runnable and java.util.concurrent.Callable are\ntwo very popular Functional interfaces."},{"number":359,"categorie":"Java 8","question":"What is a Single Abstract Method (SAM) interface in Java 8?","reponse":"A Functional interface is also known as Single Abstract Method\nInterface, since it has exactly one abstract method."},{"number":360,"categorie":"Java 8","question":"How can we define a Functional interface in Java 8?","reponse":"To define a Functional interface in Java 8, we can create an\nInterface with exactly one abstract method.\n \nAnother way is to mark an Interface with annotation\n@FunctionalInterface. Even with the annotation we have to follow\nthe rule of exactly one abstract method.\n \nThe only exception to this rule is that if we override\njava.lang.Object class’s method as an abstract method, then it does\nnot count as an abstract method."},{"number":361,"categorie":"Java 8","question":"Why do we need Functional interface in Java?","reponse":"Functional Interfaces are mainly used in Lambda expressions,\nMethod reference and constructor references.\n \nIn functional programming, code can be treated as data. For this\npurpose Lambda expressions are introduced. They can be used to\npass a block of code to another method or object.\n \nFunctional Interface serves as a data type for Lambda expressions.\nSince a Functional interface contains only one abstract method, the\nimplementation of that method becomes the code that gets passed as\nan argument to another method"},{"number":362,"categorie":"Java 8","question":"Is it mandatory to use @FunctionalInterface annotation to define a Functional interface in Java 8?","reponse":"No, it is not mandatory to mark a Functional interface with\n@FunctionalInterface annotation.\n \nJava does not impose this rule.\n \nBut, if we mark an interface with @FunctionalInterface annotation\nthen Java Compiler will give us error in case we define more than\none abstract method inside that interface"},{"number":363,"categorie":"Java 8","question":"What are the differences between Collection and Stream API in Java 8?","reponse":"Main differences between Collection and Stream API in Java 8 are:\n \n1. Version: Collection API is in use since Java 1.2. Stream\nAPI is recent addition to Java in version 8.             \n2. Usage: Collection API is used for storing data in different\nkinds of data structures. Stream API is used for\ncomputation of data on a large set of Objects.\n3. Finite: With Collection API we can store a finite number\nof elements in a data structure. With Stream API, we can\nhandle streams of data that can contain infinite number of\nelements.\n4. Eager vs. Lazy: Collection API constructs objects in an\neager manner. Stream API creates objects in a lazy manner.\n5. Multiple consumption: Most of the Collection APIs\nsupport iteration and consumption of elements multiple\ntimes. With Stream API we can consume or iterate\nelements only once."},{"number":364,"categorie":"Java 8","question":"What are the main uses of Stream API in Java 8?","reponse":"Main uses of Stream API in Java 8 are:\n \n1. It helps in using data in a declarative way. We can make\nuse of Database functions like Max, Min etc., without\nrunning a full iteration.\n2. It makes good use of multi-core architectures without\nworrying about multi-threading code.\n3. We can create a pipeline of data operations with Java\nStream that can run in a sequence or in parallel.\n4. It provides support for group by, order by etc. operations.\n5. It supports writing for code in Functional programming\nstyle.\n6. It provides parallel processing of data."},{"number":365,"categorie":"Java 8","question":"What are the differences between Intermediate and Terminal Operations in Java 8 Streams?","reponse":"Main differences between Intermediate and Terminal Stream\noperations are as follows:\n \n1. Evaluation: Intermediate operations are not evaluated until\nwe chain it with a Terminal Operation of Stream. Terminal\nOperations can be independently evaluated.\n2. Output: The output of Intermediate Operations is another\nStream. The output of Terminal Operations is not a Stream.\n3. Lazy: Intermediate Operations are evaluated in lazy\nmanner.  Terminal Operations are evaluated in eager\nmanner.\n4. Chaining: We can chain multiple Intermediate Operations\nin a Stream. Terminal Operations cannot be chained\nmultiple times.\n5. Multiple: There can be multiple Intermediate operations in\na Stream operation. There can be only one Terminal\noperation in Stream processing statement."},{"number":366,"categorie":"Java 8","question":"What is a Spliterator in Java 8?","reponse":"A Spliterator is a special type of Iterator to traverse and partition\nthe elements of a source in Java. A source can be a collection, an IO\nchannel or a generator function.\n \nA Spliterator may traverse elements individually or sequentially in\nbulk"},{"number":367,"categorie":"Java 8","question":"What are the differences between Iterator and Spliterator in Java 8?","reponse":"Main differences between Iterator and Spliterator are as follows:\n \n1. Spliterator can be used with Streams in Java 8. Where as, \nIterator is just used with Collection.\n2. Spliterator uses Internal Iteration to iterate Streams.\nIterator uses External Iteration to iterate Collections.\n3. Spliterator can iterate Streams in Parallel as well as\nSequential manner. Iterator only iterates in Sequential\nmanner.\n4. Spliterator can traverse elements individually as well as in\nbulk. Iterator only iterates elements individually"},{"number":368,"categorie":"Java 8","question":"What is Type Inference in Java 8?","reponse":"A Java compiler can see each method’s invocation and it\ndeclaration to determine what are type arguments required for\ninvocation.\n \nBy Type Inference, Java can determine the types of the arguments as\nwell as the type of the result being returned.\n \nType inference algorithm also tries to find the most specific type\nthat can work with all types of arguments"},{"number":369,"categorie":"Java 8","question":"Does Java 7 support Type Inference?","reponse":"Yes, Java 7 supports Type Inference. In Java 8, Oracle has enhanced\nthe Type Inference concept. Now it can be used to define Lambda\nexpressions, functions and Method references."},{"number":370,"categorie":"Java 8","question":"How does Internal Iteration work in Java 8?","reponse":"In an Iterator, the fundamental question is that which party controls\nthe iteration. Is it Iterator or the Collection on which iterator runs.\n \nWhen a Collection controls the iterator, then it is called External\nIteration. When the Iterator controls the iteration then it is called\nInternal Iteration.\n \nIn case of Internal Iteration, the client hands over an operation to\nIterator and the Iterator applies the operation to all the elements in\naggregate.\n \nInternal Iteration is easier to implement, since the Iterator does not\nhave to store the state of the collection"},{"number":371,"categorie":"Java 8","question":"What are the main differences between Internal and External Iterator?","reponse":"Main differences between Internal and External Iterator are as\nfollows:\n \n1. An Internal Iterator controls the iteration itself. In an\nExternal Iterator collection controls the iteration.\n2. Internal Iterator can iterate elements in individually as\nwell as in\n3. Bulk (like forEach). External iterator iterates element one\nby one.\n4. Internal Iterator does not have to iterate elements only\nsequentially. External Iterator always iterates sequentially.\n5. Internal Iterator supports declarative programming style\nthat goes well with functional programming. External\nIterator follows imperative style OOPS programming.\n6. Some people consider Internal Iterator code more readable\nthan that of External Iterator."},{"number":372,"categorie":"Java 8","question":"What are the main advantages of Internal Iterator over External Iterator in Java 8?","reponse":"Some of the main advantages of Internal Iterator are:\n \n1. Internal Iterator is based on Functional programming,\ntherefore it can work on declarative style code.\n2. There is no need to sequentially iterate elements in Internal\nIterator.\n3. Code is more readable and concise in Internal Iterator.\n4. Internal Iterator supports concurrency and parallel\nprocessing."},{"number":373,"categorie":"Java 8","question":"What are the applications in which we should use Internal Iteration?","reponse":"We need Internal Iterator in applications that require high\nperformance, parallel processing, fast iteration and bulk operations\nsupport.\n \nAlso in Internal Iteration applications, we do not have much control\nover iteration. The other features like parallel processing etc.\nbecome more important."},{"number":374,"categorie":"Java 8","question":"What is the main disadvantage of Internal Iteration over External Iteration?","reponse":"Internal Iteration has many advantages over External Iteration. But it\nhas one big disadvantage. Since Java API is responsible for\niterating in Internal iterator, developer does not get any control over\niteration."},{"number":375,"categorie":"Java 8","question":"Can we provide implementation of a method in a Java Interface?","reponse":"Before Java 8, it was not allowed to provide implementation of a\nmethod in an Interface.\n \nJava 8 has introduced the flexibility of providing implementation of\na method in an interface. There are two options for that:\n \n1. Default Method: We can give default implementation of a\nmethod.\n2. Static Method: We can create a static method in an\ninterface and provide implementation"},{"number":376,"categorie":"Java 8","question":"What is a Default Method in an Interface?","reponse":"In Java 8, we can provide implementation of a method in an\nInterface and mark this method with Default keyword.\n \nIn this way, this implementation of the method becomes default\nbehavior for any class implementing the interface."},{"number":377,"categorie":"Java 8","question":"Why do we need Default method in a Java 8 Interface?","reponse":"Default methods in an Interface provide backward compatibility\nfeature in Java 8.\n \nLet say there is an interface Car that is implemented by BMW,\nChevrolet and Toyota classes. Now a Car needs to add capability\nfor flying. It will require change in Car interface. Some of the car\nclasses that do not have flying capability may fail. Therefore a\nDefault Implementation of flying methods is added in Car interface\nso that cars with no flying capability can continue to implement the\noriginal Car interface"},{"number":378,"categorie":"Java 8","question":"What is the purpose of a Static method in an Interface in Java 8?","reponse":"A Static method in an Interface is utility or helper method. This is\nnot an object level instance method. Some of the uses of Static\nmethod in an Interface are:\n \n1. Single Class: There is no need to create a separate Utils\nclass for storing utility or helper methods. We can keep\nthese methods in same interface.\n2. Encapsulation: With Static methods, complete behavior of\na Class is encapsulated in same class. There is no need to\nmaintain multiple classes.\n3. Extension: It is easier to extend a Class/API. If we extend\na collection ArrayList, we get all the methods. We need not\nextend Collections class also."},{"number":379,"categorie":"Java 8","question":"What are the core ideas behind the Date/Time API of Java 8?","reponse":"There are three core ideas behind the Date/Time API of Java 8:\n \n1. Immutable-value classes: The new API avoids thread-\nsafety and concurrency issues by ensuring that all the core\nclasses are immutable and represent well-defined values.\n \n2. Domain-driven design: The new API is modeled on\nprecise domain with classes that represent different use\ncases for Date and Time.\n \n3. The emphasis on domain-driven design offers benefits like\nclarity and understandability.\n \n4. Separation of chronologies: The new API allows people to\nwork with different calendar systems. It supports the needs\nof users in different areas of the world likes Japan or\nThailand that don’t follow ISO-8601."},{"number":380,"categorie":"Java 8","question":"What are the advantages of new Date and Time API in Java 8 over old Date API?","reponse":"Some of the advantages of Java 8 Date Time API over existing Date\nAPI are:\n \nConcurrency: Existing Date Time classes (such as java.util.Date and\nSimpleDateFormatter) are not thread-safe. This does not work well\nin concurrent applications. In new Date Time API, developer does\nnot have to deal with concurrency issues while writing date-\nhandling code.\n \nBetter Design: Date/Time classes prior to Java 8 have poor API\ndesign. For example, years in java.util.Date start at 1900, months\nstart at 1, and days start at 0. It is not very intuitive. Java 8 Date\nTime API handles it very well.\n \nNo need for 3rd Party Libraries: With the popularity of third-party\nDate/Time libraries like Joda Time, Java has to make its native\nDate/Time API comparable. Now we can use the Java API instead\nof using 3rd party libraries."},{"number":381,"categorie":"Java 8","question":"What are the main differences between legacy Date/Time API in Java and Date/Time API of Java 8?","reponse":"Main difference between legacy Date/Time API and Java 8\nDate/Time API are:\n \n1. Old API is not Thread safe. Java 8 API is Thread safe.\n2. Old API has many mutable objects. New Java 8 API is\nbased on Immutable objects.\n3. Performance of old API is not good. New Java 8\nDate/Time API gives better performance.\n4. Old API is less readable and maintainable. New Java 8\nAPI is very well designed and is more readable.\n5. Old API has month values from 0 to 11. New API has\nmonths from 1 to 12."},{"number":382,"categorie":"Java 8","question":"How can we get duration between two dates or time in Java 8?","reponse":"In Java8, we have a new class Duration that provides the utility of\ncomputing duration between two dates.\n \nWe can call the static method Duration.between(date1, date2) to get\nthe time period in hours, mins, days etc. between date1 and date2."},{"number":383,"categorie":"Java 8","question":"What is the new method family introduced in Java 8 for processing of Arrays on multi core machines?","reponse":"Java 8 has enhanced the Arrays class with methods that can run\nefficiently on multi core machines.\n \nThese methods start with keyword parallel.\nEgg. Arrays.parallelSetAll(), Arrays.parallelSort() etc.\n \nThis parallel set of methods provides parallel processing of Arrays\nthat can run Java code very fast on a multi core machine."},{"number":384,"categorie":"Java 8","question":"How does Java 8 solve Diamond problem of Multiple Inheritance?","reponse":"In Multiple Inheritance if a class extends more than one classes with\ntwo different implementation of same method then it causes\nDiamond problem.\n \nConsider following example to see problem and solution for\nDiamond problem in Java 8:\n \npublic interface BaseInterface{  \n  default void display() { //code goes here }\n}\npublic interface BaseOne extends BaseInterface { }\npublic interface BaseTwo extends BaseInterface { }\npublic class ChildClass implements BaseOne, BaseTwo { }\n \nIn the above code, class ChildClass gives compile time error. Java\nCompiler cannot decide which display method should it invoke in\nChildClass.\n \nTo solve this problem, Java SE 8 has given the following remedy:\n \npublic interface A{  \n  default void display() { //code goes here }\n}\npublic interface B extends A{ }\npublic interface C extends A{ }\npublic class D implements B,C{\n  default void display() {\n    B.super.display();      \n  }\n} \npublic interface BaseInterface{  \n  default void display() { //code goes here }\n}\npublic interface BaseOne extends BaseInterface { }\npublic interface BaseTwo extends BaseInterface { }\npublic class ChildClass implements BaseOne, BaseTwo {\ndefault void display(){\nBaseOne.super.display();\n}\n}\n \nThe method invocation at BaseOne.super.display(); solves the\nDiamond problem as it resolves the confusion for compiler."},{"number":385,"categorie":"Java 8","question":"What are the differences between Predicate, Supplier and Consumer in Java 8?","reponse":"The subtle difference between Predicate, Supplier and Consumer in\nJava 8 is as follows:\n \nPredicate is an anonymous function that accepts one argument and\nreturns a result.\n \nSupplier is an anonymous function that accepts no argument and\nreturns a result.\n \nConsumer is an anonymous function that accepts one argument and\nreturns no result."},{"number":386,"categorie":"Java 8","question":"Is it possible to have default method definition in an interface without marking it with default keyword?","reponse":"No, we have to always mark a default method in interface with\ndefault keyword.\n \nIf we create a method with implementation in an interface, but do\nnot mark it as default, then we will get compile time error."},{"number":387,"categorie":"Java 8","question":"Can we create a class that implements two Interfaces with default methods of same name and signature?","reponse":"No, it is not allowed to create a class that implements interfaces\nwith same name default methods.\n \nIt will give us compile time error for duplicate default methods."},{"number":388,"categorie":"Java 8","question":"How Java 8 supports Multiple Inheritance?","reponse":"In Multiple Inheritance a class can inherit behavior from more than\none parent classes.\nPrior to Java 8,  a class can implement multiple interfaces but\nextend only one class.\n \nIn Java 8, we can have method implementation within an interface.\nSo an interface behaves like an Abstract class.\n \nNow if we implement more than one interface with method\nimplementation in a class, it means we are inheriting behavior from\nmultiple abstract classes. That is how we get Multiple Inheritance\nin Java 8."},{"number":389,"categorie":"Java 8","question":"In case we create a class that extends a base class and implements an interface. If both base class and interface have a default method with same name and arguments, then which definition will be picked by JVM?","reponse":"In such a scenario, JVM will pick the definition in base class."},{"number":390,"categorie":"Java 8","question":"If we create same method and define it in a class , in its parent class and in an interface implemented by the class, then definition will be invoked if we access it using the reference of Interface and the object of class?","reponse":"In all the cases, method defined in the class will be invoked."},{"number":391,"categorie":"Java 8","question":"Can we access a static method of an interface by using reference of the interface?","reponse":"No, a static method of interface has to be invoked by using the name\nof the interface."},{"number":392,"categorie":"Java 8","question":"How can you get the name of Parameter in Java by using reflection?","reponse":"Java 8 has introduced a method Parameter.getName() to get the\nname of a parameter by using reflection.\n \nBefore using this feature, we need to turn on this feature in Java\ncompiler.\n \nTo turn on this feature, just run javac with –parameters argument.\n \nTo verify the availability of this feature, we can use Parameter.\nisNamePresent() method."},{"number":393,"categorie":"Java 8","question":"What is Optional in Java 8?","reponse":"Optional is a container object that may have a null or non-null\nvalue. If it has a value then isPresent() method returns true.\n \nIt a value is present, we can call get() method to get the value. Else\nwe will get nothing.\n \nIt is very useful in handling data that has null values."},{"number":394,"categorie":"Java 8","question":"What are the uses of Optional?","reponse":"Some of the uses of Optional in Java are:\n \nWe can use Optional to avoid NullPointerException in an\napplication.\nOptional performs Null check at compile time, so we do not get run\ntime exception for a null value.\nOptional reduces the codebase pollution by removing unnecessary\nnull checks.\nOptional can also be used to handle default case for data when a\nvalue is null"},{"number":395,"categorie":"Java 8","question":"Which method in Optional provides the fallback mechanism in case of null value?","reponse":"In case, an Optional has null value, we can use orElseGet() method\nas fallback mechanism. If we implement orElseGet() method, it will\nbe invoked when the value of Optional is null"},{"number":396,"categorie":"Java 8","question":"How can we get current time by using Date/Time API of Java 8?","reponse":"In Java 8 we can use Clock class to get the current time. Instead of\nusing old method System.currentTimeMillis(), we can create a\nClock object and call millis() method to get the current time in\nmilliseconds.\n \nWe can also call instant() method on Clock object to get the current\ntime in a readable format."},{"number":397,"categorie":"Java 8","question":"Is it possible to define a static method in an Interface?","reponse":"Yes, from Java 8, an Interface can also has a static method."},{"number":398,"categorie":"Java 8","question":"How can we analyze the dependencies in Java classes and packages?","reponse":"Java 8 comes with a new command line tool jdeps that can help in\nanalyzing the package-level and class-level dependencies.\n \nWe can pass a jar file name or a class name as an argument to this\ntool. It will list all the dependencies of that jar or class."},{"number":399,"categorie":"Java 8","question":"What are the new JVM arguments introduced by Java 8?","reponse":"In Java 8, PermGen space of ClassLoader is removed.  It has been\nreplaced with MetaSpace.\n \nNow we can set the initial and maximum size of MetaSpace.\n \nThe JVM options -XX:PermSize and –XX:MaxPermSize are\nreplaced by -XX:MetaSpaceSize and -XX:MaxMetaspaceSize\nrespectively in Java 8."},{"number":400,"categorie":"Java 8","question":"What are the popular annotations introduced in Java 8?","reponse":"Some of the popular annotations introduced in Java 8 are:\n \n@FunctionalInterface: This annotation is used to mark an interface\nas Functional Interface. As mentioned earlier, A FunctionalInterface\ncan be used for lambda expressions.\n \n@Repeatable: This annotation is used for marking another\nannotation. It indicates that the marked annotation can be applied\nmultiple times on a type."},{"number":401,"categorie":"Java 8","question":"What is a StringJoiner in Java 8?","reponse":"StringJoiner is a new class in Java 8 that can be used to create a\nString. It can construct a sequence of characters separated by a\ndelimiter. It can also optionally add a prefix and suffix to this\nsequence. We can use this sequence to get a String.\n \nE.g.\nThe String \"[One:Two:Three]\" may be constructed as follows:\n \nStringJoiner sj = new StringJoiner(\":\", \"[\", \"]\");\nsj.add(\"One\").add(\"Two\").add(\"Three\");\nString desiredString = sj.toString();"},{"number":402,"categorie":"Java 8","question":"What is the type of a Lambda expression in Java 8?","reponse":"The type of a lambda expression depends on the context it is being\nused.\n \nA lambda is like a method reference. It does not have a type of its\nown.\n \nGenerally, a Lambda is an instance of a Functional Interface"},{"number":403,"categorie":"Java 8","question":"What is the target type of a lambda expression ?","reponse":"The target type of a lambda expression represents a type to which\nthe expression can be converted.\n \nThe target type for a lambda expression is a functional interface.\n \nThe lambda expression must have same parameter type as the\nparameter in the function of the interface. It must also return a type\ncompatible with the return type of function."},{"number":404,"categorie":"Java 8","question":"What are the main differences between an interface with default method and an abstract class in Java 8?","reponse":"An interface with a default method appears same as an Abstract\nclass in Java. But there are subtle differences between two.\n \n1. Instance variable: An interface cannot have instance\nvariables. An abstract class can have instance variables.\n2. Constructor: An interface cannot have a constructor. An\nabstract class can have constructor.\n3. Concrete Method: An interface cannot have concrete\nmethods other than default method. An abstract class is\nallowed to define concrete methods with implementation.\n4. Lambda: An interface with exactly one default method can\nbe used for lambda expression. An abstract class cannot be\nused for lambda expression.\n \n Java Tricky Questions"},{"number":405,"categorie":"Java Tricky Questions","question":"Is there any difference between a = a + b and a += b expressions?","reponse":"When we add two integral variables e.g. variables of type byte,\nshort, or int in Java, then they are first promoted to int type, and then\naddition happens. \n \nThe += operator implicitly casts the result of addition into the type\nof variable used to hold the result.\nWhat happens when you put return statement or System.exit () on try\nor catch block? Will finally block execute?\n \nIt is a popular tricky Java interview question. Most of the\nprogrammers think that no matter what the finally block will always\nexecute. This question challenges that concept by putting a return\nstatement in the try or catch block or calling System.exit() from try\nor catch block.\n \nYou can answer by saying that finally block executes even if we put\na return statement in the try block or catch block. But finally block\ndoes not execute if you call System.exit() from try or catch block."},{"number":406,"categorie":"Java Tricky Questions","question":"What does the expression 1.0 / 0.0 return?","reponse":"Will there be any\ncompilation error?\n \nDouble class is the source of many tricky interview questions. You\nmay know about the double primitive type and Double class. But\nwhile doing floating point arithmetic some people don't pay enough\nattention to Double.INFINITY, NaN, and -0.0. There are rules that\ngovern the floating point arithmetic calculations involving Double.\n \nThe answer to this question is that 1.0 / 0.0 will compile\nsuccessfully. And it will not throw ArithmeticException. It will just\nreturn Double.INFINITY."},{"number":407,"categorie":"Java Tricky Questions","question":"Can we use multiple main methods in multiple classes?","reponse":"Yes. When we start an application in Java, we just mention the class\nname to be run to java command. The JVM looks for the main\nmethod only in the class whose name is passed to java command.\nTherefore, there is no conflict amongst the multiple classes having\nmain method."},{"number":408,"categorie":"Java Tricky Questions","question":"Does Java allow you to override a private or static method?","reponse":"The question is tricky but the answer is very simple. You cannot\noverride a private or static method in Java. If we create a similar\nmethod with same return type and same method arguments in child\nclass, then it will hide the superclass method. This is known as\nmethod hiding.\n \nAlso, you cannot override a private method in sub class because\nPrivate method is not visible even in a subclass. Therefore, what\nyou can do is to create another private method with the same name\nin the child class. \n \nSo in both the cases, it is not method overriding. It is either method\nhiding or a new method."},{"number":409,"categorie":"Java Tricky Questions","question":"What happens when you put a key object in a HashMap that is already present?","reponse":"In a HashMap there are buckets in which objects are stored. Key\nobjects with same HashCode go to same bucket.\n \nIf you put the same key again in a HashMap, then it will replace the\nold mapping because HashMap doesn't allow duplicate keys. The\nsame key will have same HashCode  as previous key object. Due to\nsame HashCode, it will be stored at the same position in the bucket."},{"number":410,"categorie":"Java Tricky Questions","question":"How can you make sure that N threads can access N resources without deadlock?","reponse":"This question checks your knowledge of writing multi-threading\ncode. If you have experience with deadlock and race conditions,\nyou can easily answer this.\n \nThe answer is that by resource ordering you can prevent deadlock.\nIf in our program we always acquire resources in a particular order\nand release resources in the reverse order, then we can prevent the\ndeadlock.\n \nSo a thread waiting for same resource can not get into deadlock\nwhile the other thread is trying to get it and holding the resource\nrequired by first thread. If both of them release the resources in right\norder, one of them can acquire it to finish the work."},{"number":411,"categorie":"Java Tricky Questions","question":"How can you determine if JVM is 32-bit or 64-bit from Java Program?","reponse":"We can find JVM bit size 32 bit or 64 bit by running java command\nfrom the command prompt.\n \nOr we can get it from Java program.\n \nSun has a Java System property to determine the bit size of the\nJVM: 32 or 64:\n \nsun.arch.data.model=32 // 32 bit JVM\nsun.arch.data.model=64 // 64 bit JVM\n \nWe can use System.getProperty(\"sun.arch.data.model\") to determine\nif it is 32/64 bit from Java program."},{"number":412,"categorie":"Java Tricky Questions","question":"What is the right data type to represent Money (like Dollar/Pound) in Java?","reponse":"To represent money you need decimal points in the numbers like\n$1.99.\n \nBigDecimal class provides good methods to represent Money.\nUsing BigDecimal, we can do the calculation with decimal points\nand correct rounding. But using BigDecimal is a little bit high on\nmemory usage.\n \nWe can also use double with predefined precision. But calculation\non double can give erroneous results."},{"number":413,"categorie":"Java Tricky Questions","question":"How can you do multiple inheritances in Java?","reponse":"This is a question to trick people coming from C++ and Scala\nbackground to Java. There are many Object Oriented languages that\nsupport multiple inheritances. But Java is not one of them.\n \nAnswer of this question can be that, Java does support multiple\ninheritances of by allowing an interface to extend other interfaces.\nYou can implement more than one interface. But you cannot extend\nmultiple classes. So Java doesn't support multiple inheritances of\nimplementation.\n \nBut in Java 8, the default method breaks the rule of multiple\ninheritances behavior."},{"number":414,"categorie":"Java Tricky Questions","question":"Is ++ operation thread-safe in Java?","reponse":"No, ++ operator is not a thread safe operation. It involves multiple\ninstructions like- reading a value, incrementing it and storing it back\ninto memory. These instructions can overlap between multiple\nthreads. So it can cause issues in multi-threading."},{"number":415,"categorie":"Java Tricky Questions","question":"How can you access a non- static variable from the static context?","reponse":"We cannot access a non-static variable from the static context in\nJava. If you write a code like that, then you will get compile time\nerror. It is one of the most common problems for beginner Java\nprogrammers, when they try to access instance variable inside the\nmain method in a class.\n \nSince main method is static in Java, and instance variables are non-\nstatic, we cannot access instance variable inside main. The solution\nis to create an instance of the object and then access the instance\nvariables"},{"number":416,"categorie":"Java Tricky Questions","question":"Let say there is a method that throws NullPointerException in the superclass. Can we override it with a method that throws RuntimeException?","reponse":"This question is checking your understanding of the concepts of\nmethod overloading and overriding in Java.\n \nWe can throw superclass of RuntimeException in an overridden\nmethod, but we cannot do the same if it is a checked Exception."},{"number":417,"categorie":"Java Tricky Questions","question":"How can you mark an array volatile in Java?","reponse":"If you know multi-threading well then you can easily answer it.\n \nWe can mark an array volatile in Java. But it makes only the\nreference to array volatile, not the whole array.\n \nIf one thread changes the reference variable to point to another\narray, then it will provide a volatile guarantee. But if multiple\nthreads are changing individual array elements, they won't be having\nsame reference due to the reference itself being volatile."},{"number":418,"categorie":"Java Tricky Questions","question":"What is a thread local variable in Java?","reponse":"Thread-local variable is a variable restricted to a specific thread. It\nis like thread's own copy of variable that is not shared among\nmultiple threads.\nJava provides ThreadLocal class to support thread-local variables.\nTo achieve thread-safety, you can use it. To avoid any memory leak,\nit is always good to remove a thread-local variable, once its work\nis done."},{"number":419,"categorie":"Java Tricky Questions","question":"What is the difference between sleep() and wait() methods in Java?","reponse":"In Java, we use these methods to pause currently running thread.\nThere is a simple difference between these.\n \nsleep() is actually meant for short pause because it doesn't release\nlock.\n \nwait() is meant for conditional wait and it can release a lock that\ncan be acquired by another thread to change the condition on which\nit is waiting"},{"number":420,"categorie":"Java Tricky Questions","question":"Can you create an Immutable object that contains a mutable object?","reponse":"In Java, it is possible to create an Immutable object that contains a\nmutable object.\n \nWe should not share the reference of the mutable object, since it is\ninside an immutable object. Instead, we can return a copy of it to\nother methods."},{"number":421,"categorie":"Java Tricky Questions","question":"How can you convert an Array of bytes to String?","reponse":"You can convert an Array of bytes to String object by using the\nString constructor that accepts byte[]. We need to make sure that\nright character encoding is used. Else we may get different results\nafter conversion."},{"number":422,"categorie":"Java Tricky Questions","question":"What is difference between CyclicBarrier and CountDownLatch class?","reponse":"CyclicBarrier and CountDownLatch classes were introduced from\nJava 5.\n \nWe can reuse CyclicBarrier even if it is broken, but we cannot reuse\nCountDownLatch in Java."},{"number":423,"categorie":"Java Tricky Questions","question":"What is the difference between StringBuffer and StringBuilder?","reponse":"StringBuilder was introduced in Java 5. The main difference\nbetween both of them is that StringBuffer methods e.g. length(),\ncapacity(), append() are synchronized. But corresponding methods\nin StringBuilder are not synchronized.\nDue to this difference, concatenation of String using StringBuilder is\nfaster than StringBuffer. Now it is considered bad practice to use\nStringBuffer, because, in most of the scenarios, we perform string\nconcatenation in the same thread."},{"number":424,"categorie":"Java Tricky Questions","question":"Which class contains clone method?","reponse":"Cloneable or Object class?  \n \nIt is a very basic trick question. clone() method is defined in Object\nclass. Cloneable is a marker interface that doesn't contain any\nmethod."},{"number":425,"categorie":"Java Tricky Questions","question":"How will you take thread dump in Java?","reponse":"There are platform specific commands to take thread dump in Java.\n \nIn Linux/Unix, just use kill -3 PID, where PID is the process id of\nJava process. It will give the thread dump of Java process.\n \nIn Windows, press Ctrl + Break. This will instruct JVM to print\nthread dump in standard out or err. It can also go to console or log\nfile depending upon your application configuration."},{"number":426,"categorie":"Java Tricky Questions","question":"Can you cast an int variable into a byte variable?","reponse":"What happens if\nthe value of int is larger than byte?\n \nAn int is 32 bit in Java. But a byte is just 8 bit in Java. We can cast\nan int to byte. But we will lose higher 24 bits of int while casting.\nBecause a byte can hold only first 8 bits of int. Remaining 24 bits\n(32-8 = 24) will be lost."},{"number":427,"categorie":"Java Tricky Questions","question":"In Java, can we store a double value in a long variable without explicit casting?","reponse":"No, we cannot store a double value into a long variable without\ncasting it to long. The range of double is more than that of long. So\nwe need to type cast.\n \nTo answer this question, just remember which one is bigger\nbetween double and long in Java."},{"number":428,"categorie":"Java Tricky Questions","question":"What will this return 5*0.1 == 0.5?","reponse":"true or false?  \n \nThe answer is false because floating point numbers can not be\nrepresented exactly in Java, so 5*0.1 is not same as 0.5."},{"number":429,"categorie":"Java Tricky Questions","question":"Out of an int and Integer, which one takes more memory?","reponse":"An Integer object takes more memory than an int in Java. An Integer\nis an object and it stores meta-data overhead about the object. An\nint is a primitive type so its takes less memory and there is no meta-\ndata overhead."},{"number":430,"categorie":"Java Tricky Questions","question":"Can we use String in the switch case statement in Java?","reponse":"Yes. From Java 7 onwards, String can be used in switch case\nstatement. This gives convenience to programmer. But internally\nhash code of String is used for the switch statement."},{"number":431,"categorie":"Java Tricky Questions","question":"Can we use multiple main methods in same class?","reponse":"Yes. You can have multiple methods with name main in the same\nclass. But there should be only one main method with the signature\npublic static void main(String[] args). JVM looks for main with this\nsignature only. Other methods with name main in same class are just\nignored."},{"number":432,"categorie":"Java Tricky Questions","question":"When creating an abstract class, is it a good idea to call abstract methods inside its constructor?","reponse":"No, we should avoid calling abstract methods in the constructor of\nan abstract class. Because, it can restrict how these abstract\nmethods can be implemented by child classes.\n \nMany IDE give “Overridable method call in constructor” warning\nfor such implementation.\n \nThis is a problem of object initialization order. The superclass\nconstructor will run before the child class constructor. It means\nchild class is not yet initialized. But due to presence of overridden\nmethod in superclass, the overridden method of subclass is called\nwhen the subclass is not fully initialized."},{"number":433,"categorie":"Java Tricky Questions","question":"How can you do constructor chaining in Java?","reponse":"When we call one constructor from another constructor of the same\nclass, then it is known as constructor chaining in Java. When you\nhave multiple overloaded constructors in a class, you can do\nconstructor chaining."},{"number":434,"categorie":"Java Tricky Questions","question":"How can we find the memory usage of JVM from Java code?","reponse":"We can use memory management related methods provided in\njava.lang.Runtime class to get the free memory, total memory and\nmaximum heap memory in Java.\n \nBy using these methods, you can find out how much of the heap is\nused and how much heap space still remains. \n \nRuntime.freeMemory() returns amount of free memory in bytes.\nRuntime.totalMemory() returns total memory in bytes.\nRuntime.maxMemory() returns maximum memory in bytes."},{"number":435,"categorie":"Java Tricky Questions","question":"What is the difference between x == y and x.equals(y) expressions in Java?","reponse":"The x == y expression does object reference matching if both a and\nb are an object and only returns true if both are pointing to the same\nobject in the heap space.\n \nThe x.equals(y) expression is used for logical mapping and it is\nexpected from an object to override this method to provide logical\nequality.\n \nEg. A Book object may be logically equal to another copy of same\nBook, but it is a different object which will be false while doing x\n== y."},{"number":436,"categorie":"Java Tricky Questions","question":"How can you guarantee that the garbage collection takes place?","reponse":"No. We cannot guarantee the garbage collection in Java. Java\ndocumentation explicitly says that GarbageCollection is not\nguaranteed.\n \nYou can call System.gc() to request garbage collection, however,\nthat's what it is - a request. It is upto GC's discretion to run."},{"number":437,"categorie":"Java Tricky Questions","question":"What is the relation between x.hashCode() method and x.equals(y) method of Object class?","reponse":"x.hashCode() method returns an int hash value corresponding to an\nobject instance.\n \nIt is used in hashCode based collection classes like Hashtable,\nHashMap, LinkedHashMap etc.\n \nhashCode() method is also related to equals() method.\n \nAs per Java specification, two objects which are equal to each\nother using equals() method must have same hash code.\n \nTherefore, two objects with same hashCode may or may not be\nequal to each other. But two equal objects should have same hash\ncode."},{"number":438,"categorie":"Java Tricky Questions","question":"What is a compile time constant in Java?","reponse":"A compile time constant is public static final variable. The public\nmodifier is optional here. At compile time, they are replaced with\nactual values because compiler knows their value up-front and it\nalso knows that it cannot be changed during run-time. So they are\nconstants."},{"number":439,"categorie":"Java Tricky Questions","question":"Explain the difference between fail-fast and fail-safe iterators?","reponse":"The main difference between fail-fast and fail-safe iterators is\nwhether or not the collection can be modified while it is being\niterated.\n \nFail-safe iterators allow modification of collection in an iteration\ntask. But fail-fast iterators do not allow any modification to\ncollection during iteration.\n \nDuring iteration, fail-fast iterators fail as soon as they realize that\nthe collection has been modified. Modification can be addition,\nremoval or update of a member. And it will throw a\nConcurrentModificationException.\nEg. ArrayList, HashSet, and HashMap are fail-fast.\n \nFail-safe iterators operate on a copy of the collection. Therefore\nthey do not throw an exception if the collection is modified during\niteration.\nEg. ConcurrentHashMap,  CopyOnWriteArrayList are fail-safe."},{"number":440,"categorie":"Java Tricky Questions","question":"You have a character array and a String. Which one is more secure to store sensitive data (like password, date of birth, etc.)?","reponse":"Short answer is, it is safe to store sensitive information in character\narray.\n \nIn Java, String is immutable and it is stored in the String pool. Once\na String is created, it stays in the pool in memory until it is garbage\ncollected. You have no control on garbage collection. Therefore,\nanyone having access to a memory dump can potentially extract the\nsensitive data and use it.\n \nWhereas, if you use a mutable object like a character array, to store\nthe value, you can set it to blank once you are done with it. Once it\nis made blank it cannot be used by anyone else."},{"number":441,"categorie":"Java Tricky Questions","question":"Why do you use volatile keyword in Java?","reponse":"The volatile keyword guarantees global ordering on reads and\nwrites to a variable. This implies that every thread accessing a\nvolatile field will read the variable’s current value instead of using\na cached value.\n \nBy marking the variable volatile, the value of a variable is never\ncached thread-locally. All reads and writes will go straight to main\nmemory of Java."},{"number":442,"categorie":"Java Tricky Questions","question":"What is the difference between poll() and remove() methods of Queue in Java?","reponse":"It is a basic question to know the understanding of Queue data\nstructure. Both poll() and remove() methods remove and return the\nhead of the Queue.\n \nWhen Queue is empty, poll() method fails and it returns null, but\nremove() method fails and throws Exception."},{"number":443,"categorie":"Java Tricky Questions","question":"Can you catch an exception thrown by another thread in Java?","reponse":"Yes, it can be done by using Thread.UncaughtExceptionHandler.\n \nJava Documentation says “When a thread is about to terminate due\nto an uncaught exception the Java Virtual Machine will query the\nthread for\nits UncaughtExceptionHandler usingThread.getUncaughtExceptionHandler()\nwill invoke the handler's uncaughtException method, passing the\nthread and the exception as arguments.”"},{"number":444,"categorie":"Java Tricky Questions","question":"How do you decide which type of Inner Class – Static or Non-Static to use in Java?","reponse":"An inner class has full access to the fields and methods of the\nenclosing class. This is convenient for event handlers, but comes at\na cost. Every instance of an inner class retains and requires a\nreference to its enclosing class.\n \nDue to this cost, there are many situations where static nested\nclasses are preferred over inner classes. When instances of the\nnested class outlive instances of the enclosing class, the nested\nclass should be static to prevent memory leaks.\n \nAt times, due to their “hidden” reference to enclosing class, Inner\nclasses are harder to construct via reflection."},{"number":445,"categorie":"Java Tricky Questions","question":"What are the different types of Classloaders in Java?","reponse":"Java Classloader is the part of the Java Runtime Environment (JRE)\nthat loads classes on demand into Java Virtual Machine (JVM).\n \nWhen the JVM is started, three types of class loaders are used:\n \n1. Bootstrap Classloader: It loads core java API file rt.jar classes\nfrom folder.\n2. Extension Classloader: It loads jar files from lib/ext folder.\n3. System/Application Classloader: It loads jar files from path\nspecified in the CLASSPATH environment variable.\n \nClasses may be loaded from the local file system, a remote file\nsystem, or even the web."},{"number":446,"categorie":"Java Tricky Questions","question":"What are the situations in which you choose HashSet or TreeSet?","reponse":"HashSet is better than TressSet in almost every way. It gives O(1)\nfor add(), remove() and contains() operations. Whereas, TressSet\ngives O(log(N)) for these operations.\n \nStill, TreeSet is useful when you wish to maintain order over the\ninserted elements or query for a range of elements within the set.\n \nWe should use TreeSet when we want to maintain order. Or when\nthere are enough read operations to offset the increased cost of\nwrite operations."},{"number":447,"categorie":"Java Tricky Questions","question":"What is the use of method references in Java?","reponse":"Java 8 has introduced Method references. It allows constructors and\nmethods to be used as lambdas.\n \nThe main uses of Method reference are to improve code\norganization, clarity and terseness."},{"number":448,"categorie":"Java Tricky Questions","question":"Do you think Java Enums are more powerful than integer constants?","reponse":"Yes. Java Enums provide many features that integer constants\ncannot. Enums can be considered as final classes with a fixed\nnumber of instances. Enums can implement interfaces but cannot\nextend another class.\n \nWhile implementing the strategy pattern, we can use this feature of\nEnums. Especially, when the number of strategies is fixed.\n \nYou can also attach meta-data to enum values in Java. Also enum\nvalues are typesafe, where as integer constants are not.\n \nYou can also define custom behavior in enum values."},{"number":449,"categorie":"Java Tricky Questions","question":"Why do we use static initializers in Java?","reponse":"In Java, a static initializer can run code during the initial loading of\na class and it guarantees that this code will only run once. Also the\nstatic code will finish running before a class can be accessed in any\nway.\n \nInitializing static members from constructors is more work. You\nhave to make sure that every constructor does this. You need to\nmaintain a flag to mark the static work when it is done. You may\nhave to think about synchronization or races conditions for work in\nstatic block not initialized from static context."},{"number":450,"categorie":"Java Tricky Questions","question":"Your client is complaining that your code is throwing NoClassDefFoundError or NoSuchMethodError, even though you are able to compile your code without error and method exists in your code. What could be the reason behind this?","reponse":"Sometimes we upgrade our libraries even with same method name.\nBut we forget to let the client know about the new version. Due this\ndifferent in version, we get NoClassDefFoundError or\nNoSuchMethodError at runtime when one library was not\ncompatible with such an upgrade.\n \nJava build tools and IDEs can also produce dependency reports that\ntell you which libraries depend on that JAR. Mostly, identifying and\nupgrading the library that depends on the older JAR resolve the\nissue."},{"number":451,"categorie":"Java Tricky Questions","question":"How can you check if a String is a number by using regular expression?","reponse":"Regex is a powerful tool for matching patterns and searching\npatterns.\n \nA numeric String can only contain digits i.e. 0 to 9. It can also\ncontain + and - sign at start of the String. We can create a regular\nexpression for these two rules. One simple example is as follows:\n \nPattern pattern = Pattern.compile(\".*\\\\D.*\");"},{"number":452,"categorie":"Java Tricky Questions","question":"What is the difference between the expressions String s = \"Temporary\" and String s = new String(\"Temporary \")?","reponse":"Which one is\nbetter and more efficient?\n \nIn general, String s = \" Temporary \" is more efficient to use than\nString s = new String(\"Temporary \").\n \nIn case of String s = \" Temporary \", a String with the value\n“Temporary” is created in String pool. If another String with the\nsame value is created (e.g., String s2 = \" Temporary \"), it will\nreference the same object in the String pool.\n \nBut, when you use String s = new String(\"Temporary \"), Java\ncreates a String with the value “Temporary” in the String pool.\nAlso, that String object is then passed to the constructor of the\nString Object i.e. new String(\"Temporary \"). And this call creates\nanother String object (not in the String pool) with that value.\n \nTherefore, each such call creates an additional String object. E.g.\nString s2 = new String(\"Temporary \") creates an extra String object,\nrather than just reusing the same String object from the String pool.\n \nSo String s = “Temporary” is always an efficient way."},{"number":453,"categorie":"Java Tricky Questions","question":"In Java, can two equal objects have the different hash code?","reponse":"No. It is not possible for two equal objects to have different\nhashcode. But two objects with same hashcode may or may not be\nequal."},{"number":454,"categorie":"Java Tricky Questions","question":"How can we print an Array in Java?","reponse":"We can print an array by using methods of Arrays class. We can\neither use Arrays.toString() method or we can use\nArrays.deepToString() method.\n \nSince array doesn't implement toString() method by itself, just\npassing an array to System.out.println() will not print its contents.\nBut we can use Arrays.toString() to print each element of an array."},{"number":455,"categorie":"Java Tricky Questions","question":"Is it ok to use random numbers in the implementation of hashcode() method in Java?","reponse":"No. The hashcode of an object should be always same. If you use\nrandom number in hashcode() method, then you may get a different\nvalue of hashcode for same object. This will break the hashcode\ncontract."},{"number":456,"categorie":"Java Tricky Questions","question":"Between two types of dependency injections, constructor injection and setter dependency injection, which one is better?","reponse":"Constructor injection guarantees that a class will be initialized with\nall its dependencies during creation. But setter injection provides\nflexibility to set an optional dependency.\n \nIf we are using an XML file to describe dependencies, the setter\ninjection is more readable.\n \nIn general, it is a good practice to use constructor injection for\nmandatory dependencies and use setter injection for optional\ndependencies."},{"number":457,"categorie":"Java Tricky Questions","question":"What is the difference between DOM and SAX parser in Java?","reponse":"In Java, Document Object Model (DOM) parser loads the whole\nXML into memory and creates a tree based on DOM model. This\nhelps it in quickly locating the nodes, and making a change in the\nstructure of XML.\n \nOn the other hand, Simple API for XML (SAX) parser is an event\nbased parser. It doesn't load the whole XML into memory. Due to\nthis reason DOM is faster than SAX but require more memory and\nis not suitable to parse large XML files."},{"number":458,"categorie":"Java Tricky Questions","question":"Between Enumeration and Iterator, which one has better performance in Java?","reponse":"Enumeration interface is a read-only interface. It has better\nperformance than Iterator. It is almost twice as fast as compared to\nan Iterator. It also uses very less memory. Also Enumeration does\nnot have remove() method.\n \nOn the other hand, Iterator interface is safer than Enumeration, since\nit can check whether a collection is modified or not during iteration.\nIf a collection is altered while an Iterator is iterating, then it throws\nConcurrentModificationException."},{"number":459,"categorie":"Java Tricky Questions","question":"What is the difference between pass by reference and pass by value?","reponse":"Whenever an object is passed by value, it means that a copy of the\nobject is passed. Even if changes are made to that object, it doesn’t\naffect the original value.\n \nWhenever an object is passed by reference, it means that the actual\nobject is not passed, rather a reference of the object is passed.\nTherefore, any changes made by an external method, are also\nreflected in the actual object and its reference."},{"number":460,"categorie":"Java Tricky Questions","question":"What are the different ways to sort a collection in Java?","reponse":"The most popular way to sort a collection in Java is by calling\nCollections.sort() method. You can provide your custom\nComparator to sort() method for sorting the data in your custom\nway.\n \nThe other way is to use a Sorted collection like TreeSet or TreeMap\nthat stores the information in a sorted order and then you can\nconvert it to a List."},{"number":461,"categorie":"Java Tricky Questions","question":"Why Collection interface doesn’t extend Cloneable and Serializable interfaces?","reponse":"Collection interface just specifies groups of objects known as\nelements. Each concrete implementation of a Collection can choose\nits own way of how to maintain and order its elements.\n \nSome collections may allow duplicate keys, while other collections\nmay not.\n \nA lot of collection implementations have clone method. But many do\nnot. It is not worthwhile to include it in all, since Collection is an\nabstract representation. What matters is the concrete\nimplementation.\n \nCloning and serialization come into picture while doing concrete\nimplementation. Therefore, the concrete implementations of\ncollections should decide how they can be cloned or serialized."},{"number":462,"categorie":"Java Tricky Questions","question":"What is the difference between a process and a thread in Java?","reponse":"A process is simply an execution of a program.\n \nA Thread is a single execution sequence within a process.\n \nA process may contain multiple threads. A Thread is also called as\na lightweight process."},{"number":463,"categorie":"Java Tricky Questions","question":"What are the benefits of using an unordered array over an ordered array?","reponse":"In an ordered array the search time has time complexity of O(log n).\nWhereas, in an unordered array, search time complexity is O (n).\n \nIn an ordered array, the insert operation has a time complexity of\nO(n). Whereas, the insertion operation for an unordered array takes\nconstant time of O(1).\n \nTherefore, when we have more writes than reads, it is preferable to\nuse an unordered array."},{"number":464,"categorie":"Java Tricky Questions","question":"Between HashSet and TreeSet collections in Java, which one is better?","reponse":"A HashSet is Implemented using a HashTable. Therefore, its\nelements are stored in a random order. The add(), remove(), and\ncontains() methods of a HashSet have constant time complexity\nO(1).\n \nA TreeSet is implemented using a tree data structure. The elements\nin a TreeSet are sorted in a natural order. Therefore, add(),\nremove(), and contains() methods have time complexity of O(logn).\n \nSo from performance perspective, HashSet has better performance\nthan TreeSet. But if you want to store elements in a natural sorting\norder, then TreeSet is a better collection."},{"number":465,"categorie":"Java Tricky Questions","question":"When does JVM call the finalize() method?","reponse":"JVM instructs the Garbage Collector to call the finalize method, just\nbefore releasing an object from the memory. A programmer can\nimplement finalize() method to explicitly release the resources held\nby the object. This will help in better memory management and\navoid any memory leaks."},{"number":466,"categorie":"Java Tricky Questions","question":"When would you use Serial Garabage collector or Throughput Garbage collector in Java?","reponse":"The Serial Garbage collector is used for small applications that\nrequire heap memory upto 100 MB.\n \nThe Throughput Garbage collector is used in medium to large size\nJava applications."},{"number":467,"categorie":"Java Tricky Questions","question":"In Java, if you set an object reference to null, will the Garbage Collector immediately free the memory held by that object?","reponse":"No. JVM decides to run the Garbage Collector whenever it is low\non memory. When Garbage Collector runs, it looks for objects that\nare available for garbage collection and then frees the memory\nassociated with this object.\n \nSo just setting an Object reference null makes it eligible for\nGarbage Collection, but it does not immediately free the memory."},{"number":468,"categorie":"Java Tricky Questions","question":"How can you make an Object eligible for Garbage collection in Java?","reponse":"To make an Object eligible for Garbage collection, just make sure\nthat it is unreachable to the program in which it is currently defined\n/ created / used. You can set the object reference to null and make\nsure no other object refers it. Once the object cannot be reached,\nGarbage Collection can clean it during the next run."},{"number":469,"categorie":"Java Tricky Questions","question":"When do you use Exception or Error in Java?","reponse":"What is the difference\nbetween these two?\nThrowable class is the superclass of Exception and Error classes in\nJava.\n \nWhen you want to catch the exceptional conditions that your\nprogram can create or encounter, then use the Exception class or\nsubclass of Exception.\n \nWhen you come across situations that are unexpected then use Error\nclass in Java. Also recovering from Error is not possible in most of\ncases. So it is better to terminate the program."},{"number":470,"categorie":"Java Tricky Questions","question":"What is the advantage of PreparedStatement over Statement class in Java?","reponse":"PreparedStatements are precompiled statements for database\nqueries. Due to this their performance is much better. Also, we can\nreuse PreparedStatement objects with different input values to the\nsame query.\n \nWhere as, Statement class does not provide these features."},{"number":471,"categorie":"Java Tricky Questions","question":"In Java, what is the difference between throw and throws keywords?","reponse":"When we want to raise an exception in our code, we use the throw\nkeyword with the name of the exception to be raised.\n \nWhere as, throws keyword is used in method declaration. Throws\nkeyword tells us the Exception that can be thrown by this method.\nAny caller of this method should be prepared to expect this\nException.\n \nAnother minor difference is that throw is used only with one\nexception, but throws can be used with comma-separated list of\nmultiple exceptions."},{"number":472,"categorie":"Java Tricky Questions","question":"What happens to the Exception object after the exception handling is done?","reponse":"Once the exception handling is complete, the Exception object is not\nreachable. Then it is garbage collected in the next run of Garbage\nCollector."},{"number":473,"categorie":"Java Tricky Questions","question":"How do you find which client machine is sending request to your servlet in Java?","reponse":"We can use the ServletRequest class to find the IP address or host\nname of the client machine.\n \nThere are methods getRemoteAddr() to get the IP address of the\nclient machine and getRemoteHost() to get the host name of the\nclient machine."},{"number":474,"categorie":"Java Tricky Questions","question":"What is the difference between a Cookie and a Session object in Java?","reponse":"Both Cookie and Session are used during communication between\nClient and Server. The Client can disable a Cookie. Due to which\nthe Web server cannot send a cookie. But a client cannot disable a\nsession. So a Session always works irrespective of any setting at\nthe client side.\n \nAlso a Session can store any Java object. But the Cookie can only\nstore small information in a String object."},{"number":475,"categorie":"Java Tricky Questions","question":"Which protocol does Browser and Servlet use to communicate with each other?","reponse":"HTTP protocol. The Browser and Servlet communicate with each\nother by using the HTTP protocol."},{"number":476,"categorie":"Java Tricky Questions","question":"What is HTTP Tunneling?","reponse":"There are many network communication protocols on the Internet.\nBut HTTP is the most popular among them. HTTP Tunneling is a\ntechnique in which HTTP or HTTPS protocol encapsulated the\ncommunication done by any other type of protocol. The masking of\nother protocol requests as HTTP requests is known as HTTP\nTunneling."},{"number":477,"categorie":"Java Tricky Questions","question":"Why do we use JSP instead of Servlet in Java?","reponse":"Since JSP pages are dynamically compiled into servlets, the\nprogrammers can easily make updates to the presentation layer\ncode.\n \nFor better performance, JSP pages can be pre-compiled.\n \nAlso JSP pages provide flexibility to combine static templates like\nHTML or XML snippets.\n \nIn addition, programmers can make logic changes at the class level,\nwithout editing the JSP pages that use the class logic."},{"number":478,"categorie":"Java Tricky Questions","question":"Is empty ‘.java’ file name a valid source file name in Java?","reponse":"Yes. You can create a class and store it in a file with name .java.\nYou can try it yourself, by creating, compiling and running such a\nfile. It will run correctly."},{"number":479,"categorie":"Java Tricky Questions","question":"How do you implement Servlet Chaining in Java?","reponse":"To implement, Servlet Chaining, there has to be more than one\nservlet. The output of one servlet has to be sent to a second servlet.\nThe output of the second servlet can be sent to a third servlet, and\nso on. In this way, a chain of servlets is formed to complete a task.\n \nThe last servlet in the chain will be responsible for sending final\nresponse to client."},{"number":480,"categorie":"Java Tricky Questions","question":"Can you instantiate this class?","reponse":"public class A\n{\n    A a = new A();\n}\n \n \nNo, this class cannot be instantiated, since it will result in\nrecursively calling its constructor."},{"number":481,"categorie":"Java Tricky Questions","question":"Why Java does not support operator overloading?","reponse":"Java supports Method overloading but does not support operator\noverloading. It would make the design more complex by adding\noperator loading. Also it will make more complex compiler.\n \nOne more reason is that, it will reduce the performance of JVM by\noperator overloading, since JCM has to do extra work to find the\nreal meaning of overloaded operators at run time."},{"number":482,"categorie":"Java Tricky Questions","question":"Why String class is Immutable or Final in Java?","reponse":"Since String objects are cached in a String pool, it makes sense to\nmake the String immutable. The cached String literals are shared\nbetween multiple clients. And there is a possibility that one client's\naction may affect another client’s access to String pool.\n \nString is also used as a parameter in many Java classes. Eg. You can\npass hostname, port number as String while opening a network\nconnection. If any one can modify your copy of the String, it can\nchange the hostname. Due to this reason, it makes sense to make\nString final as soon as it is created."},{"number":483,"categorie":"Java Tricky Questions","question":"What is the difference between sendRedirect and forward methods?","reponse":"When you use sendRedirect method, it creates a new request. When\nyou use the forward method, it just forwards a request to a new\ntarget.\n \nIn case of sendRedirect, the previous request scope objects are not\navailable, because it creates a new request.\n \nIn case of forward method, the previous request scope objects are\navailable after forwarding.\n \nAlso the sendRedirect method is considered slower than the\nforward method."},{"number":484,"categorie":"Java Tricky Questions","question":"How do you fix your Serializable class, if it contains a member that is not serializable?","reponse":"If you want to make a class Serializable, but find that this class\ncontains members that are not Serializable, then you have to mark\nthose members as transient. This will ensure that this member is not\npersisted to a stream of bytes during Serialization.\n \nTherefore, Transient keyword of Java comes to help in this\nscenario."},{"number":485,"categorie":"Java Tricky Questions","question":"What is the use of run time polymorphism in Java?","reponse":"During the run time the behavior of an Object can change based on\nits run time state. Due to this run time polymorphism is introduced\nin Java. If you override a method in a child class, then you are\nproviding run time polymorphism. Nothing will happen at the\ncompile time. But at the run time, JVM decides which method will\nbe called based on the class of the Object."},{"number":486,"categorie":"Java Tricky Questions","question":"What are the rules of method overloading and method overriding in Java?","reponse":"When we want to overload a method, we need to make sure that the\nmethod name remains same. But method signature can vary in the\nnumber or datatype of arguments or in the order of arguments.\n \nWhen we want to override a method, we ensure that the method is\nnot throwing checked exceptions that are new or higher than those\ndeclared by the overridden method. Also we make sure that the\nmethod name, arguments and return type remain the same.\n \nAlso we cannot override Static and Final methods in Java."},{"number":487,"categorie":"Java Tricky Questions","question":"What is the difference between a class and an object in Java?","reponse":"A Class is a template or a blue print of an Object to be created. An\nObject is an instance of a Class. A Class defines the methods and\nmember variables. But an Object populates the values of the\nmember variables.\n \nTherefore a class is a blueprint that you use to create objects. An\nobject is an instance of a class – it is a concrete 'thing' that you\nmade using a specific class.\n \nMost of the OOPS concepts are valid only when an Object is\ncreated."},{"number":488,"categorie":"Java Tricky Questions","question":"Can we create an abstract class that extends another abstract class?","reponse":"Yes. An abstract class can extend another abstract class. It does not\nneed to define the methods of parent abstract class. Only the last\nnon-abstract class has to define the abstract methods of a parent\nabstract class."},{"number":489,"categorie":"Java Tricky Questions","question":"Why do you use Upcasting or Downcasting in Java ?","reponse":"When we want to cast a Sub class to Super class, we use Upcasting.\nIt is also known as widening. Upcasting is always allowed in Java.\n \nWhen we want to cast a Super class to Sub class, we use\nDowncasting. It is also known as narrowing.\n \nAt times, Downcasting can throw the ClassCastException if it fails\nthe type check."},{"number":490,"categorie":"Java Tricky Questions","question":"What is the reason to organize classes and interfaces in a package in Java?","reponse":"As the name suggests, a package contains a collection of classes. It\nhelps in setting the category of a file. Like- whether it is a Data\nAccess Object (DAO) or an API.\n \nIt helps in preventing the collision of Name space.\n \nAlso we can introduce access restriction by using package and the\nright modifiers on a class and its methods."},{"number":491,"categorie":"Java Tricky Questions","question":"What is information hiding in Java?","reponse":"Information hiding is OOPS concept. In Java you can use\nencapsulation to do Information hiding. An object can use the access\nmodifiers like-public, private, protected to hide its internal details\nfrom another object. This helps in decoupling the internal logic of\nan object from outside world.\n \nBy using Information hiding, an object can change its internal\nimplementation without impacting the outside calling client’s code"},{"number":492,"categorie":"Java Tricky Questions","question":"Why does Java provide default constructor?","reponse":"In Java all the interaction takes place between Object instances. To\ncreate an Object instance, JVM needs a constructor. Java does not\nenforce the rule on a programmer to define a default constructor for\nevery class.\n \nWhenever an object has to be created and programmer has not\nprovided a constructor, Java uses default constructor to create the\nobject. Default constructor also initializes member variables with\ntheir default values."},{"number":493,"categorie":"Java Tricky Questions","question":"What is the difference between super and this keywords in Java?","reponse":"We use super keyword to access the methods of the super class from\nchild class.\n \nWe use this keyword to access methods of the same class."},{"number":494,"categorie":"Java Tricky Questions","question":"What is the advantage of using Unicode characters in Java?","reponse":"Unicode characters have much larger number of characters in the\nspecification.\n \nThey also contain Asian and non-western European characters.\n \nMost of the modern technologies, websites and browsers support\nthese Unicode characters."},{"number":495,"categorie":"Java Tricky Questions","question":"Can you override an overloaded method in Java?","reponse":"Yes. Java allows to override an overloaded method, if that method\nis not a static or final method."},{"number":496,"categorie":"Java Tricky Questions","question":"How can we change the heap size of a JVM?","reponse":"Java provides the command line parameters to set the heap size for\nJVM.\nYou can specify the values in –Xms and –Xmx parameters. These\nparameters stand for initial and maximum heap size of JVM."},{"number":497,"categorie":"Java Tricky Questions","question":"Why should you define a default constructor in Java?","reponse":"In general, Java provides a default constructor with each class. But\nthere are certain cases when we want to define our own version of\ndefault constructor.\n \nWhen we want to construct an object with default values, we create\nour default constructor.\n \nAt times, we can mark the default constructor private. So that any\nother class cannot create an instance of our class. This technique is\ngenerally used in Singleton design pattern."},{"number":498,"categorie":"Java Tricky Questions","question":"How will you make an Object Immutable in Java?","reponse":"To make an object immutable follow these two rules. One, do not\nuse any setter methods that can change the fields of your class. Two,\nmake the fields final. By following these rules, the member\nvariables cannot be changed after initialization. This will ensure\nthat member variables of an Object do not change. And thus the\nObject will be considered Immutable."},{"number":499,"categorie":"Java Tricky Questions","question":"How can you prevent SQL Injection in Java Code?","reponse":"In Java, you can use PreparedStatement to prevent SQL injection. In\na PreparedStatement you can pass the precompiled SQL queries\nwith pre-defined parameters. This helps in checking the type of\nparameters to SQL queries. So it protects your code from SQL\ninjection attacks."},{"number":500,"categorie":"Java Tricky Questions","question":"Which two methods should be always implemented by HashMap key Object?","reponse":"Any object that we want to use as key for HashMap or in any other\nhash based collection data structure e.g. Hashtable, or\nConcurrentHashMap must implement equals() and hashCode()\nmethod."},{"number":501,"categorie":"Java Tricky Questions","question":"Why an Object used as Key in HashMap should be Immutable?","reponse":"The Key object should be immutable so that hashCode() method \nalways return the same value for that object.\n \nThe Hashcode returned by hashCode() method depends on values of\nmember variables of an object. If an object is mutable, then the\nmember variables can change. Once the member variables change,\nthe Hashcode changes. If the same object returns different hash code\nat different times, then it is not reliable to be used in the HashMap.\n \nLet say, when you insert the object, the Hashcode is X, the\nHashMap will store it in bucket X. But when you search for it the\nHashcode is Y, then HashMap will look for the object in bucket Y.\nSo you are not getting what you stored.\n \nTo solve this, a key object should be immutable.\n \nAlthough, the compiler does not enforce this rule, a good\nprogrammer always remembers this rule."},{"number":502,"categorie":"Java Tricky Questions","question":"How can we share an object between multiple threads?","reponse":"There are many ways to share same object between multiple\nthreads. You can use a BlockingQueue to pass an object from one\nthread to another thread.\n \nYou can also use Exchanger class for this purpose. An Exchanger is\na bidirectional form of a SynchronousQueue in Java. You can use it\nto swap the objects as well."},{"number":503,"categorie":"Java Tricky Questions","question":"How can you determine if your program has a deadlock?","reponse":"If we suspect that our application is stuck due to a Deadlock, then\nwe just take a thread dump by using the command specific to\nenvironment in which your application is running. Eg. In Linux you\ncan use command kill -3.\n \nIn case of deadlock, you will see in thread dump the current status\nand stack trace of threads in the JVM, and one or more of them will\nbe stuck with message deadlock.\n \nAlso you can do this programmatically by using the ThreadMXBean\nclass that ships with the JDK.\n \nIf you don't need programmatic detection you can do this via\nJConsole. On the thread tab there is a \"detect deadlock\" button.\n Mixed Questions"},{"number":504,"categorie":"Mixed Questions","question":"What are Wrapper classes in Java?","reponse":"Java has concept of Wrapper classes to allow primitive types to be\naccessed as objects. Primitive types like boolean, int, double, float\netc. have corresponding Wrappers classes – Boolean, Integer,\nDouble, Float etc.\n \nMany of these Wrapper classes are in java.lang package.\n \nJava 5.0 has launched the concept of Autoboxing and Unboxing in\nJava for Wrapper classes.\n \nE.g.\n \npublic class WrapperTest{ \npublic static void main(String args[]){ \n//Converting int into Integer \nint count=50; \nInteger i=Integer.valueOf(count);//converting int into Integer \nInteger j=a;//autoboxing, now compiler will write\nInteger.valueOf(count) internally \n \nSystem.out.println(count+\" \"+i+\" \"+j); \n}}"},{"number":505,"categorie":"Mixed Questions","question":"What is the purpose of native method in Java?","reponse":"The native keyword is used for applying to a method to indicate that\nthe method is implemented in native code using JNI(Java Native\nInterface).\n \nTherefore, native methods allow Java Developer to directly access\nplatform specific APIs.\n \nOften, native methods are linked to native library."},{"number":506,"categorie":"Mixed Questions","question":"What is System class?","reponse":"System.class is a final class provided by java.lang package. It\ncontains several useful class fields and methods.\n \nThe purpose of System class is to provide access to system\nresources."},{"number":507,"categorie":"Mixed Questions","question":"What is System, out and println in System.out.println method call?","reponse":"System is a final class provided by java.lang package.\n \nout refers to PrintStream class and a static member of System class.\n \n    println is a method of PrintStream class."},{"number":508,"categorie":"Mixed Questions","question":"What is the other name of Shallow Copy in Java?","reponse":"Object Cloning. A Shallow Copy just copies the values of references in a\nClass."},{"number":509,"categorie":"Mixed Questions","question":"What is the difference between Shallow Copy and Deep Copy in Java?","reponse":"A Shallow copy just copies the values of the references in the class.\nA Deep copy copies the values of the objects as well."},{"number":510,"categorie":"Mixed Questions","question":"What is a Singleton class?","reponse":"A Singleton class in Java has maximum one instance of the class\npresent in JVM, all the time. The constructor of this class is written\nin such a way that it never creates more than one object of same\nclass."},{"number":511,"categorie":"Mixed Questions","question":"What is the difference between Singleton class and Static class?","reponse":"A static class in Java has only static methods. It is a container of\nfunctions. It is created based on procedural programming design.\n \nSingleton class is a pattern in Object Oriented Design. A Singleton\nclass has only one instance of an object in JVM. This pattern is\nimplemented in such a way that there is always only one instance of\nthat class present in JVM.\n JSP"},{"number":512,"categorie":"JSP","question":"What are the implicit objects in JSP?","reponse":"JSP has following implicit objects:\n \n1. Request\n2. Response\n3. Application\n4. Exception\n5. Page\n6. Config\n7. Session"},{"number":513,"categorie":"JSP","question":"How will you extend JSP code?","reponse":"We can extend JSP code by using Tag libraries and Custom actions."},{"number":514,"categorie":"JSP","question":"How will you handle runtime exceptions in JSP?","reponse":"We use Errorpage attribute in JSP to catch runtime exceptions. This\nattribute forwards user request to the error page automatically."},{"number":515,"categorie":"JSP","question":"How will you prevent multiple submits of a page that come by clicking refresh button multiple times?","reponse":"We can use Post Redirect Get (PRG) pattern to solve the issue of\nmultiple submission of same data. It works as follows:\n \nFirst time when a user submits a form to server by POST or GET\nmethod, then we update the state in application database.\n \nThen we send a redirect response to send reply to client.\n \nThen we load a view by using GET command. There is no data is\nsent in this. Since this a new JSP page, it is safe from multiple\nsubmits. The code that processes the request is idempotent. So it\ndoes not do same action twice for same request."},{"number":516,"categorie":"JSP","question":"How will you implement a thread safe JSP page?","reponse":"We can use SingleThreadModel Interface to implement a thread safe\nJSP page.\n \nWe can also add <%@page isThreadSafe=”false” %> directive in\nJSP page to make it thread safe."},{"number":517,"categorie":"JSP","question":"How will you include a static file in a JSP page?","reponse":"We can use include directive of JSP to include a Static page in JSP.\nIn this approach, we use translation phase to include a static page.\nWe have to specify the URL of the resource to be included as file\nattribute in this directive.\n \n \nE.g. <%@ include file=\"footer.html\" %>"},{"number":518,"categorie":"JSP","question":"What are the lifecycle methods of a JSP?","reponse":"A JSP has following lifecycle methods:\n \n1. jspInit(): This method is invoked when the JSP is called\nfor the first time. We can do initial setup for servicing a\nrequest in this method.\n \n2. _jspService(): This method is used to serve every request\nof the JSP.\n \n3. jspDestroy(): Once we remove a JSP from the container,\nwe call this method. It is used for cleanup of resources like\nDatabase connections etc."},{"number":519,"categorie":"JSP","question":"What are the advantages of using JSP in web architecture?","reponse":"We get following advantages by using JSP in web architecture:\n \n1. Performance: JSP provides very good performance due to\ntheir design of using same code to service multiple\nrequests.\n \n2. Fast: Since JSP is pre-compiled, server can serve the\npages very fast.\n \n3. Extendable: JSP is based on Java Servlets. This helps in\nextending JSP architecture with other Java technologies\nlike JDBC, JMS, JNDI etc.\n \n4. Design: It is easier to design user interface with JSP, since\nit is very close to HTML. UI designers can create a JSP\nwith mock data and developers can later provide\nimplementation of dynamic data."},{"number":520,"categorie":"JSP","question":"What is the advantage of JSP over Javascript?","reponse":"In JSP we can write Java code seamlessly. It allows for writing\ncode that can interact with the rest of the application.\n \nJavascript code is mostly executed at client side. This limits the\ntasks that can be done in Javascript code. We cannot connect to\ndatabase server from Javascript at the client side."},{"number":521,"categorie":"JSP","question":"What is the Lifecycle of JSP?","reponse":"JSP has following lifecycle stages:\n \n1. Compilation: When a request is made for a JSP, the\ncorresponding JSP is converted into Servlet and compiled.\nIf there is already a compiled form of JSP and there is not\nchange in JSP page since last compilation, this stage does\nnot do anything.\n \n2. Initialization: In this stage, jspInit() method is called to\ninitialize any data or code that will be later used multiple\ntimes in _jspService() method.\n \n \n3. Service: In this stage, with each request to JSP,\n_jspService() method is called to service the request. This\nis the core logic of JSP that generates response for request.\n \n4. Destroy: In this stage, JSP is removed from the\ncontainer/server. Just before removal, this stage performs\nthe cleanup of any resources held by JSP."},{"number":522,"categorie":"JSP","question":"What is a JSP expression?","reponse":"A JSP expression is an element of a JSP page that is used to\nevaluate a Java expression and convert into a String. This String is\nreplaced into the locations wherever the expression occurs in JSP\npage.\n \nE.g. <%= expression =%>"},{"number":523,"categorie":"JSP","question":"What are the different types of directive tags in JSP?","reponse":"JSP has following directive tags:\n \n1. Page: This directive is used for page related attributes. It\ncan be put anywhere in the JSP page. But by convention we\nput it on the top of the page.\n \nE.g.\n<%@ page attribute=\"value\" %>\n \n2. Taglib: We can create custom tags in JSP and use these by\ntaglib directive in a JSP page.\n \nE.g. \n<%@ taglib uri=“abc.html” prefix=“tag_prefix” >\n \n3. Include: We use include directive to read a file and merge\nits content with the JSP page. This is done during\ncompilation stage.\n \n<%@ include file=\"relative url\" >"},{"number":524,"categorie":"JSP","question":"What is session attribute in JSP?","reponse":"Session attribute in JSP is used for HTTP session mechanism. If we\ndo not want to use HTTP session in JSP, then we set this attribute to\nfalse. If it is set to true, we can use built in session object in JSP."},{"number":525,"categorie":"JSP","question":"What are the different scopes of a JSP object?","reponse":"A JSP object, implicit or explicit, can have one of the following\nscopes:\n \n1. Page: In this scope,  the object is accessible from the page\nwhere it was created. Important point here is that when a\nuser refreshes the page, the objects of this scope also get\ncreated again.\n \n2. Request: In request scope, the object is accessible to the\nHTTP request that created this object.\n \n3. Session: In this scope, the object is available throughout\nthe same HTTP session.\n \n4. Application: This is the widest scope. The object is\navailable throughout the application in which JSP was\ncreated."},{"number":526,"categorie":"JSP","question":"What is pageContext in JSP?","reponse":"In JSP, pageContext is an implicit object. This is used for storing\nand accessing all the page scope objects of JSP.\n \nIt is an instance of the PageContext class from javax.servlet.jsp\npackage."},{"number":527,"categorie":"JSP","question":"What is the use of jsp:useBean in JSP?","reponse":"We use jsp:useBean to invoke the methods of a Java Bean class.\nThe Java Bean class has some data and setter/getters to access the\ndata.\n \nWith this tag, container will try to locate the bean. If bean is not\nalready loaded then it will create an instance of a bean and load it.\nLater this bean can be used in expressions or JSP code."},{"number":528,"categorie":"JSP","question":"What is difference between include Directive and include Action of JSP?","reponse":"Some of the main differences between include Directive and\ninclude Action are as follows:\n \n1. Include directive is called at translation phase to include\ncontent in JSP. Include Action is executed during runtime\nof JSP.\n \n2. It is not possible to pass parameters to include directive.\nInclude action can accept parameters by jsp:param tag.\n \n3. Include directive is just copying of content from another\nfile to JSP code and then it goes through compilation.\nInclude action will dynamically process the resource being\ncalled and then include it in the JSP page."},{"number":529,"categorie":"JSP","question":"How will you use other Java files of your application in JSP code?","reponse":"We can use import tag to import a Java file in JSP code. Once a file\nis imported, it can be used by JSP code. It is a very convenient\nmethod to use Java classes in JSP code.\n \nFor better organization of Java code, we should create a package of\nclasses that we are planning to use in JSP code."},{"number":530,"categorie":"JSP","question":"How will you use an existing class and extend it to use in the JSP?","reponse":"We can use extends attribute in include tag to use an existing class\nand extend it in the current JSP.\n \nE.g.\n \n<%@ include page extends=“parent_class” %>"},{"number":531,"categorie":"JSP","question":"Why _jspService method starts with _ symbol in JSP?","reponse":"All the code that we write in a JSP goes into _jspService method\nduring translation phase. We cannot override this method. Where as\nother lifecycle methods jspInit() and jspDestroy() can be\noverridden.\n \nIt appears that container uses _ symbol to distinguish the method that\ncannot be overridden by client code."},{"number":532,"categorie":"JSP","question":"Why do we use tag library in JSP?","reponse":"At times we want to create a UI framework with custom tags. In\nsuch a scenario, taglib is a very good feature of JSP. With taglib we\ncan create tags that can provide custom features.\n \nTaglib is also a nice way to communicate with UI designers who\ncan use custom tags in the html without going into the details of how\nthe code is implemented.\n \nAnother benefit of taglib is reusability of the code. This promotes\nwriting code only once and using is multiple times."},{"number":533,"categorie":"JSP","question":"What is the different type of tag library groups in JSTL?","reponse":"JSTL stands for JavaServer Pages Standard Tag Library. In JSTL,\nwe have a collection of JSP tags that can be used in different\nscenarios. There are following main groups of tags in JSTL:\n \n1. Core tags\n2. SQL tags\n3. Formatting tags\n4. XML tags\n5. JSTL Functions"},{"number":534,"categorie":"JSP","question":"How will you pass information from one JSP to another JSP?","reponse":"We can pass information from one JSP to another by using implicit\nobjects. If different JSP are called in same session, we can use\nsession object to pass information from one JSP to another.\n \nIf we want to pass information from one JSP to another JSP\nincluded in the main JSP, then we can use jsp:param to pass this\ninformation."},{"number":535,"categorie":"JSP","question":"How will you call a stored procedure from JSP?","reponse":"JSP allows running Java code from a .jsp file. We can call a stored\nprocedure by using JDBC code.\n \nWe can call a CallableStatement from JSP code to invoke a stored\nprocedure.\n \nIf we are using Spring framework, then we can use JdbcTemplate\nclass to invoke stored procedure from a JSP."},{"number":536,"categorie":"JSP","question":"Can we override _jspService() method in JSP?","reponse":"No, JSP specification does not allow overriding of _jspService\nmethod in JSP. We can override other methods like jspInit() and\njspDestroy()."},{"number":537,"categorie":"JSP","question":"What is a directive in JSP?","reponse":"JSP directive is a mechanism to pass message to JSP container. JSP\ndirective does not produce an output to the page. But it\ncommunicates with JSP container.\n \nE.g. <%@include ..%> directive is  used for telling JSP container\nto include the content of another file during translation of JSP.\n \nThere can be zero or more attributes in a directive to pass\nadditional information to JSP container.\n \nSome of the important directives in JSP are: page, include and\ntaglib."},{"number":538,"categorie":"JSP","question":"How will you implement Session tracking in JSP?","reponse":"We can use different mechanisms to implement Session tracking\nJSP. Some these mechanisms are as follows:\n \n1. Cookies: We can use cookie to set session information and\npass it to web client. In subsequent requests we can use the\ninformation in cookie to track session.\n \n2. Hidden Form Field: We can send session id in a hidden\nfield in HTML form. By using this we can track session.\n \n3. Session object: We can use the built in session object to\ntrack session in JSP.\n \n4. URL Rewriting: We can also add session id at the end of\na URL.\n \nLike- www.abcserver.com?sessionid=1234"},{"number":539,"categorie":"JSP","question":"How do you debug code in JSP?","reponse":"In simplest form we can write logger statements or\nSystem.out.println() statements to write messages to log files. When\nwe call a JSP, the log messages get written to logs. With useful\ninformation getting logged we can easily debug the code.\n \nAnother option in debugging is to link JSP container with an IDE.\nOnce we link IDE debugger to JSP Engine, we can use standard\noperations of debugging like breakpoint, step through etc."},{"number":540,"categorie":"JSP","question":"How will you implement error page in JSP?","reponse":"To implement an error-handling page in JSP, we first create a JSP\nwith error page handling information. In most of the cases we\ngracefully handle error by giving a user-friendly message like\n“Sorry! There is system error. Please try again by refreshing page.”\n \nIn this error page, we show user-friendly message to user, but we\nalso log important information like stack trace to our application log\nfile.\n \nWe have to add parameter isErrorPage=true in page directive of this\npage. This tells to JSP container that this is our error page.\n \n<%@page isErrorPage=”true” %>\n \nNow we can use this error page in other JSP where we want to\nhandle error. In case of an error or exception, these JSP will direct\nit to errorPage.\n \n<% page errorPage=”ErrorPage.jsp” %>"},{"number":541,"categorie":"JSP","question":"How will you send XML data from a JSP?","reponse":"In general, JSP is used to pass HTML data to web browser. If we\nwant to send data in XML format, we can easily do it by setting\ncontentType=”text/xml”  in page directive.\n \nE.g. <%@page contentType=”text/xml” %>"},{"number":542,"categorie":"JSP","question":"What happens when we request for a JSP page from web browser?","reponse":"When a user calls JSP page from web browser, the request first\ncomes to web server. Web server checks for .jsp extension of page\nand passes the request to JSP container like Tomcat.\n \nThe JSP container checks whether it has precompiled JSP class or\nnot. If this is the first time this JSP is called, then JSP container will\ntranslate JSP into a servlet and compiles it.\n \nAfter compiling, JSP code if loaded in memory and JSP container\nwill call jspInit() method and _jspService() methods.\n \nThe _jspService() method will create the output that will be sent by\nJSP container to client browser."},{"number":543,"categorie":"JSP","question":"How will you implement Auto Refresh of page in JSP?","reponse":"We can use setIntHeader() method to set the refresh frequency with\nwhich we want to auto-refresh a JSP page.\n \nWe can send key “Refresh” with the time in seconds for auto refresh\nof the JSP page.\n \nE.g. response.setIntHeader(“Refresh”,10)"},{"number":544,"categorie":"JSP","question":"What are the important status codes in HTTP?","reponse":"Every HTTP request comes back with a status code from the server.\nThe important status codes in HTTP are as follows:\n \n1. 200: It means the request is successful.\n2. 400: It means the request was bad.\n3. 401: It means request was not authorized.\n4. 404: It means the resource requested was not found.\n5. 503: It means the service is not available."},{"number":545,"categorie":"JSP","question":"What is the meaning of Accept attribute in HTTP header?","reponse":"In HTTP header, Accept attribute is used to specify the MIME types\nthat a HTTP client or browser can handle. MIME type is the\nidentifier for specifying the type of file/data that we are planning to\npass over the internet."},{"number":546,"categorie":"JSP","question":"What is the difference between Expression and Scriptlet in JSP?","reponse":"We use Expression in a JSP to return a value and display it at a\nspecific location. It is generally used for dynamically print\ninformation like- time, counter etc in a HTML code.\n \nScriptlet is for writing Java code in a JSP. We can define variable,\nmethods etc in a Scriptlet. A Scriptlet can handle much more\ncomplex code and can be also reused."},{"number":547,"categorie":"JSP","question":"How will you delete a Cookie in JSP?","reponse":"We can use following options to delete a Cookie in JSP:\n \n \n1. setMaxAge(): we can set the maximum age of a cookie.\nAfter this time period, Cookie will expire and will be\ndeleted.\n \n2. Header: We can also set the expiry time in header of\nresponse. Respone.setHeader(). This will also expire the\ncookie after specified time period."},{"number":548,"categorie":"JSP","question":"How will you use a Cookie in JSP?","reponse":"We can use a Cookie in JSP by performing following steps:\n \nFirst we create a Cookie object. We set the name and value of the\ncookie to be created.\n \nWe set the expiry time of the Cookie by setting the maximum age.\nWe can use setMaxAge() method for this.\n \nFinally, we can send the cookie in a HTTP Response by sending it\nin HTTP header. In this way cookie goes to client browser and gets\nstored there till the maximum age is not achieved.\n \nOnce a Cookie is set in the client browser, we can call getCookies()\nmethod to get the list of all the cookies set in Client. We iterate\nthrough the list of all the cookies and get the value of the cookie that\nwas set in earlier request.\n \nIn this way we can use Cookie to set some information at client side\nand retrieve its value."},{"number":549,"categorie":"JSP","question":"What is the main difference between a Session and Cookie in JSP?","reponse":"A Session is always stored at the Server side. In JSP, session is a\nbuilt-in object in JSP container.\n \nA Cookie is always stored at the client side.\n \nWe can use both the methods for Session tracking. But Cookie\nmethod needs permission from user for storing cookie at the client\nlocation."},{"number":550,"categorie":"JSP","question":"How will you prevent creation of session in JSP?","reponse":"We can simply set the session attribute as false in page directive to\nprevent creation of session object.\n \nE.g. <% @page session=”false” %>"},{"number":551,"categorie":"JSP","question":"What is an output comment in JSP?","reponse":"We can write output in JSP in such a way that it becomes a comment\nin HTML code. This comment will not be visible in the web\nbrowser. But when we view page source to see HTML, we can see\noutput comment.\n \nAn HTML comment is of following format:\n \n<!-- comment -->\n \nIf we output comment in above format, it will be visible to client."},{"number":552,"categorie":"JSP","question":"How will you prevent caching of HTML output by web browser in JSP?","reponse":"We can use set the header in response object for Cache-Control to\nspecify no caching.\n \nSample code is as follows:\n \nresponse.setHeader(“Cache-Control”, “no-store”);\nresponse.setDateHeader(“Expires”,”0”);"},{"number":553,"categorie":"JSP","question":"How will you redirect request to another page in browser in JSP code?","reponse":"We can use sendRedirect() method in JSP to redirect the request to\nanother location or page.\n \nIn this case the request will not come back to server. It will redirect\nin the browser itself.\n \nSample code is as follows:\n \n<% response.sendRedirect(URL); %>"},{"number":554,"categorie":"JSP","question":"What is the difference between sendRedirect and forward in a JSP?","reponse":"Both forward and sendRedirect are mechanisms of sending a client\nto another page. The main difference between these two are as\nfollows:\n \n1. In forward, the processing takes place at server side. In\ncase of sendRedirect() the processing takes place the\nclient side.\n \n2. In forward, the request is transferred to another resource\nwithin same server. In case of sendRedirect the request can\nbe transferred to resource on some other server.\n \n3. In forward only one request call is consumed. In case of\nsendRedirect two request response calls are created and\nconsumed.\n \n4. The forward is declared in RequestDispatcher interface.\nWhere as sendRedirect is declared in\nHttpServletResponse object."},{"number":555,"categorie":"JSP","question":"What is the use of config implicit object in JSP?","reponse":"In JSP, config object is of type ServletConfig. This object is created\nby Servlet Container for each JSP page. It is used for setting\ninitialization parameters for a specific JSP page."},{"number":556,"categorie":"JSP","question":"What is the difference between init-param and context-param?","reponse":"We can specify both init-param and context-param in web.xml file.\n \nWe use init-param to specify the parameters that are specific to a\nservlet or jsp. This information is confined to the scope of that JSP.\n \nWe use context-param to specify the parameters for overall\napplication scope. This information does not change easily. It can\nbe used by all the JSP/Servlet in that Container."},{"number":557,"categorie":"JSP","question":"What is the purpose of RequestDispatcher?","reponse":"We use RequestDispatcher interface to forward requests to other\nresources like HTML, JSP etc.\n \nIt can also be used to include the content of another page in a JSP.\n \nIt has two methods: forward and include.\n \nWe have to first get the RequestDispatcher object from the container\nand then we can call include or forward method on this object."},{"number":558,"categorie":"JSP","question":"How can be read data from a Form in a JSP?","reponse":"There is a built-in request object in a JSP that provides methods to\nread Form data. Some of the methods are as follows::\n \n \n1. getParameterNames(): This method returns the list of all\nthe parameters in the Form.\n \n2. getParameter(): We call this method to get the value of\nparameter set in the Form. It returns null if the parameter is\nnot found.\n \n3. getParameterValues(): If a Parameter is mentioned\nmultiple times in a Form, we use\nrequest.getParameterValues() method to get all the values.\nThis method returns an array of String values.\n \n \n4. getParameterMap(): This method returns the map of all\nthe Parameters in Form."},{"number":559,"categorie":"JSP","question":"What is a filter in JSP?","reponse":"We can define filters in JSP to intercept requests from a client or to\nchange response from a server.\n \nFilter is a Java class that is defined in the deployment descriptor of\nweb.xml of an application. The JSP container reads filter from\nweb.xml and applies a filter as per the URL pattern associated with\nthe filter.\n \nJSP Engine loads all the filters in when we start the server."},{"number":560,"categorie":"JSP","question":"How can you upload a large file in JSP?","reponse":"To upload a file by JSP we can use <input type=”file”> in the Form\ndata being passed from HTML.\n \nIf the file is very large in size, we can set enctype=multipart/form-\ndata.\n \nWe have to use POST method in the Form to send a file.\n \nOnce the request is received, we can implement the logic to read\nmulitpart data in doPost() method of JSP. There are methods in JSP\nframework to read large files via this method."},{"number":561,"categorie":"JSP","question":"In which scenario, Container initializes multiple JSP/Servlet objects?","reponse":"To initialize multiple JSP objects, we have to specify same Servlet\nobject multiple times in web.xml.\n \nThis indicates to JSP container to initialize separate JSP/Servlet\nobject for each element. Each of the Servlet instance will have its\nown ServletConfig object and parameters.\n \n Java Design Patterns"},{"number":562,"categorie":"Java Design Patterns","question":"When will you use Strategy Design Pattern in Java?","reponse":"Strategy pattern is very useful for implementing a family of\nalgorithms. It is a behavioral design pattern.\n \nWith Strategy pattern we can select the algorithm at runtime. We can\nuse it to select the sorting strategy for data. We can use it to save\nfiles in different formats like- .txt, .csv, .jpg etc.\n \nIn Strategy pattern we create an abstraction, which is an interface\nthrough which clients interact with our system. Behind the\nabstraction we create multiple implementation of same interface\nwith different algorithms.\n \nFor a client, at runtime we can vary the algorithm based on the type\nof request we have received.\n \nSo we use Strategy pattern to hide the algorithm implementation\ndetails from client.\n \nIn Java Collections.sort() method uses strategy design pattern."},{"number":563,"categorie":"Java Design Patterns","question":"What is Observer design pattern?","reponse":"In Observer design pattern, there is a Subject that maintains the list\nof Observers that are waiting for any update on the Subject. Once\nthere is an update in Subject it notifies all the observers for the\nchange.\n \nE.g. In real life, students are waiting for the result of their test. Here\nstudents are the observers and test is the subject. Once the result of\ntest is known, testing organization notifies all the students about\ntheir result.\n \nThe most popular use of Observer pattern is in Model View\nController (MVC) architectural pattern.\n \nMain issue with Observer pattern is that it can cause memory leaks.\nThe subject holds a strong reference to observers. If observers are\nnot de-registered in time, it can lead to memory leak."},{"number":564,"categorie":"Java Design Patterns","question":"What are the examples of Observer design pattern in JDK?","reponse":"In JDK there are many places where Observer design pattern is\nused. Some of these are as follows:\n \n \n1. java.util.Observer, java.util.Observable\n \n2. javax.servlet.http.HttpSessionAttributeListener\n \n3. javax.servlet.http.HttpSessionBindingListener\n \n4. All implementations of java.util.EventListener, and also in\nSwing packages\n \n5. javax.faces.event.PhaseListener"},{"number":565,"categorie":"Java Design Patterns","question":"How Strategy design pattern is different from State design pattern in Java?","reponse":"State design pattern is a behavioral design pattern that is use for\ndefining the state machine for an object. Each state of an object is\ndefined in a child class of State class. When different actions are\ntaken on an Object, it can change its state.\n \nStrategy pattern is also a behavioral pattern, but it is mainly used\nfor defining multiple algorithms. With same action of a client, the\nalgorithm to be used can change.\n \nSome people consider State pattern similar to Strategy pattern,\nsince an Object changes its Strategy with different method\ninvocations. But the main difference is that in State pattern internal\nstate of an Object is one of the determining factors for selecting the\nStrategy for change of state.\n \nWhere as in Strategy pattern, client can pass some external\nparameter in input during method invocation that determines the\nstrategy to be used at run time.\n \nTherefore State pattern is based on the Object’s internal state,\nwhere as Strategy pattern is based on Client’s invocation.\n \nState pattern is very useful in increasing the maintainability of the\ncode in a large code-base."},{"number":566,"categorie":"Java Design Patterns","question":"Can you explain Decorator design pattern with an example in Java?","reponse":"Some people call Decorator pattern as Wrapper pattern as well. It\nis used to add the behavior to an object, without changing the\nbehavior of other objects of same class.\n \nOne of the very good uses of Decorator pattern is in java.io\npackage. We can have a FileInputStream to handle a File. To add\nBuffering behavior we can decorate FileInputStream  with\nBufferedInputStream. To add the gzip behavior BufferedInputStream\nwe can decorate it with GzipInputStream. To add serialization\nbehavior to GzipInputStream, we can decorate it with\nObjectInputStream.\n \nE.g.\nOpen a FileInputStream:\n \nFileInputStream fis = new FileInputStream(\"/myfile.gz\");\n \nAdd buffering:\n \nBufferedInputStream bis = new BufferedInputStream(fis);\n \nAdd Gzip:\n \nGzipInputStream gis = new GzipInputStream(bis);\n \nAdd Serialization:\n \nObjectInputStream ois = new ObjectInputStream(gis);\n \n \nSo with each step we have decorated the FileInputStream with\nadditional behavior."},{"number":567,"categorie":"Java Design Patterns","question":"What is a good scenario for using Composite design Pattern in Java?","reponse":"Some of the good scenarios where Composite design pattern can be\nused are as follows:\n \nTree Structure: The most common use of Composite design pattern\nis Tree structure. If you want to represent data in a Tree data\nstructure, Composite pattern can be used.\n \nE.g. In an Organization, to a Manager has Employees. But Manager\nis also an Employee. If we start from CEO level, there is one big\ntree for the whole organization structure. Under that big tree there\nare many sub-trees. This can be easily represented with Composite\ndesign pattern.\n \nRecursion: Another use of Composite design pattern is Recursion. If\nwe have a Recursion based algorithm, we need data to be passed to\nalgorithm in a data structure that treats individual objects and\ncompositions at each level of recursion uniformly.\nE.g.  To implement a recursive Polynomial Solving algorithm, we\ncan use Composite design pattern to store the intermediate results.\n \nGraphics: Another good use of Composite design pattern is in\nGraphics. We can group shapes inside a composite and make\nhigher-level groups of smaller groups of shapes to complete the\ngraphics to be displayed on screen."},{"number":568,"categorie":"Java Design Patterns","question":"Have you used Singleton design pattern in your Java project?","reponse":"Yes. Singleton is one of the most popular design patterns in\nenterprise level Java applications. Almost in every project we see\nsome implementation of Singleton.\n \nWith Singleton pattern we can be sure that there is only one instance\nof a class at any time in the application.\n \nThis helps in storing properties that have to be used in the\napplication in a unique location."},{"number":569,"categorie":"Java Design Patterns","question":"What are the main uses of Singleton design pattern in Java project?","reponse":"Some of the main uses of Singleton design pattern in Java are as\nfollows:\n \n1. Runtime: In JDK, java.lang.Runtime is a singleton-based class. There\nis only one instance of Runtime in an application. This is the only\nclass that interfaces with the environment/machine in which Java\nprocess is running.\n \n2. Enum: In Java, enum construct is also based on Singleton pattern.\nEnum values can be accessed globally in same way by all classes.\n \n3. Properties: In an application it makes sense to keep only one copy of\nthe properties that all classes can access. This can be achieved by\nmaking properties class Singleton so that every class gets same copy\nof properties.\n \n4. Spring: In Spring framework, all the beans are by default Singleton\nper container. So there is only one instance of bean in a Spring IoC\ncontainer. But Spring also provides options to make the scope of a\nbean prototype in a container."},{"number":570,"categorie":"Java Design Patterns","question":"Why java.lang.Runtime is a Singleton in Java?","reponse":"In Java, java.lang.Runtime is implemented on Singleton design\npattern.\n \nRuntime is the class that acts as an interface with the environment in\nwhich Java process is running. Runtime contains methods that can\ninteract with the environment.\n \nLike- totalmemory() method gives the total memory in JVM.\nmaxMemory() method gives the maximum memory that JVM can\nuse.\n \nThere is an exit() method to exit the Java process. We do not want\nmultiple objects in JVM to have exit() method.\n \nSimilarly there is gc() method that can run the Garbage Collector.\nWith only one copy of gc() method, we can ensure that no other\nobject can run the Garbage Collector when one instance of GC is\nalready running.\n \nDue to all these reasons there is only one copy of Runtime in Java.\nTo ensure single copy of Runtime, it is implemented as a Singleton\nin Java."},{"number":571,"categorie":"Java Design Patterns","question":"What is the way to implement a thread-safe Singleton design pattern in Java?","reponse":"In Java there are many options to implement a thread-safe Singleton\npattern. Some of these are as follows:\n \n1. Double Checked Locking: This is the most popular method\nto implement Singleton in Java. It is based on Lazy\nInitialization. In this we first check the criteria for locking\nbefore acquiring a lock to create an object. In Java we use\nit with volatile keyword.\n \nSample code:\n \nclass DoubleCheckSingleton {\n    private volatile HelloSingleton helloSingleton; // Use Volatile\n \n    public HelloSingleton getHelloSingleton() {\n        HelloSingleton result = helloSingleton;\n        if (result == null) {\n            synchronized(this) { // Synchronize for thread safety\n                result = helloSingleton;\n                if (result == null) {\n    result = new HelloSingleton();\n                    helloSingleton = result;\n                }\n            }\n        }\n        return result;\n    }\n \n}\n 2. Bill Pugh Singleton: We can also use the method by Bill\nPugh for implementing Singleton in Java. In this we use an\nInner Static class to create the Singleton instance.\n \nSample code:\n \npublic class SingletonBillPugh {\n \n    // Inner class that holds instance\n    private static class InnerSingleton{\n        private static final SingletonBillPugh INSTANCE = new\nSingletonBillPugh();\n    }\n \n     // Private constructor\n    private SingletonBillPugh(){}\n \npublic static SingletonBillPugh getInstance(){\n        return InnerSingleton.INSTANCE;\n    }\n}\n \n \nWhen first time SingletonBillPugh is loaded in memory,\nInnerSingleton is not loaded. Only when getInstance() method is\ncalled, InnerSingleton class is loaded and an Instance is created.\n \n3. Enum: We can also use Java enum to create thread-safe\nimplementation. Java enum values are accessible globally\nso these can be used as a Singleton.\n \nSample Code:\n \npublic enum SingletonEnum {\n \n    INSTANCE;\n     public static void doImplementation(){\n     …..\n    }\n}"},{"number":572,"categorie":"Java Design Patterns","question":"What are the examples of Singleton design pattern in JDK?","reponse":"In JDK there are many places where Singleton design pattern is\nused. Some of these are as follows:\n \n1. java.lang.Runtime.getRuntime(): This method gives\nRuntime class that has only one instance in a JVM.\n \njava.lang.System.getSecurityManager(): This method\nreturns a SecurityManager for the current platform.\n \njava.awt.Desktop.getDesktop()"},{"number":573,"categorie":"Java Design Patterns","question":"What is Template Method design pattern in Java?","reponse":"It is a behavioral design pattern. We can use it to create an outline\nfor an algorithm or a complex operation. We first create the skeleton\nof a program. Then we delegate the steps of the operation to\nsubclasses. The subclasses can redefine the inner implementation of\neach step.\n \nE.g. While designing a Game in Java, we can implement it as an\nalgorithm with Template Method pattern. Each step in the game can\nbe deferred to subclasses responsible for handling that step.\n \nLet say we implement Monopoly game in Java. We can create\nmethods like initializeGame(), makeMove(), endGame() etc. Each\nof these methods can be handled in subclasses in an independent\nmanner.\n \nWe can use same algorithm for Chess game with same set of\nabstract methods. The subclass for Chess game can provide the\nconcrete implementation of methods like initializeGame(),\nmakeMove(), endGame() etc.\n \nTemplate Method pattern is very useful in providing customizable\nclass to users. We can create the core class with a high level\nimplementation. And our users can customize our core class in their\ncustom subclasses."},{"number":574,"categorie":"Java Design Patterns","question":"What are the examples of Template method design pattern in JDK?","reponse":"In JDK there are many places where Template method design\npattern is used. Some of these are as follows:\n \n \n1. In Java Abstract Collection classes like\njava.util.AbstractList, java.util.AbstractSet and\njava.util.AbstractMap implement a template for their\ncorresponding Collection.\n \n2. javax.servlet.http.HttpServlet: In the HttpServlet class all\nthe doGet(), doPost() etc. methods send a HTTP 405\n\"Method Not Allowed\" error to the response. This error\nresponse is like a Template that can be further customized\nfor each of these methods.\n \n3. In java.io package there are Stream and Writer classes like\njava.io.InputStream, java.io.OutputStream, java.io.Reader\nand java.io.Writer that provide non-abstract methods.\nThese methods are implementation of Template method\ndesign pattern."},{"number":575,"categorie":"Java Design Patterns","question":"Can you tell some examples of Factory Method design pattern implementation in Java?","reponse":"Factory Method pattern is a creational design pattern. A Factory is\nan object that is used to create more objects.\n \nIn general, a Factory object has methods that can be used to create a\ntype of objects. Some people call it Factory Method design pattern\nas well.\n \nSome of the examples of Factory Method pattern in JDK are:\n \nJava.lang.Class.forName()\njava.net.URLStreamHandlerFactory.createURLStreamHandler(String)\njava.util.Calendar.getInstance()\njava.util.ResourceBundle.getBundle()\njava.text.NumberFormat.getInstance()\njava.nio.charset.Charset.forName()\njava.util.EnumSet.of()\njavax.xml.bind.JAXBContext.createMarshaller()"},{"number":576,"categorie":"Java Design Patterns","question":"What is the benefit we get by using static factory method to create object?","reponse":"By using Static Factory Method we encapsulate the creation process\nof an object. We can use new() to create an Object from its\nconstructor. Instead we use static method of a Factory to create the\nobject. One main advantage of using Factory is that Factory can\nchoose the correct implementation at runtime and create the right\nobject. The caller of method can specify the desired behavior.\n \nE.g. If we have a ShapeFactory with createShape(String type)\nmethod. Client can call ShapeFactory.createShape(“Circle”) to get\na circular shape. ShapeFactory.createShape(“Square”) will return\nsquare shape. In this way, ShapeFactory knows how to create\ndifferent shapes based on the input by caller.\n \nAnother use of Factory is in providing access to limited resources\nto a large set of users.\n \nE.g. In ConnectionPool, we can limit the total number of\nconnections that can be created as well as we can hide the\nimplementation details of creating connection. Here ConnectionPool\nis the factory. Clients call static method\nConnectionPool.getConnection()."},{"number":577,"categorie":"Java Design Patterns","question":"What are the examples of Builder design pattern in JDK?","reponse":"In JDK there are many places where Builder design pattern is used.\nSome of these are as follows:\n \n1. java.lang.StringBuilder.append(): StringBuilder is based\non Builder pattern.\n \n2. java.nio.IntBuffer.put(): Invocation of put() method return\nIntBuffer. Also there are many variants of this method to\nbuild the IntBuffer.\n \n3. javax.swing.GroupLayout.Group.addComponent(): We can\nuse addComponent() method to build a UI that can contain\nmultiple levels of components.\n \n4. java.lang.Appendable\n \n5. java.lang.StringBuffer.append(): StringBuffer is similar to\nStringBuilder and it is also based on Builder design\npattern."},{"number":578,"categorie":"Java Design Patterns","question":"What are the examples of Abstract Factory design pattern in JDK?","reponse":"In JDK there are many places where Abstract Factory design pattern\nis used. Some of these are as follows:\n \njavax.xml.xpath.XPathFactory.newInstance()\n \njavax.xml.parsers.DocumentBuilderFactory.newInstance()\n \njavax.xml.transform.TransformerFactory.newInstance()"},{"number":579,"categorie":"Java Design Patterns","question":"What are the examples of Decorator design pattern in JDK?","reponse":"In JDK there are many places where Decorator design pattern is\nused. Some of these are as follows:\n \n1. In java.io package many classes use Decorator pattern.\nSubclasses of java.io.InputStream, OutputStream, Reader\nand Writer have a constructor that can take the instance of\nsame type and decorate it with additional behavior.\n \n2. In java.util.Collections, there are methods like\ncheckedCollection(), checkedList(), checkedMap(),\nsynchronizedList(), synchronizedMap(), \nsynchronizedSet(), unmodifiableSet(), unmodifiableMap()\nand unmodifiableList() methods that can decorate an object\nand return the same type.\n \n3. In javax.servlet package, there are classes like\njavax.servlet.http.HttpServletRequestWrapper and\nHttpServletResponseWrapper that are based on Decorator\ndesign pattern."},{"number":580,"categorie":"Java Design Patterns","question":"What are the examples of Proxy design pattern in JDK?","reponse":"Proxy design pattern provides an extra level of indirection for\nproviding access to another object. It can also protect a real object\nfrom any extra level of complexity.\n \nIn JDK there are many places where Proxy design pattern is used.\nSome of these are as follows:\n \njava.lang.reflect.Proxy\n \njava.rmi.*\n \njavax.inject.Inject\n \njavax.ejb.EJB\n \njavax.persistence.PersistenceContext"},{"number":581,"categorie":"Java Design Patterns","question":"What are the examples of Chain of Responsibility design pattern in JDK?","reponse":"In JDK there are many places where Chain of Responsibility design\npattern is used. Some of these are as follows:\n \n1. java.util.logging.Logger.log(): In this case Logger class\nprovides multiple variations of log() method that can take\nthe responsibility of logging from client in different\nscenarios. The client has to just call the appropriate log()\nmethod and Logger will take care of these commands.\n \n2. javax.servlet.Filter.doFilter(): In the Filter class, the\nContainer calls the doFilter method when a\nrequest/response pair is passed through the chain. With\nfilter the request reaches to the appropriate resource at the\nend of the chain. We can pass FilterChain in doFilter()\nmethod to allow the Filter to pass on the request and\nresponse to the next level in the chain."},{"number":582,"categorie":"Java Design Patterns","question":"What are the main uses of Command design pattern?","reponse":"Command design pattern is a behavioral design pattern. We use it to\nencapsulate all the information required to trigger an event. Some of\nthe main uses of Command pattern are:\n \n1. Graphic User Interface (GUI): In GUI and menu items, we\nuse command pattern. By clicking a button we can read the\ncurrent information of GUI and take an action.\n \n2. Macro Recording: If each of user action is implemented as\na separate Command, we can record all the user actions in\na Macro as a series of Commands. We can use this series\nto implement the “Playback” feature. In this way, Macro\ncan keep on doing same set of actions with each replay.\n \n3. Multi-step Undo: When each step is recorded as a\nCommand, we can use it to implement Undo feature in\nwhich each step can by undo. It is used in text editors like\nMS-Word.\n \n4. Networking: We can also send a complete Command over\nthe network to a remote machine where all the actions\nencapsulated within a Command are executed.\n \n5. Progress Bar: We can implement an installation routine as\na series of Commands. Each Command provides the\nestimate time. When we execute the installation routine,\nwith each command we can display  the progress bar.\n \n6. Wizard: In a wizard flow we can implement steps as\nCommands. Each step may have complex task that is just\nimplemented within one command.\n 7. Transactions: In a transactional behavior code there are\nmultiple tasks/updates. When all the tasks are done then\nonly transaction is committed. Else we have to rollback the\ntransaction. In such a scenario each step is implemented as\nseparate Command."},{"number":583,"categorie":"Java Design Patterns","question":"What are the examples of Command design pattern in JDK?","reponse":"In JDK there are many places where Command design pattern is\nused. Some of these are as follows:\n \nAll implementations of java.lang.Runnable\n \nAll implementations of javax.swing.Action"},{"number":584,"categorie":"Java Design Patterns","question":"What are the examples of Interpreter design pattern in JDK?","reponse":"Interpreter design pattern is used to evaluate sentences in a\nlanguage. E.g. In SQL we can use it to evaluate a query by\nevaluating each keyword like SELECT, FROM, WHERE clause.\n \nIn an Interpreter implementation there is a class for each\nkeyword/symbol. A sentence is just a composite of these keywords.\nBut the sentence is represented by Syntax tree that can be\ninterpreted.\n \nIn JDK there are many places where Interpreter design pattern is\nused. Some of these are as follows:\n \njava.util.Pattern\n \njava.text.Normalizer\n \nSubclasses of java.text.Format: DateFormat,\nMessageFormat, NumberFormat\n \nSubclasses of javax.el.ELResolver: ArrayELResolver,\nMapELResolver, CompositeELResolver etc."},{"number":585,"categorie":"Java Design Patterns","question":"What are the examples of Mediator design pattern in JDK?","reponse":"By using Mediator pattern we can decouple the multiple objects that\ninteract with each other. With a Mediator object we can create\nmany-to-many relationships in multiple objects.\n \nIn JDK there are many places where Mediator design pattern is\nused. Some of these are as follows:\n \njava.util.Timer: schedule() methods in Timer class act as\nMediator between the clients and the TimerTask to be\nscheduled.\n \njava.util.concurrent.Executor.execute(): The execute()\nmethod in an Executor class acts as a Mediator to execute\nthe different tasks.\n \njava.util.concurrent.ExecutorService\n \njava.lang.reflect.Method.invoke(): In Method class of\nreflection package, invoke() method acts as a Mediator.\n \njava.util.concurrent.ScheduledExecutorService: Here also\nschedule() method and its variants are Mediator pattern\nimplementations."},{"number":586,"categorie":"Java Design Patterns","question":"What are the examples of Strategy design pattern in JDK?","reponse":"In JDK there are many places where Strategy design pattern is used.\nSome of these are as follows:\n \n1. java.util.Comparator: In a Comparator we can use\ncompare() method to change the strategy used by\nCollections.sort() method.\n \n2. javax.servlet.http.HttpServlet: In a HttpServlet class\nservice() and doGet(), doPost() etc. methods take\nHttpServletRequest and HttpServletResponse and the\nimplementor of Servlet processes it based on the strategy it\nselects."},{"number":587,"categorie":"Java Design Patterns","question":"What are the examples of Visitor design pattern in JDK?","reponse":"By using Visitor design pattern we can add new virtual methods to\nexisting classes without modifying their core structure.\n \nIn JDK there are many places where Visitor design pattern is used.\nSome of these are as follows:\n \njavax.lang.model.element.AnnotationValue and\nAnnotationValueVisitor\n \njava.nio.file.FileVisitor and SimpleFileVisitor\n \njavax.lang.model.type.TypeMirror and TypeVisitor\n \njavax.lang.model.element.Element and ElementVisitor\n \njavax.faces.component.visit.VisitContext and\nVisitCallback"},{"number":588,"categorie":"Java Design Patterns","question":"How Decorator design pattern is different from Proxy pattern?","reponse":"Main differences between Decorator and Proxy design pattern are:\n \nDecorator provides an enhanced interface after decorating\nit with additional features. Proxy provides same interface\nsince it is just acting as a proxy to another object.\n \nDecorator is a type of Composite pattern with only one\ncomponent. But each decorator can add additional\nfeatures. Since it is one component in Decorator, there is\nno object aggregation.\n \nProxy can also provide performance improvement by lazy\nloading. There is nothing like this available in Decorator.\n \nDecorator follows recursive composition. Proxy is just\none object to another object access.\n \nDecorator is mostly used for building a variety of objects.\nProxy is mainly used for access to another object."},{"number":589,"categorie":"Java Design Patterns","question":"What are the different scenarios to use Setter and Constructor based injection in Dependency Injection (DI) design pattern?","reponse":"We use Setter injection to provide optional dependencies of an\nobject. Constructor injection is used to provide mandatory\ndependency of an object.\n \nIn Spring IoC, Dependency Injection is heavily used. There we have\nto differentiate between the scenario suitable for Setter based and\nConstructor based dependency injection."},{"number":590,"categorie":"Java Design Patterns","question":"What are the different scenarios for using Proxy design pattern?","reponse":"Proxy design pattern can be used in a wide variety of scenario in\nJava. Some of these are as follows:\n \n1. Virtual Proxy: This is a virtual object that acts as a proxy\nfor objects that are very expensive to create. It is used in\nLazy Loading. When client makes the first request, the real\nobject is created.\n \n2. Remote Proxy: This is a local object that provides access\nto a remote object. It is generally used in Remote Method\nInvocation (RMI) and Remote Procedure Call (RPC). It is\nalso known as a Stub.\n \n3. Protective Proxy: This is an object that control the access\nto a Master object. It can authenticate and authorize the\nclient for accessing the Master object. If client has right\npermissions, it allows client to access the main object.\n \n4. Smart Proxy: It is an object that can add additional\ninformation to the main object. It can track the number of\nother objects accessing the main object. It can track the\ndifferent clients from where request is coming. It can even\ndeny access to an object if the number of requests is\ngreater than a threshold"},{"number":591,"categorie":"Java Design Patterns","question":"What is the main difference between Adapter and Proxy design pattern?","reponse":"Adapter pattern provides a different interface to an object. But the\nProxy always provides same interface to the object.\n \nAdapter is like providing an interface suitable to client’s use. But\nProxy is same interface that has additional feature or check.\n \nE.g. In electrical appliances we use Adapter to convert from one\ntype of socket to another type of socket. In case of proxy, we have a\nplug with built-in surge protector. The interface for plug and the\noriginal device remains same."},{"number":592,"categorie":"Java Design Patterns","question":"When will you use Adapter design pattern in Java?","reponse":"If we have two classes with incompatible interfaces, we use\nAdapter pattern to make it work. We create an Adapter object that\ncan adapt the interface of one class to another class.\n \nIt is generally used for working with third party libraries. We create\nan Adapter class between third party code and our class. In case of\nany change in third party code we have to just change the Adapter\ncode. Rest of our code can remain same and just take to Adapter."},{"number":593,"categorie":"Java Design Patterns","question":"What are the examples of Adapter design pattern in JDK?","reponse":"In JDK there are many places where Adapter design pattern is used.\nSome of these are as follows:\n \njava.util.Arrays.asList(): This method can adapt an Array\nto work as a List.\n \njava.util.Collections.list(): This method can adapt any\ncollection to provide List behavior.\n \njava.util.Collections.enumeration(): This method returns\nan enumeration over the collection.\n \njava.io.InputStreamReader(InputStream): This method\nadapts a Stream to Reader class.\n \njava.io.OutputStreamWriter(OutputStream): This method\nadapts an OutputStream to Writer class.\n \njavax.xml.bind.annotation.adapters.XmlAdapter.marshal()"},{"number":594,"categorie":"Java Design Patterns","question":"What is the difference between Factory and Abstract Factory design pattern?","reponse":"With Factory design pattern we can create concrete products of a\ntype that Factory can manufacture. E.g. If it is CarFactory, we can\nproduce, Ford, Toyota, Honda, Maserati etc.\n \nWith Abstract Factory design pattern we create a concrete\nimplementation of a Factory. E.g. DeviceFactory can be Abstract\nand it can give us GoogleDeviceFactory, AppleDeviceFactory etc.\nWith AppleDeviceFactory we will get products like- iPhone, iPad,\nMac etc. With GoogleDeviceFactory we will get products like-\nNexus phone, Google Nexus tablet, Google ChromeBook etc.\n \nSo it is a subtle difference between Factory and Abstract Factory\ndesign pattern. One way to remember is that within Abstract Factory\npattern, Factory pattern is already implemented."},{"number":595,"categorie":"Java Design Patterns","question":"What is Open/closed design principle in Software engineering?","reponse":"Open/closed design principle states “software entities (classes,\nmodules, functions, etc.) should be open for extension, but closed\nfor modification”.\n \nOpen/closed principle term was originated by Bertrand Meyer in\nhis book Object Oriented Software Construction.\n \nAs per this principle, if a module is available for extension then it\nis considered open. If a module is available for use by other\nmodules then it is considered closed.\n \nFurther Robert C. Martin has mentioned it as O in SOLID principles\nof Object Oriented design.\n \nIt is used in State and Strategy design patterns. Context class is\nclosed for modification. But new functionality can be added by\nwriting new strategy code."},{"number":596,"categorie":"Java Design Patterns","question":"What is SOLID design principle?","reponse":"SOLID word in SOLID design principle is an acronym for:\n \n1. S: Single responsibility. A Class should have a single\nresponsibility.\n2. O: Open-closed. Software entities should be open for\nextension but closed for modification.\n3. L: Liskov substitution. Objects in a program should be\nreplaceable by subclasses of same type without any\nadverse impact.\n4. I: Interface segregation. Multiple client specific interfaces\nare preferable over single generic interface.\n5. D: Dependency inversion. Program should depend on\nabstract entities. It should not depend on concrete\nimplementation of an interface.\n \nThis principle was mentioned by Robert C. Martin. These are\nconsidered five basic principles of Object Oriented design.\n \nIf we follow these principles, then we can create a stable program\nthat is easy to maintain and can be extended over time."},{"number":597,"categorie":"Java Design Patterns","question":"What is Builder design pattern?","reponse":"Builder design pattern is a creational design pattern. We can use\nBuilder pattern to create complex objects with multiple options.\n \nE.g. when we have to create a Meal in a restaurant we can use\nBuilder pattern. We can keep adding options like- Starter, Drink,\nMain Course, and Dessert etc. to create complete meal. When a user\nselects other options of Starter, Drink Main Course, Dessert another\ntype of meal is created.\n \nMain feature of Builder pattern is step-by-step building of a\ncomplex object with multiple options."},{"number":598,"categorie":"Java Design Patterns","question":"What are the different categories of Design Patterns used in Object Oriented Design?","reponse":"In Object Oriented design mainly three categories of design patterns\nare used. These categories are:\n \nCreational Design Patterns:\nBuilder\nFactory Method\nAbstract Factory\nObject Pool\nSingleton\nPrototype\n \nStructural Design Patterns:\nAdapter\nBridge\nFaçade\nDecorator\nComposite\nFlyweight\nProxy\n \nBehavioral Design Patterns:\nCommand\nIterator\nChain of Responsibility\nObserver\nState\nStrategy\nMediator\nInterpreter"},{"number":599,"categorie":"Java Design Patterns","question":"What is the design pattern suitable to access elements of a Collection?","reponse":"We can use Iterator design pattern to access the individual elements\nof a Collection. In case of an ordered collection we can get Iterator\nthat returns the elements in an order.\n \nIn Java there are many implementation of Iterator in Collections\npackage. We have iterators like- Spliterator, ListIterator etc. that\nimplement Iterator pattern."},{"number":600,"categorie":"Java Design Patterns","question":"How can we implement Producer Consumer design pattern in Java?","reponse":"We can use BlockingQueue in Java to implement Producer\nConsumer design pattern.\n \nIt is a concurrent design pattern."},{"number":601,"categorie":"Java Design Patterns","question":"What design pattern is suitable to add new features to an existing object?","reponse":"We can use Decorator design pattern to add new features to an\nexisting object. With a Decorator we work on same object and\nreturn the same object with more features. But the structure of the\nobject remains same since all the decorated versions of object\nimplement same interface"},{"number":602,"categorie":"Java Design Patterns","question":"Which design pattern can be used when to decouple abstraction from the implementation?","reponse":"We can use Bridge design pattern to detach the implementation from\nthe abstraction.\n \nBridge is mainly used for separation of concern in design. We can\ncreate an implementation and store it in the interface, which is an\nabstraction. Where as specific implementation of other features can\nbe done in concrete classes that implement the interface.\n \nOften Bridge design pattern is implemented by using Adapter\npattern.\n \nE.g. we have Shape interface. We want to make Square and Circle\nshapes. But further we want to make RedSquare, BlackSquare\nshapes and GreenCircle, WhiteCircle shapes. In this case rather\nthan creating one hierarchy of all the shapes, we separate the Color\nconcern from Shape hierarchy.\n \nSo we create two hierarchies. One is Shape to Square and Shape to\nCircle hierarchy. Another one is Color to Red, Black, Green, White\nhierarchy. In this way we can create multiple types of shapes with\nmultiple colors with Bridge design pattern."},{"number":603,"categorie":"Java Design Patterns","question":"Which is the design pattern used in Android applications?","reponse":"Android applications predominantly use Model View Presenter\ndesign pattern.\n \n \n1. Model: This is the domain model of the Android\napplication. It contains the business logic and business\nrules.\n \n2. View: These are the UI components in your application.\nThese are part of the view. Also any events on UI\ncomponents are part of view module.\n \n3. Presenter: This is the bridge between Model and View to\ncontrol the communication. Presenter can query the model\nand return data to view to update it.\n \n4. E.g. If we have a Model with large news article data, and\nview needs only headline, then presenter can query the\ndata from model and only give headline to view. In this\nway view remains very light in this design pattern."},{"number":604,"categorie":"Java Design Patterns","question":"How can we prevent users from creating more than one instance of singleton object by using clone() method?","reponse":"First we should not implement the Cloneable interface by the object\nthat is a Singleton.\n \nSecond, if we have to implement Cloneable interface then we can\nthrow exception in clone() method.\n \nThis will ensure that no one can use clone() method or Cloneable\ninterface to create more than one instance of Singleton object."},{"number":605,"categorie":"Java Design Patterns","question":"What is the use of Interceptor design pattern?","reponse":"Interceptor design pattern is used for intercepting a request. Primary\nuse of this pattern is in Security policy implementation.\n \nWe can use this pattern to intercept the requests by a client to a\nresource. At the interception we can check for authentication and\nauthorization of client for the resource being accessed.\n \nIn Java it is used in javax.servlet.Filter interface.\n \nThis pattern is also used in Spring framework in HandlerInterceptor\nand MVC interceptor."},{"number":606,"categorie":"Java Design Patterns","question":"What are the Architectural patterns that you have used?","reponse":"Architectural patterns are used to define the architecture of a\nSoftware system. Some of the patterns are as follows:\n \n1. MVC: Model View Controller. This pattern is extensively\nused in the architecture of Spring framework.\n \n2. Publish-subscribe: This pattern is the basis of messaging\narchitecture. In this case messages are published to a\nTopic. And subscribers subscribe to the topic of their\ninterests. Once the message is published to a topic in\nwhich a Subscriber has an interest, the message is\nconsumed by the relevant subscriber.\n \n3. Service Locator: This design pattern is used in a service\nlike JNDI to locate the available services. It uses as\ncentral registry to maintain the list of services.\n \n4. n-Tier: This is a generic design pattern to divide the\narchitecture in multiple tiers. E.g. there is 3-tier\narchitecture with Presentation layer, Application layer and\nData access layer. It is also called multi-layer design\npattern.\n \n5. Data Access Object (DAO): This pattern is used in\nproviding access to database objects. The underlying\nprinciple is that we can change the underlying database\nsystem, without changing the business logic. Since\nbusiness logic talks to DAO object, there is no impact of\nchanging Database system on business logic.\n \n6. Inversion of Control (IoC): This is the core of Dependency\nInjection in Spring framework. We use this design patternto increase the modularity of an application. We keep the\nobjects loosely coupled with Dependency Injection."},{"number":607,"categorie":"Java Design Patterns","question":"What are the popular uses of Façade design pattern?","reponse":"Some of the popular uses of Façade design pattern are as follows:\n \n1. A Façade provides convenient methods for common tasks\nthat are used more often.\n2. A Façade can make the software library more readable.\n3. A Façade can reduce the external dependencies on the\nworking of inner code.\n4. A Façade can act as a single well-designed API by\nwrapping a collection of poorly designed APIs.\n5. A Façade pattern can be used when a System is very\ncomplex and difficult to use. It can simplify the usage of\ncomplex system."},{"number":608,"categorie":"Java Design Patterns","question":"What is the difference between Builder design pattern and Factory design pattern?","reponse":"Both Factory and Builder patterns are creational design patterns.\nThey are similar in nature but Factory pattern is a simplified generic\nversion of Builder pattern.\n \nWe use Factory pattern to create different concrete subtypes of an\nObject. The client of a Factory may not know the exact subtype. E.g.\nIf we call createDrink() of a Factory, we may get Tea or Coffee\ndrinks.\n \nWe can also use Builder pattern to create different concrete\nsubtypes of an object. But in the Builder pattern the composition of\nthe object can be more complex. E.g. If we call createDrink() for\nBuilder, we can getCappuccino Coffee with Vanilla Cream and\nSugar, or we can get Latte Coffee with Splenda and milk cream.\n \nSo a Builder can support creation of a large number of variants of\nan object. But a Factory can create a broader range of known\nsubtypes of an object."},{"number":609,"categorie":"Java Design Patterns","question":"What is Memento design pattern?","reponse":"Memento design pattern is used to implement rollback\nfeature in an object. In a Memento pattern there are three\nobjects:\n \nOriginator: This is the object that has an internal state.\n \nCaretaker: This is the object that can change the state of\nOriginator. But it wants to have control over rolling back\nthe change.\n \nMemento: This is the object that Caretaker gets from\nOriginator, before making and change. If Caretaker wants\nto Rollback the change it gives Memento back to\nOriginator. Originator can use Memento to restore its own\nstate to the original state.\n \n \nE.g. One good use of memento is in online Forms. If we\nwant to show to user a form pre-populated with some\ndata, we keep this copy in memento. Now user can\nupdate the form. But at any time when user wants to reset\nthe form, we use memento to make the form in its original\npre-populated state. If user wants to just save the form\nwe save the form and update the memento. Now onwards\nany new changes to the form can be rolled back to the\nlast saved Memento object."},{"number":610,"categorie":"Java Design Patterns","question":"What is an AntiPattern?","reponse":"An AntiPattern is opposite of a Design Pattern. It is a common\npractice in an organization that is used to deal with a recurring\nproblem but it has more bad consequences than good ones.\n \nAntiPattern can be found in an Organization, Architecture or\nSoftware Engineering.\n \nSome of the AntiPatterns in Software Engineering are:\n \n1. Gold Plating: Keep on adding extra things on a working\nsolution even though these extra things do not add any\nadditional value.\n \n2. Spaghetti Code: Program that are written in a very\ncomplex way and are hard to understand due to misuse of\ndata structures.\n \n3. Coding By Exception: Adding new code just to handle\nexception cases and corner case scenarios.\n \n4. Copy Paste Programming: Just copying the same code\nmultiple times rather than writing generic code that can be\nparameterized."},{"number":611,"categorie":"Java Design Patterns","question":"What is a Data Access Object (DAO) design pattern?","reponse":"DAO design pattern is used in the data persistent layer of a Java\napplication. It mainly uses OOPS principle of Encapsulation.\n \nBy using DAO pattern it makes the application loosely coupled and\nless dependent on actual database.\n \nWe can even implement some in-memory database like H2 with\nDAO to handle the unit-testing.\n \nIn short, DAO hides the underlying database implementation from\nthe class that accesses the data via DAO object.\n \nRecently we can combine DAO with Spring framework to inject any\nDB implementation.\n \n Spring"},{"number":612,"categorie":"Spring","question":"What is Spring framework?","reponse":"Spring is development framework for Java programming. It is an\nopen source development framework for Enterprise Java.\n \nThe core features of Spring Framework can be used in developing a\nJava Enterprise application.\n \nIt has many extensions and jars for developing web applications on\ntop of Java EE platform.\n \nWith Spring we can develop large-scale complex Java applications\nvery easily. It is also based on good design patterns like\nDependency Injection, Aspect oriented programming for developing\nextensible feature rich software."},{"number":613,"categorie":"Spring","question":"What are the benefits of Spring framework in software development?","reponse":"Many benefits of Spring framework are:\n \nLightweight Framework: Basic Spring framework is very small in\nsize. It is easy to use and does not add a lot of overhead on\nsoftware. It just has 2 MB in basic version.\n \nContainer: Spring framework provides the basic container that\ncreates and manages the life cycle of application objects like Plain\nold Java objects (POJO). It also stores the configuration files of\napplication objects to be created.\n \nDependency Injection (DI): Spring provided loose coupling is\napplication by Dependency Injection. It uses Inversion of Control\ntechnique by which objects specify their dependencies to Spring\ncontainer instead of creating new objects themselves.\n \nAspect Oriented Programming (AOP): Spring framework promotes\nand provides support for Aspect oriented programming in Java.\nThis helps in separating application business logic from system\nservices that are common across all the business logic. E.g. Logging\ncan be a cross cutting concern in an Application.\n \n \nTransaction Management: Spring provides a framework for\ntransaction management. So a developer does not have to implement\nit from scratch. Spring Transaction Management is so powerful that\nwe can scale it from one local transaction to global transactions in a\ncluster.\n \n \nMVC Framework: For Web applications, Spring provides MVC\nframework. This framework is based on MVC design pattern andhas better features compared to other web frameworks.\n \n \nException Handling: Spring also gives support for a common API to\nhandle exceptions in various technologies like- Hibernate, JDBC\netc."},{"number":614,"categorie":"Spring","question":"What are the modules in Core Container of Spring framework?","reponse":"Spring framework has a Core Container. Modules in Core Container\nare:\n \nCore module\nBean module\nContext module\nSpring Expression Language module"},{"number":615,"categorie":"Spring","question":"What are the modules in Data Access/Integration layer of Spring framework?","reponse":"Modules in Data Access/Integration Layer of Spring framework are:\n \nJDBC module: An abstraction layer to remove tedious JDBC\ncoding.\nORM module Integration layers for Object Relational Mapping\nOXM module: An abstraction layer to support Object XML\nmapping.\nJava Messaging Service (JMS) module: Module for producing and\nconsuming messages.\nTransactions module: Transaction Management for POJO classes"},{"number":616,"categorie":"Spring","question":"What are the modules in Web layer of Spring framework?","reponse":"Modules in Web Layer of Spring framework are:\n \nWeb module: This provides basic web-oriented integration features.\nServlet module: Support for Servlet Listeners.\nWebSocket module: Support for Web Socket style messaging.\nPortlet module: MVC implementation for Portlet environment."},{"number":617,"categorie":"Spring","question":"What is the main use of Core Container module in Spring framework?","reponse":"As the name suggests, Spring Core Container is the core of Spring\nframework. It gives the basic functionality of the Spring. All the\nparts of Spring Framework are built on top of Core Container.\n \nIts main use is to provide Dependency Injection (DI) and Inversion\nof control (IOC) features."},{"number":618,"categorie":"Spring","question":"What kind of testing can be done in Spring Test Module?","reponse":"Spring Test Module provides support for Unit testing as well as\nIntegration testing of Spring components. It allows using JUnit or\nTestNG testing frameworks. It also gives ability to mock objects to\nuse the test code."},{"number":619,"categorie":"Spring","question":"What is the use of BeanFactory in Spring framework?","reponse":"BeanFactory is the main class that helps in implementing Inversion\nof Control pattern in Spring. It is based on the factory design\npattern. It separates the configuration and dependencies of an\napplication from the rest of application code.\n \nImplementations of BeanFactory like XmlBeanFactory class are\nused by applications built with Spring."},{"number":620,"categorie":"Spring","question":"Which is the most popular implementation of BeanFactory in Spring?","reponse":"XMLBeanFactory is the most popular implementation of\nBeanFactory in Spring."},{"number":621,"categorie":"Spring","question":"What is XMLBeanFactory in Spring framework?","reponse":"XMLBeanFactory is one of the most useful implementation of\nBeanFactory in Spring. This factory loads its beans based on the\ndefinitions mentioned in an XML file.\n \nSpring container reads bean configuration metadata from an XML\nfile and creates a fully configured application with the help of\nXMLBeanFactory class."},{"number":622,"categorie":"Spring","question":"What are the uses of AOP module in Spring framework?","reponse":"AOP module is also known as Aspect Oriented Programming\nmodule. Its uses are:\n \nDevelopment of aspects in a Spring based application\nProvides interoperability between Spring and other AOP\nframeworks\nSupports metadata programming to Spring"},{"number":623,"categorie":"Spring","question":"What are the benefits of JDBC abstraction layer module in Spring framework?","reponse":"Spring provides JDBC abstraction layer module. Main benefits of\nthis module are:\n \nHelps in keeping the database code clean and simple.\nPrevents problems that result from a failure to close database\nresources.\nProvides a layer of useful exceptions on top of the error messages\ngiven by different database servers.\nBased on Spring’s AOP module\nProvides transaction management services for objects in a Spring\napplication"},{"number":624,"categorie":"Spring","question":"How does Spring support Object Relational Mapping (ORM) integration?","reponse":"Spring supports Object Relational Mapping (ORM) by providing\nORM Module. This module helps in integrating with popular ORM\nframework like Hibernate, JDO, and iBATIS SQL Maps etc.\n \nTransaction Management module of Spring framework supports all\nof these ORM frameworks as well as JDBC."},{"number":625,"categorie":"Spring","question":"How does Web module work in Spring framework?","reponse":"Spring provides support for developing web application by using\nWeb module. This module is built on application context module\nthat provides context for web-based applications.\n \nThis module also supports web-oriented integration features like-\ntransparently handling multipart requests for uploading files,\nprogrammatically binding request parameters to business objects\netc.\n \nThis module also supports integration with popular web\nframeworks like Jakarta Struts, JSF, and Tapestry etc."},{"number":626,"categorie":"Spring","question":"What are the main uses of Spring MVC module?","reponse":"Spring-webmvc module is also known as Web-servlet module. It is\nbased on Web Model View Controller pattern.\n \nMain uses of this module are:\n \nIntegration of Spring with other MVC frameworks\nSupports IoC to provide clean separation of controller logic from\nbusiness objects\nProvides clean separation between domain model code and web\nforms \nAllows developers to declaratively bind request parameters to\nbusiness objects"},{"number":627,"categorie":"Spring","question":"What is the purpose of Spring configuration file?","reponse":"Spring application can be configured by an XML file. This file\ncontains information of classes and how these classes are\nconfigured and introduced to each other.\n \nSpring IoC container uses some kind of configuration metadata. This\nconfiguration metadata represents how an application developer\ntells the Spring container to instantiate, configure, and assemble the\nobjects in your application. This configuration metadata is stored in\nSpring configuration file.\n \nThe other ways of specifying configuration metadata are Java based\nconfiguration and Annotation based configuration."},{"number":628,"categorie":"Spring","question":"What is the purpose of Spring IoC container?","reponse":"The Spring IoC Container is responsible for:\n \nCreating the objects\nConfiguring the objects\nManaging dependency between objects (with dependency injection\n(DI))\nWiring the objects together\nManaging complete lifecycle of objects"},{"number":629,"categorie":"Spring","question":"What is the main benefit of Inversion of Control (IOC) principle?","reponse":"Inversion of Control (IOC) principle is the base of Spring\nframework. It supports dependency injection in an application. With\nDependency Injection, a programmer has to write minimal code. It\nalso makes easier to test an application.\n \nMost important benefit is that it leads to loose coupling within\nobjects. With loose coupling it is easier to change the application\nwith new requirements."},{"number":630,"categorie":"Spring","question":"Does IOC containers support Eager Instantiation or Lazy loading of beans?","reponse":"IOC Container in Spring supports both the approaches. Eager\ninstantiation as well as lazy loading of beans."},{"number":631,"categorie":"Spring","question":"What are the benefits of ApplicationContext in Spring?","reponse":"ApplicationContext in Spring provides following benefits:\n \nBean factory methods: These are used to access application\ncomponents\nLoad File Resources: It helps in loading file resources in a generic\nfashion\nPublish Events: It enables publishing events to registered listeners\nInternationalization Support: Ability to resolve messages to support\ninternationalization\nParent Context: Ability to inherit from a parent context"},{"number":632,"categorie":"Spring","question":"How will you implement ApplicationContext in Spring framework?","reponse":"ApplicationContext in Spring can be implemented in one of the\nfollowing three ways:\n \nFileSystemXmlApplicationContext: If we want to load the\ndefinitions of beans from an XML file then\nFileSystemXmlApplicationContext is used. The full path of XML\nbean configuration file is provided to the constructor.\nClassPathXmlApplicationContext: To loads the definitions of beans\nfrom an XML file in the CLASSPATH, we use\nClassPathXmlApplicationContext. It is used for application context\nembedded in jars.\n \nWebXmlApplicationContext: To provide configuration for a web\napplication WebXmlApplicationContext is used. While the\napplication is running, it is read only. But it can be reloaded if\nunderlying application supports it."},{"number":633,"categorie":"Spring","question":"Explain the difference between ApplicationContext and BeanFactory in Spring?","reponse":"Main differences between ApplicationContext and BeanFactory are:\n \nAutomatic BeanPostProcessor registration: BeanFactory does not\nsupport BeanPostProcessor registration. Whereas\nApplicationContext support this.\n \nAutomatic BeanFactoryPostProcessor registration: BeanFactory\nalso does not allow Automatic BeanFactoryPostProcessor\nregistration. Whereas ApplicationContext allows this.\n \nMessageSource access: BeanFactory is not convenient for\nMessageSource access. ApplicationContext is quite convenient for\nMessageSource access.\n \nApplicationEvent: We cannot publish ApplicationEvent with\nBeanFactory. But ApplicationContext provides ability to publish\nApplicationEvent."},{"number":634,"categorie":"Spring","question":"Between ApplicationContext and BeanFactory which one is preferable to use in Spring?","reponse":"Spring documentation recommends using ApplicationContext in\nalmost all the cases. ApplicationContext has all the functionality of\nBeanFactory."},{"number":635,"categorie":"Spring","question":"What are the main components of a typical Spring based application?","reponse":"In a Spring based application, main components are:\nSpring configuration XML file: This is used to configure Spring\napplication\nAPI Interfaces: Definition of API interfaces for functions provided\nby application\nImplementation: Application code with implementation of APIs\nAspects: Spring Aspects implemented by application\nClient: Application at client side that is used for accessing functions"},{"number":636,"categorie":"Spring","question":"Explain Dependency Injection (DI) concept in Spring framework?","reponse":"Dependency Injection is a software design pattern. It is used to\nimplement Inversion of Control (IOC) in Spring framework. As per\nthis pattern, we do not create objects in an application by calling\nnew. Rather, we describe how an object should be created. In this\nway creation of an object is not tightly coupled with another object.\n \nA container is responsible for creating and wiring the objects. The\ncontainer can call injecting code and wire the objects as per the\nconfiguration at runtime."},{"number":637,"categorie":"Spring","question":"What are the different roles in Dependency Injection (DI)?","reponse":"There are four roles in Dependency Injection:\n \nService object(s) to be used\nClient object that depends on the service\nInterface that defines how client uses services\nInjector responsible for constructing services and injecting them\ninto client"},{"number":638,"categorie":"Spring","question":"Spring framework provides what kinds of Dependency Injection mechanism?","reponse":"Spring framework provides two types of Dependency Injection\nmechanism:\n \nConstructor-based Dependency Injection: Spring container can\ninvoke a class constructor with a number of arguments. This\nrepresents a dependency on other class.\n \nSetter-based Dependency Injection: Spring container can call setter\nmethod on a bean after creating it with a no-argument constructor or\nno-argument static factory method to instantiate another bean."},{"number":639,"categorie":"Spring","question":"In Spring framework, which Dependency Injection is better?","reponse":"Constructor-based DI or Setter-based\nDI?\n \nSpring framework provides support for both Constructor-based and\nSetter-based Dependency Injection. There are different scenarios in\nwhich these options can be used.\n \nIt is recommended to use Constructor-based DI for mandatory\ndependencies. Whereas Setter-based DI is used for optional\ndependencies."},{"number":640,"categorie":"Spring","question":"What are the advantages of Dependency Injection (DI)?","reponse":"Dependency Injection (DI) pattern has following advantages:\n \nDependency Injection reduces coupling between a class and its\ndependencies.\n \nWith Dependency Injection (DI), we can do concurrent or\nindependent software development. Two teams can work parallel\non classes that will be used by each other.\n \nIn Dependency Injection (DI), the client can be configured in\nmultiple ways. It needs to just work with the given interface. Rest of\nthe implementation can be changed and configured for different\nfeatures.\n \nDependency injection is also used to export a system's configuration\ndetails into configuration files. So we can configure same\napplication run in different environments based on configuration.\nE.g. Run in Test environment, UAT environment, and Production\nenvironment.\n \nDependency Injection (DI) applications provide more ease and\nflexibility of testing. These can be tested in isolation in Unit Test.\n \nDependency injection (DI) isolates client from the impact of design\nand implementation changes. Therefore, it promotes reusability,\ntestability and maintainability."},{"number":641,"categorie":"Spring","question":"What are the disadvantages of Dependency Injection (DI)?","reponse":"Dependency Injection (DI) pattern has following disadvantages:\n \nMost of the time Dependency Injection forces developers to use an\ninjection framework like Spring. This causes dependency on a\nframework.\n \nWith Dependency Injection, clients are dependent on the\nconfiguration data. This becomes extra task for developers when the\napplication does not need so many custom configuration values.\n \nCode is difficult to trace and read in Dependency Injection. DI\nseparates behavior from construction of objects.\n \nDependency injection increases complexity in the linkages between\nclasses. It may become harder to manage such complexity outside\nthe implementation of a class."},{"number":642,"categorie":"Spring","question":"What is a Spring Bean?","reponse":"A Spring Bean is a plain old Java object (POJO) that is created and\nmanaged by a Spring container.\n \nThere can be more than one bean in a Spring application. But all\nthese Beans are instantiated and assembled by Spring container.\n \nDeveloper provides configuration metadata to Spring container for\ncreating and managing the lifecycle of Spring Bean.\n \nIn general a Spring Bean is singleton. Evert bean has an attribute\nnamed \"singleton\". If its value is true then bean is a singleton. If its\nvalue is false then bean is a prototype bean.\n \nBy default the value of this attribute is true. Therefore, by default all\nthe beans in spring framework are singleton in nature."},{"number":643,"categorie":"Spring","question":"What does the definition of a Spring Bean contain?","reponse":"A Spring Bean definition contains configuration metadata for bean.\nThis configuration metadata is used by Spring container to:\n \nCreate the bean\nManage its lifecycle\nResolve its dependencies"},{"number":644,"categorie":"Spring","question":"What are the different ways to provide configuration metadata to a Spring Container?","reponse":"Spring supports three ways to provide configuration metadata to\nSpring Container:\n \nXML based configuration: We can specify configuration data in an\nXML file.\n \nAnnotation-based configuration: We can use Annotations to specify\nconfiguration. This was introduced in Spring 2.5.\n \nJava-based configuration: This is introduced from Spring 3.0. We\ncan embed annotations like @Bean, @Import, @Configuration in\nJava code to specify configuration metadata."},{"number":645,"categorie":"Spring","question":"What are the different scopes of a Bean supported by Spring?","reponse":"Spring framework support seven types of scopes for a Bean. Out of\nthese only five scopes are available for a web-aware\nApplicationContext application:\n \nsingleton: This is the default scope of a bean. Under this scope,\nthere is a single object instance of bean per Spring IoC container.\n \nprototype: Under this scope a single bean definition can have\nmultiple object instances.\n \nrequest: In this scope, a single bean definition remains tied to the\nlifecycle of a single HTTP request. Each HTTP request will have\nits own instance of a bean for a single bean definition. It is only\nvalid in the context of a web-aware Spring ApplicationContext.\n \nsession: Under this scope, a single bean definition is tied to the\nlifecycle of an HTTP Session. Each HTTP Session will have one\ninstance of bean. It is also valid in the context of a web-aware\nSpring ApplicationContext.\n \nglobalSession: This scope, ties a single bean definition to the\nlifecycle of a global HTTP Session. It is generally valid in a Portlet\ncontext. It is also valid in the context of a web-aware Spring\nApplicationContext.\n \napplication: This scope, limits a single bean definition to the\nlifecycle of a ServletContext. It is also valid in the context of a\nweb-aware Spring ApplicationContext.\n \nwebsocket: In this scope, a single bean definition is tied to the\nlifecycle of a WebSocket. It is also valid in the context of a web-\naware Spring ApplicationContext."},{"number":646,"categorie":"Spring","question":"How will you define the scope of a bean in Spring?","reponse":"In configuration xml, we can specify the scope of bean in its\ndefinition. This is used by container to decide the scope of bean in\nSpring.\n \nE.g. <bean id=\"userService\" class=\"com.um.UserService\"\nscope=\"prototype\"/>\n \nThis is an example of userService bean with prototype scope."},{"number":647,"categorie":"Spring","question":"Is it safe to assume that a Singleton bean is thread safe in Spring Framework?","reponse":"No, Spring framework does not guarantee anything related to multi-\nthreaded behavior of a singleton bean. Developer is responsible for\ndealing with concurrency issues and maintaining thread safety of a\nsingleton bean."},{"number":648,"categorie":"Spring","question":"What are the design-patterns used in Spring framework?","reponse":"Spring framework uses many Design patterns. Some of these\npatterns are:\n \nSingleton – By default beans defined in spring config files are\nsingleton. These are based on Singleton pattern.\n \nTemplate – This pattern is used in many classes like- \nJdbcTemplate, RestTemplate, JmsTemplate, JpaTemplate etc.\n \nDependency Injection – This pattern is the core behind the design of\nBeanFactory and ApplicationContext.\n \nProxy – Aspect Oriented Programming (AOP) heavily uses proxy\ndesign pattern.\n \nFront Controller – DispatcherServlet in Spring is based on Front\nController pattern to ensure that incoming requests are dispatched to\nother controllers.\n \nFactory pattern – To create an instance of an object, BeanFactory is\nused. This is based on Factory pattern.\n \nView Helper – Spring has multiple options to separating core code\nfrom presentation in views. Like- Custom JSP tags, Velocity macros\netc."},{"number":649,"categorie":"Spring","question":"What is the lifecycle of a Bean in Spring framework?","reponse":"A Bean in Spring framework goes through following phases in its\nlifecycle.\n \nInitialization and creation: Spring container gets the definition of\nBean from XML file and instantiates the Bean. It populates all the\nproperties of Bean as mentioned in the bean definition.\n \nSetting the Behavior of Bean: In case a Bean implements\nBeanNameAware interface, Spring uses setBeanName() method to\npass the bean’s id. In case a Bean implements BeanFactoryAware\ninterface, Spring uses setBeanFactory() to pass the BeanFactory to\nbean.\n \nPost Processing: Spring container uses\npostProcesserBeforeInitialization() method to call\nBeanPostProcessors associated with the bean. Spring calls\nafterPropertySet() method to call the specific initialization methods.\nIn case there are any BeanPostProcessors of a bean, the\npostProcessAfterInitialization() method is called.\n \nDestruction: During the destruction of a bean, if bean implements\nDisposableBean, Spring calls destroy() method."},{"number":650,"categorie":"Spring","question":"What are the two main groups of methods in a Bean’s lifecycle?","reponse":"A Bean in Spring has two main groups of lifecycle methods.\n \nInitialization Callbacks: Once all the necessary properties of a Bean\nare set by the container, Initialization Callback methods are used for\nperforming initialization work. A developer can implement method\nafterPropertiesSet() for this work.\n \nDestruction Callbacks: When the Container of a Bean is destroyed,\nit calls the methods in DisposableBean to do any cleanup work.\nThere is a method called destroy() that can be used for this purpose\nto make Destruction Callbacks.\n \nRecent recommendation from Spring is to not use these methods,\nsince it can strongly couple your code to Spring code."},{"number":651,"categorie":"Spring","question":"Can we override main lifecycle methods of a Bean in Spring?","reponse":"Yes, Spring framework allows developers to override the lifecycle\nmethods of a Bean. This is used for writing any custom behavior for\nBean."},{"number":652,"categorie":"Spring","question":"What are Inner beans in Spring?","reponse":"A bean that is used as a property of another bean is known as Inner\nbean. It can be defined as a <bean/> element in <property/> or\n<constructor-arg/> tags.\n \nIt is not mandatory for an Inner bean to have id or a name. These are\nalways anonymous.\n \nInner bean does not need a scope. By default it is of prototype\nscope."},{"number":653,"categorie":"Spring","question":"How can we inject a Java Collection in Spring framework?","reponse":"Spring promotes Dependency Injection (DI) in code. It gives\nsupport for injecting not only objects but also collection of objects.\n \nWe can inject collections like- list, set, map etc. in Spring.\nFollowing tags can be used for this purpose:\n \n<list> : This type is used for injecting a list of values. In a <list>\nduplicates are allowed.\n \n<set> : This type is used for injecting a set of values. As per set\nproperty, duplicates are not allowed.\n \n<map> : This type is used for injecting name-value pairs in form of\nmap. Name and value can be of any type that is allowed for a map.\n \n<props> : This type is used to inject a collection of String based\nname-value. It is like a properties file."},{"number":654,"categorie":"Spring","question":"What is Bean wiring in Spring?","reponse":"A Spring container is responsible for injecting dependencies\nbetween beans. This process of connecting beans is called wiring.\n \nDeveloper mentions in configuration file, the dependencies between\nbeans. And Spring container reads these dependencies and wires\nthe beans on creation."},{"number":655,"categorie":"Spring","question":"What is Autowiring in Spring?","reponse":"Autowiring is a feature of Spring in which container can\nautomatically wire/connect the beans by reading the configuration\nfile.\n \nDeveloper has to just define “autowire” attribute in a bean.\n \nSpring resolves the dependencies automatically by looking at this\nattribute of beans that are autowired."},{"number":656,"categorie":"Spring","question":"What are the different modes of Autowiring supported by Spring?","reponse":"There are five modes of Autowiring supported by Spring\nframework:\n \nno: This is default setting for Autowiring. In this case, we use “ref”\nmode to mention the explicit bean that is being referred for wiring.\n \nE.g. In this example Employee bean refers Manager bean.\n \n<bean id=\"employee\" class=\"com.dept.Employee\">\n                  <property name=\"manager\" ref=\"manager\" />\n</bean>\n<bean id=\"manager\" class=\"com.dept.Manager\" />\n \n \nbyName: In this case, Spring container tries to match beans by name\nduring Autowiring. If the name of a bean is same as the name of\nbean referred in autowire byname, then it automatically wires it.\n \nE.g. In following example, Manager bean is wired to Employee\nbean by Name.\n \n<bean id=\"employee\" class=\"com.dept.Employee\"\nautowire=\"byName\" />\n<bean id=\"manager\" class=\"com.dept.Manager\" />\n \n \nbyType: In this case, Spring container check the properties of beans\nreferred with attribute byType. Then it matches the type of bean and\nwires. If it finds more than one such bean of that type, it throws a\nfatal exception.\n \nE.g. In following example, Manager bean is wired by type toEmployee bean.\n \n<bean id=\"employee\" class=\"com.dept.Employee\"\nautowire=\"byType\" />\n<bean id=\"manager\" class=\"com.dept.Manager\" />\n \nconstructor: In this case, Spring container looks for byType attribute\nin constructor argument. It tries to find the bean with exact name. If\nit finds more than one bean of same name, it throws fatal exception.\nThis case is similar to byType case.\n \nE.g. In following example “constructor” mode is used for\nautowiring.\n<bean id=\"employee\" class=\"com.dept.Employee\"\nautowire=\"constructor\" />\n<bean id=\"manager\" class=\"com.dept.Manager\" />\n \nautodetect: This is an advanced mode for autowiring. In this case,\nby default Spring tries to find a constructor match. If it does not find\nconstructor then it uses autowire by Type.\n \nE.g. This is an example of autodetect Autowiring.\n<bean id=\"employee\" class=\"com.dept.Employee\"\nautowire=\"autodetect\" />\n<bean id=\"manager\" class=\"com.dept.Manager\" />"},{"number":657,"categorie":"Spring","question":"What are the cases in which Autowiring may not work in Spring framework?","reponse":"Autowiring is a great feature in Spring. It can be used in most of the\ncases. But there are certain scenarios in which Autowiring may not\nwork.\n \nExplicit wiring: Since Autowiring is done by Spring, developer\ndoes not have full control on specifying the exact class to be used. It\nis preferable to use Explicit wiring in case of full control over\nwiring.\n \nPrimitive Data types: Autowiring does not allow wiring of\nproperties that are based on primitive data types like- int, float etc."},{"number":658,"categorie":"Spring","question":"Is it allowed to inject null or empty String values in Spring?","reponse":"Yes, Spring allows injecting null or empty String values."},{"number":659,"categorie":"Spring","question":"What is a Java-based Configuration in Spring?","reponse":"Spring allows for Java-based configuration in which a developer\ncan specify configuration by using Java-based annotations. This\nfeature was introduced in Spring 3.0.\n \nYou can use annotations like- @Configuration, @Bean, @Import\nand @DependsOn in Java classes for specifying the configuration."},{"number":660,"categorie":"Spring","question":"What is the purpose of @Configuration annotation?","reponse":"This annotation is used in a class to indicate that this is class is the\nprimary source of bean definitions. This class can also contain\ninter-bean dependencies that are annotated by @Bean annotation."},{"number":661,"categorie":"Spring","question":"What is the difference between Full @Configuration and 'lite' @Beans mode?","reponse":"Spring allows for using @Bean annotation on methods that are\ndeclared in classes not annotated with @Configuration. This is\nknown as “lite” mode. In this mode, bean methods can be declared\nin a @Component or a plain java class without any annotation.\n \nIn the “lite” mode, @Bean methods cannot declare inter-bean\ndependencies.\n \nIt is recommended that one @Bean method should not invoke\nanother @Bean method in 'lite' mode.\n \nSpring recommends that @Bean methods declared within\n@Configuration classes should be used for full configuration. This\nkind of full mode can prevent many bugs."},{"number":662,"categorie":"Spring","question":"In Spring framework, what is Annotation-based container configuration?","reponse":"From Spring 2.5 version it is possible to provide configuration by\nusing annotation.\n \nTo turn this configuration on, we need to mention\n<context:annotation-config/> in spring XML file.\n \nNow developer can use annotations like @Required, @Autowired,\n@Qualifier etc. in a class file to specify the configuration for beans.\nSpring container can use this information from annotation for\ncreating and wiring the beans."},{"number":663,"categorie":"Spring","question":"How will you switch on Annotation based wiring in Spring?","reponse":"To use Annotation based wiring, we need to turn on Annotation\nbased configuration in Spring.\n \nBy default, Annotation based configuration is switched off in\nSpring. To turn it is we can specify <context:annotation-config/>\nelement in Spring config file.\n \nOnce it is turned on, we can use @Autowired annotation or\n@Required annotation in a Java class for wiring in Spring."},{"number":664,"categorie":"Spring","question":"What is @Autowired annotation?","reponse":"We can use @Autowired annotation to auto wire a bean on a setter\nmethod, constructor or a field. @Autowired auto wiring is done by\nmatching the data type.\n \nBefore using @Autowired annotation we have to register\nAutowiredAnnotationBeanPostProcessor. This can be done by\nincluding <context:annotation-config /> in bean configuration file."},{"number":665,"categorie":"Spring","question":"What is @Required annotation?","reponse":"We use @Required annotation to a property to check whether the\nproperty has been set or not.\n \nSpring container throws BeanInitializationException if the\n@Required annotated property is not set.\n \nWhen we use @Required annotation, we have to register\nRequiredAnnotationBeanPostProcessor in Spring config file."},{"number":666,"categorie":"Spring","question":"What are the two ways to enable RequiredAnnotationBeanPostProcessor in Spring?","reponse":"RequiredAnnotationBeanPostProcessor can be enabled in two ways\nin Spring:\n \nInclude <context:annotation-config />\nAdd Spring context and <context:annotation-config /> in bean\nconfiguration file.\nE.g.\n<beans\n...\nxmlns:context=\"http://www.springframework.org/schema/context\"\n...\nhttp://www.springframework.org/schema/context\nhttp://www.springframework.org/schema/context/spring-context-\n2.5.xsd\">\n...\n<context:annotation-config />\n...\n</beans>\n \nInclude RequiredAnnotationBeanPostProcessor in bean\nconfiguration file\n \nE.g.\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxsi:schemaLocation=\"http://www.springframework.org/schema/beans\nhttp://www.springframework.org/schema/beans/spring-beans-\n2.5.xsd\">\n \n<beanclass=\"org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor\"/>\n \n<bean id=\"BookBean\" class=\"com.foo.Book\">\n<property name=\"action\" value=\"price\" />\n<property name=\"type\" value=\"1\" />\n</bean>\n \n<bean id=\"AuthorBean\" class=\"com.foo.Author\">\n<property name=\"name\" value=\"Rowling\" />\n</bean>\n \n</beans>"},{"number":667,"categorie":"Spring","question":"What is @Qualifier annotation in Spring?","reponse":"We use @Qualifier annotation to mark a bean as ready for auto\nwiring. This annotation is used along with @Autowired annotation\nto specify the exact bean for auto wiring by Spring container."},{"number":668,"categorie":"Spring","question":"How Spring framework makes JDBC coding easier for developers?","reponse":"Spring provides a mature JDBC framework to provide support for\nJDBC coding. Spring JDBC handled resource management as well\nas error handling in a generic way. This reduces the work of\nsoftware developers.\n \nThey just have to write queries and related statements to fetch the\ndata or to store the data in database."},{"number":669,"categorie":"Spring","question":"What is the purpose of JdbcTemplate?","reponse":"Spring framework provides JdbcTemplate class that contains many\nconvenient methods for regular tasks like- converting data into\nprimitives or objects, executing prepared or callable statements etc.\n \nThis class makes it very easy to work with database in our\nApplication and it also provides good support for custom error\nhandling in database access code."},{"number":670,"categorie":"Spring","question":"What are the benefits of using Spring DAO?","reponse":"Some of the benefits of using Spring DAO are:\n \nIt makes it easier to work on different data access methods like-\nJDBC, Hibernate etc.\nIt provides a consistent and common way to deal with different data\naccess methods.\nSpring DAO makes it easier to switch between different data\npersistence frameworks.\nNo need for catching framework specific exceptions."},{"number":671,"categorie":"Spring","question":"What are the different ways to use Hibernate in Spring?","reponse":"Spring provides two ways to use Hibernate:\n \nWe can extend HibernateDAOSupport and apply an AOP \ninterceptor node to use Hibernate.\nWe can also use HibernateTemplate and Callback to access\nHibernate. This is based on Inversion of Control"},{"number":672,"categorie":"Spring","question":"What types of Object Relational Mapping (ORM) are supported by Spring?","reponse":"Spring supports following Object Relational Mapping (ORM)\nframeworks:\n \nHibernate\nJava Persistence API (JPA)\nTopLink\nJava Data Objects (JDO)\nApache Object Relational Bridge (ORB"},{"number":673,"categorie":"Spring","question":"How will you integrate Spring and Hibernate by using HibernateDaoSupport?","reponse":"We can use following steps for integrating Spring and Hibernate:\n \nAdd dependencies for Spring and Hibernate in pom.xml\nImplement DAO from HibernateDaoSupport\nUse Hibernate functions via getHibernateTemplate() method"},{"number":674,"categorie":"Spring","question":"What are the different types of the Transaction Management supported by Spring framework?","reponse":"Spring framework provides support for two types of Transaction\nManagement:\n \nProgrammatic: In this method, we have to manage Transaction by\nprogramming explicitly. It provides flexibility to a developer, but it\nis not easier to maintain.\n \nDeclarative: In this approach, we can separate Transaction\nManagement from the Application Business code. We can use\nannotations or XML based configuration to manage the transactions\nin declarative approach."},{"number":675,"categorie":"Spring","question":"What are the benefits provided by Spring Framework’s Transaction Management?","reponse":"Main benefits provided by Spring Transaction Management are:\n \nConsistent: By using Spring Transaction management, we can use\nconsistent programming model across different transaction APIs\nlike- JPA, JDBC, JTA, Hibernate, JPA, JDO etc.\n \nSimplicity: Spring TM provides simple API for managing the\ntransaction programmatically.\n \nDeclarative: Spring also supports annotation or xml based\ndeclarative transaction management.\n \nIntegration: Spring Transaction management is easier to integrate\nwith other data access abstractions of Spring."},{"number":676,"categorie":"Spring","question":"Given a choice between declarative and programmatic Transaction Management, which method will you choose?","reponse":"In Spring, Declarative Transaction Management is the preferred\nchoice. This method is very less invasive and it has very less\nimpact in Application Business Logic.\n \nAlthough Declarative method gives less flexibility than\nProgrammatic method, it is simpler to use and easier to maintain in\nlong run."},{"number":677,"categorie":"Spring","question":"What is Aspect Oriented Programming (AOP)","reponse":"Aspect Oriented Programming (AOP) is a programming paradigm\nthat promotes programmers to develop code in different modules\nthat can be parallel or in crosscutting concerns.\n \nE.g. To develop banking software, one team can work on business\nlogic for Money withdrawal, Money deposit, Money Transfer etc.\nThe other team can work on Transaction Management for\ncommitting the transaction across multiple accounts.\n \nIn an Auto company, one team can work on software to integrate\nwith different components of car. The other team can work on how\nall the components will send signal and current information to a\ncommon dashboard."},{"number":678,"categorie":"Spring","question":"What is an Aspect in Spring?","reponse":"An Aspect is the core construct of AOP. It encapsulates the behavior\nthat affects multiple classes in a reusable module.\n \nAn Aspect can have a group of APIs that provide cross-cutting\nfeatures.\n \nE.g. A logging module can be an Aspect in an Application.\n \nAn application can have multiple of Aspects based on the different\nrequirements.\n \nAn Aspect can be implemented by using annotation @Aspect on a\nclass."},{"number":679,"categorie":"Spring","question":"In Spring AOP, what is the main difference between a Concern and a Cross cutting concern?","reponse":"A Concern in Spring is the behavior or expectation from an\napplication. It can be the main feature that we want to implement in\nthe application.\n \nA Cross cutting concern is also a type of Concern. It is the feature or\nfunctionality that is spread throughout the application in a thin way.\n \nE.g. Security, Logging, Transaction Management etc. are cross\ncutting concerns in an application."},{"number":680,"categorie":"Spring","question":"What is a Joinpoint in Spring AOP?","reponse":"In Spring AOP, Joinpoint refers to a candidate point in application\nwhere we can plug in an Aspect.\n \nJoinpoint can be a method or an exception or a field getting\nmodified.\n \nThis is the place where the code of an Aspect is inserted to add new\nbehavior in the existing execution flow."},{"number":681,"categorie":"Spring","question":"What is an Advice in Spring AOP?","reponse":"An Advice in Spring AOP, is an object containing the actual action\nthat an Aspect introduces.\n \nAn Advice is the code of cross cutting concern that gets executed.\n \nThere are multiple types of Advice in Spring AOP."},{"number":682,"categorie":"Spring","question":"What are the different types of Advice in Spring AOP?","reponse":"Spring AOP provides five kinds of Advice:\n \n1. Before Advice: This type of advice runs just before a\nmethod executes. We can use @Before annotation for this.\n \n2. After (finally) Advice: This type of advice runs just after a\nmethod executes. Even if the method fails, this advice will\nrun. We can use @After annotation here.\n \n3. After Returning Advice: This type of advice runs after a\nmethod executes successfully. @AfterReturning annotation\ncan be used here.\n \n4. After Throwing Advice: This type of advice runs after a\nmethod executes and throws an exception. The annotation\nto be used is @AfterThrowing.\n \n5. Around Advice: This type of advice runs before and after\nthe method is invoked. We use @Around annotation for\nthis."},{"number":683,"categorie":"Spring","question":"What is a Pointcut in Spring AOP?","reponse":"A Pointcut in Spring AOP refers to the group of one or more\nJoinpoints where an advice can be applied.\n \nWe can apply Advice to any Joinpoint. But we want to limit the\nplaces where a specific type of Advice should be applied. To\nachieve this we use Pointcut.\n \nWe can use class names, method names or regular expressions to\nspecify the Pointcuts for an Advice."},{"number":684,"categorie":"Spring","question":"What is an Introduction in Spring AOP?","reponse":"In Spring AOP we can declare additional methods or fields on\nbehalf of a type. To do this we use an Introduction. It is also known\nas inter-type declaration.\n \nE.g. We can use an Introduction for making a bean implement\nIsModified interface."},{"number":685,"categorie":"Spring","question":"What is a Target object in Spring AOP?","reponse":"A Target object is the object that gets Advice from one or more\nAspects.\n \nThis is also known as advised object.\n \nIn most cases it is a proxy object."},{"number":686,"categorie":"Spring","question":"What is a Proxy in Spring AOP?","reponse":"In Spring AOP, a Proxy is an object created by the AOP framework\nto implement Aspect contracts. It is generally a JDK dynamic proxy\nor CGLIB proxy."},{"number":687,"categorie":"Spring","question":"What are the different types of AutoProxy creators in Spring?","reponse":"Spring AOP provides following standard types of Autoproxy\ncreators:\n \n1. BeanNameAutoProxyCreator: This is a\nBeanPostProcessor that creates AOP proxies for beans\nautomatically by matching names.\n \n2. DefaultAdvisorAutoProxyCreator: This creator is more\npowerful that other Proxy Creators. This also applies\neligible advisors automatically to bean in the current\ncontext.\n \n3. AbstractAdvisorAutoProxyCreator: This is the parent\nclass of DefaultAdvisorAutoProxyCreator. We can create\nour own auto-proxy creators by extending this class."},{"number":688,"categorie":"Spring","question":"What is Weaving in Spring AOP?","reponse":"In Aspect oriented programming, linking Aspects with the other\napplication types creates an Advised object. This process is known\nas Weaving.\n \nWithout Weaving, we just have definition of Aspects. Weaving\nmakes use realize full potential of the AOP.\n \nWeaving can be done at compile time, load time or at run time."},{"number":689,"categorie":"Spring","question":"In Spring AOP, Weaving is done at compile time or run time?","reponse":"Spring container performs Weaving at run time."},{"number":690,"categorie":"Spring","question":"What is XML Schema-based Aspect implementation?","reponse":"Spring allows for implementing Aspect by using regular classes and\nXML based configurations. This is different from Annotation based\nAspect implementation. But it achieves the same goal of AOP.\n \nWe can use elements like <aop:aspect id=”testAspect\"\nref=\"testBean\" /> and <aop:pointcut id=\"testPointcut\" /> in Spring\nXML config file.\n \nTo use this we need to import Spring AOP schema as follows:\n \n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:aop=\"http://www.springframework.org/schema/aop\"\n   \nxsi:schemaLocation=\"http://www.springframework.org/schema/beans\n    http://www.springframework.org/schema/beans/spring-beans-\n3.0.xsd\n    http://www.springframework.org/schema/aop\n    http://www.springframework.org/schema/aop/spring-aop-3.0.xsd\n\">"},{"number":691,"categorie":"Spring","question":"What is Annotation-based aspect implementation in Spring AOP?","reponse":"This is a declarative style AOP implementation. In this case, we use\nannotations like @Aspect, @Pointcut, @Joinpoint etc. to annotate\ncode with different types of AOP elements.\n \nThis can be used Java 5 onwards, when the support for Annotations\nwas introduced."},{"number":692,"categorie":"Spring","question":"How does Spring MVC framework work?","reponse":"Spring provides its own Model View Controller (MVC) framework\nfor developing web applications.\n \nSpring MVC framework is based on Inversion of Control (IOC)\nprinciple. It separates the business objects from controller.\n \nIt is designed around the DispatcherServlet that is responsible for\ndispatching requests to relevant handlers.\n \nSpring MVC framework also supports annotation based binding of\nrequest parameters."},{"number":693,"categorie":"Spring","question":"What is DispatcherServlet?","reponse":"In Spring MVC, DispatcherServlet is the core servlet that is\nresponsible for handling all the requests and dispatching these to\nhandlers.\n \nDispatcher servlet knows the mapping between the method to be\ncalled and the browser request. It calls the specific method and\ncombines the results with the matching JSP to create an html\ndocument, and then sends it back to browser.\n \nIn case of RMI invocation, it sends back response to the client\napplication."},{"number":694,"categorie":"Spring","question":"Can we have more than one DispatcherServlet in Spring MVC?","reponse":"Yes, a Spring MVC web application can have more than one\nDispatcherServlets.\nEach DispatcherServlet has to operate in its own namespace. It has\nto load its own ApplicationContext with mappings, handlers, etc.\n \nOnly the root application context will be shared among these\nServlets."},{"number":695,"categorie":"Spring","question":"What is WebApplicationContext in Spring MVC?","reponse":"WebApplicationContext is the child of plain ApplicationContext. It\nis used in web applications. It provides features to deal with web-\nrelated components like- controllers, view resolvers etc.\n \nA Web Application can have multiple WebApplicationContext to\nhandle requests.\n \nEach DispatcherServlet is associated with one\nWebApplicationContext."},{"number":696,"categorie":"Spring","question":"What is Controller in Spring MVC framework?","reponse":"Controller is an interface in Spring MVC. It receives\nHttpServletRequest and HttpServletResponse in web app just like\nan HttpServlet, but it is able to participate in an MVC flow.\n \nControllers are similar to a Struts Action in a Struts based Web\napplication.\n \nSpring recommends that the implementation of Controller interface\nshould be a reusable, thread-safe class, capable of handling\nmultiple HTTP requests throughout the lifecycle of an application.\n \nIt is preferable to implement Controller by using a JavaBean.\n \nController interprets user input and transforms it into a model. The\nmodel is represented to the user by a view.\n \nSpring implements a controller in a very generic way. This enables\nus to create a wide variety of controllers.\nWhat is @Controller annotation in Spring MVC?\n \nWe use @ Controller annotation to indicate that a class is a\nController in Spring MVC.\n \nThe dispatcher in Spring scans for @Controller annotated classes\nfor mapped methods and detects @RequestMapping."},{"number":697,"categorie":"Spring","question":"What is @RequestMapping annotation in Spring?","reponse":"In Spring MVC, we use @RequestMapping annotation to map a web\nrequest to either a class or a handler method.\n \nIn @RequestMapping we can specify the path of URL as well as\nHTTP method like- GET, PUT, POST etc.\n \n@RequestMapping also supports specifying HTTP Headers as\nattributes.\n \nWe can also map different media types produced by a controller in\n@RequestMapping. We use HTTP Header Accepts for this purpose.\n \nE.g. @RequestMapping(\n  value = \"/test/mapping\",\n  method = GET,\n  headers = \"Accept=application/json\")"},{"number":698,"categorie":"Spring","question":"What are the main features of Spring MVC?","reponse":"Spring MVC has following main features:\n \n1. Clear separation of role: In Spring MVC, each\nrole like- controller, validator, command object, form\nobject, model object, DispatcherServlet, handler mapping,\nview resolver etc. is fulfilled by a specialized object.\n \n2. Reusability: Spring MVC promotes reusable business code\nthat reduces the need for duplication. We can use existing\nbusiness objects as command or form objects instead of\ncopying them to extend a particular framework base class.\n \n3. Flexible Model Transfer: Spring MVC Model transfer\nsupports easy integration with other view technologies as\nwell.\n \n4. Customizable binding and validation: In Spring MVC, we\ncan to custom binding between Requests and Controllers.\nEven validation can be done on non-String values as well.\n \n5. JSP form tag library: From Spring 2.0, there is a powerful\nJSP form tag library that makes writing forms in JSP pages\nmuch easier.\n \n6. Customizable locale, time zone and theme resolution:\nSpring MVC supports customization in locale, timezone\netc."},{"number":699,"categorie":"Spring","question":"What is the difference between a Singleton and Prototype bean in Spring?","reponse":"Every bean in Spring has a scope that defines its existence\ntimeframe in the application.\n \nSingleton scope for bean limits a bean to a single object instance\nper Spring IOC container.\n \nThis single instance is limited to a specific ApplicationContext. If\nthere are multiple ApplicationContext then we can have more than\none instance of bean.\n \nBy default all the beans in Spring framework are Singleton scope\nbeans.\n \n \nWith Prototype scope a single bean definition can have multiple\nobject instances in a Spring container.\n \nIn prototype scope bean, the Spring IoC container creates new bean\ninstance of the object every time a request for that specific bean is\nmade."},{"number":700,"categorie":"Spring","question":"How will you decide which scope- Prototype or Singleton to use for a bean in Spring?","reponse":"In general, we use prototype scope for all stateful beans and\nsingleton scope for stateless beans.\n \nSince a stateless bean does not maintain any state, we can use the\nsame object instance again and again. Singleton scope bean serves\nthe same purpose.\n \nIn a stateful bean, there is a need to maintain the state in each\nrequest, it is necessary to use a new instance of object with each\ncall. A Prototype scope bean ensures that we get a new instance\neach time we request for the object."},{"number":701,"categorie":"Spring","question":"What is the difference between Setter and Constructor based Dependency Injection (DI) in Spring framework?","reponse":"Main differences between Setter and Constructor based\nDependency Injection (DI) in Spring are:\n \nPriority: Setter based injection has higher priority than a constructor\nbased injection in Spring. If an application uses Setter as well as\nConstructor injection, Spring container uses the Setter injection.\n \nPartial dependency: We can inject partial dependency by using\nSetter injection. In Constructor injection, it is not possible to do just\na partial dependency injection.\n \nE.g. If there are two properties in a class, we can use Setter method\nto inject just one property in the class.\n \nFlexibility: Setter injection gives more flexibility in introducing\nchanges. One can easily change the value by Setter injection. In case\nof Constructor injection a new bean instance has to be created\nalways.\n \nReadability: Setter injection is more readable than Constructor\ninjection. Generally Setter method name is similar to dependency\nclass being used in setter method."},{"number":702,"categorie":"Spring","question":"What are the drawbacks of Setter based Dependency Injection (DI) in Spring?","reponse":"Although Setter based Dependency Injection has higher priority than\nConstructor based DI, there are some disadvantages of it.\n \nNo Guarantee: In Setter based DI, there is no guarantee that a\ncertain dependency is injected or not. We may have an object with\npartial or no dependency. Whereas in Constructor based DI, an\nobject in not created till the time all the dependencies are ready.\n \nSecurity: One can use Setter based DI to override another\ndependency. This can cause Security breach in a Spring application.\n \n \nCircular Dependency: Setter based DI can cause circular\ndependency between objects. Where as Constructor based DI will\nthrow ObjectCurrentlyInCreationException if there is a circular\ndependency during the creation of an object."},{"number":703,"categorie":"Spring","question":"What are the differences between Dependency Injection (DI) and Factory Pattern?","reponse":"Main differences between Dependency Injection (DI) and Factory\nPattern are:\n \n \nCoupling: Factory pattern adds tight coupling between an object,\nfactory and dependency. In case of DI, there is no coupling between\nobjects. We just mention the dependencies on different objects and\ncontainer resolves and introduces these dependencies.\n \nEasier Testing: DI is easier to test, since we can inject the mock\nobjects as dependency in Test environment. In case of Factory\npattern, we need to create actual objects for testing.\n \nFlexibility: DI allows for switching between different DI\nframeworks easily. It gives flexibility in the choice of DI\nframework.\n \nContainer: DI always needs a container for injecting the\ndependencies. This leads to extra overhead as well as extra code in\nyour application. In factory pattern, you can just use POJO classes\nto implement the application without any container.\n \nCleaner Code: DI code is much cleaner than Factory pattern based\ncode. In DI, we do not need to add extra code for factory methods."},{"number":704,"categorie":"Spring","question":"In Spring framework, what is the difference between FileSystemResource and ClassPathResource?","reponse":"In Spring we can specify configuration by using a file or classpath.\n \nIn FileSystemResource we have to give absolute path / relative path\nof Spring Configuration file spring-config.xml file.\n \nIn ClassPathResource Spring looks for Spring Configuration file\nspring-config.xml in ClassPath. Therefore, developer has to include\nspring-config.xml in classpath.\n \nClassPathResource looks for configuration file in CLASSPATH,\nwhereas FileSystemResource looks for configuration file in file\nsystem."},{"number":705,"categorie":"Spring","question":"Name some popular Spring framework annotations that you use in your project?","reponse":"Spring has many Annotations to serve different purposes. For\nregular use we refer following popular Spring annotations:\n \n@Controller: This annotation is for creating controller classes in a\nSpring MVC project.\n \n@RequestMapping: This annotation maps the URI to a controller\nhandler method in Spring MVC.\n \n@ResponseBody: For sending an Object as response we use this\nannotation.\n \n@PathVariable: To map dynamic values from a URI to handler\nmethod arguments, we use this annotation.\n \n@Autowired: This annotation indicates to Spring for auto-wiring\ndependencies in beans.\n \n@Service: This annotation marks the service classes in Spring.\n \n@Scope: We can define the scope of Spring bean by this annotation.\n \n@Configuration: This an annotation for Java based Spring\nconfiguration.\n \n@Aspect, @Before, @After, @Around, @Joinpoint, @Pointcut:\nThese are the annotations in Spring for AspectJ AOP."},{"number":706,"categorie":"Spring","question":"How can you upload a file in Spring MVC Application?","reponse":"In Spring MVC framework we can use MultipartResolver interface\nto upload a file. We need to make configuration changes to make it\nwork. After uploading the file, we have to create Controller handler\nmethod to process the uploaded file in application."},{"number":707,"categorie":"Spring","question":"What are the different types of events provided by Spring framework?","reponse":"Spring framework provides following five events for Context:\n \nContextRefreshedEvent: Whenever ApplicationContext is\ninitialized or refreshed, Spring publishes this event. We can also\nraise it by using refresh() method on\nConfigurableApplicationContext interface.\n \nContextStartedEvent: When ApplicationContext is started using\nstart() method on ConfigurableApplicationContext interface,\nContextStartedEvent is published. We can poll database or restart\nany stopped application after receiving this event.\n \nContextStoppedEvent: Spring publishes this event when\nApplicationContext is stopped using stop() method on\nConfigurableApplicationContext interface. This is used for doing\nany cleanup work.\n \nContextClosedEvent: Once the ApplicationContext is closed using\nclose() method, ContextClosedEvent is published. Once a context is\nclosed, it is the last stage of its lifecycle. After this it cannot be\nrefreshed or restarted.\n \nRequestHandledEvent: This is a web specific event that informs to\nall beans that an HTTP request has been serviced."},{"number":708,"categorie":"Spring","question":"What is the difference between DispatcherServlet and ContextLoaderListener in Spring?","reponse":"DispatcherServlet is the core of Spring MVC application. It loads\nSpring bean configuration file and initialize all the beans mentioned\nin config file.\n \nIn case we have enabled annotations in Spring config file, it also\nscans the packages and configures any bean annotated with\n@Component, @Controller, @Repository or @Service annotations.\n \nContextLoaderListener is a listener to start up and shut down\nSpring’s root WebApplicationContext. ContextLoaderListener links\nthe lifecycle of ApplicationContext to the lifecycle of the\nServletContext. It automates the creation of ApplicationContext. It\ncan also be used to define shared beans used across different spring\ncontexts."},{"number":709,"categorie":"Spring","question":"How will you handle exceptions in Spring MVC Framework?","reponse":"Spring MVC Framework provides following mechanisms to help us\nachieve exception handling:\n \nController Based: A developer can define exception handler\nmethods in a Controller class. To do so, they have to annotate the\nmethods with @ExceptionHandler annotation.\n \nGlobal Exception Handler: Spring provides @ControllerAdvice\nannotation for exception handling as cross-cutting concern. We can\nmark any class as global exception handler by using this annotation.\n \nHandlerExceptionResolver implementation: Spring Framework\nprovides HandlerExceptionResolver interface that can be\nimplemented to create a global exception handler."},{"number":710,"categorie":"Spring","question":"What are the best practices of Spring Framework?","reponse":"In Spring Framework, following are some of the best practices:\n \nWe can Divide spring bean configurations based on their concerns\nsuch as spring-jdbc.xml, spring-security.xml.\n \nIt is better to avoid version numbers in schema reference. This\nmakes sure that we have the latest config files.\n \nIt is a good practice to configure bean dependencies as much as\npossible. Unless there is a good reason, we try to avoid autowiring.\n \nFor spring beans that are used in multiple contexts in Spring MVC,\nwe can create them in root context and initialize with listener.\n \nSpring framework provides many features and modules. We should\njust use what we need for our application. An extra dependency has\nto be removed\n \nFor application properties, it is good to create a property file and\nread it in Spring configuration file.\n \nAnnotations are useful for smaller applications, but for larger\napplications annotations can become an overhead. It is easier to\nmaintain if all the configurations are in xml files.\n \nWhen we are doing AOP, we have to make sure to keep the\nJoinpoint as narrow as possible to avoid Advice on unwanted\nmethods.\n \nWe should use right annotation for components or services. For\nservices use @Service and for DAO beans use @Repository.\n Dependency Injection (DI) has to be used when there is real benefit.\nIt should not be used just for the sake of loose coupling"},{"number":711,"categorie":"Spring","question":"What is Spring Boot?","reponse":"Spring Boot is a ready made solution to create Spring applications\nwith production grade features. It favors convention over\nconfiguration.\n \nWe can embed Tomcat or Jetty in in an application created with\nSpring Boot. Spring Boot automatically configures Spring in an\napplication.\n \nIt does not require any code generation or xml configuration. It is an\neasy solution to create applications that can run stand-alone.\n Hibernate"},{"number":712,"categorie":"Hibernate","question":"What is Hibernate framework?","reponse":"Hibernate is a popular Object Relational Mapping (ORM)\nframework of Java. It helps in mapping the Object Oriented Domain\nmodel to Relational Database tables.\n \nHibernate is a free software distributed under GNU license.\n \nHibernate also provides implementation of Java Persistence API\n(JPA).\n \nIn simple words, it is a framework to retrieve and store data from\ndatabase tables from Java."},{"number":713,"categorie":"Hibernate","question":"What is an Object Relational Mapping (ORM)?","reponse":"Object Relational Mapping (ORM) is a programming technique to\nmap data from a relational database to Object oriented domain\nmodel. This is the core of Hibernate framework.\n \nIn case of Java, most of the software is based on OOPS design. But\nthe data stored in Database is based on Relation Database\nManagement System (RDBMS).\n \nORM helps in data retrieval in an Object Oriented way from an\nRDBMS. It reduces the effort of developers in writing queries to\naccess and insert data."},{"number":714,"categorie":"Hibernate","question":"What is the purpose of Configuration Interface in Hibernate?","reponse":"Configuration interface can be implemented in an application to\nspecify the properties and mapping documents for creating a\nSessionFactory in Hibernate.\n \nBy default, a new instance of Configuration uses properties\nmentioned in hibernate.properties file.\n \nConfiguration is mainly an initialization time object that loads the\nproperties in helps in creating SessionFactory with these properties.\n \nIn short, Configuration interface is used for configuring Hibernate\nframework in an application."},{"number":715,"categorie":"Hibernate","question":"What is Object Relational Impedance Mismatch?","reponse":"Object Relational Impedance Mismatch (ORIM) is also known as\nparadigm mismatch. It means that Object model and Relational\nmodel do not work well with each other.\n \nRelational model or a RDBMS represents data in tabular format\nlike a spreadsheet. Object model or OOPS represents the data as an\ninter-connected graph of objects.\n \nMixing these two models leads to various problems. The common\nname for these issues is Object Relational Impedance Mismatch"},{"number":716,"categorie":"Hibernate","question":"What are the main problems of Object Relational Impedance Mismatch?","reponse":"Object model and Relational models (RDBMS) have following\nproblems that are part of Object Relational Impedance Mismatch:\n \nGranularity: Object model is more granular than Relational model.\nThere are more classes in object model than the corresponding\ntables in relational model.\n \nInheritance: Object model supports inheritance. But Relational\nmodel does not have any concept of inheritance.\n \nIdentity: Relational model has just one criteria for sameness of data.\nIt is based on primary key. In object model like Java we can have\nequals as well as == for sameness of objects.\n \nAssociations: In Object model associations are uni-directional. In\nRDBMS, there is a concept of foreign key for association. Also\nmultiplicity of a relationship is hard to judge by looking at object\nmodel.\n \nData navigation: In Object model, you can move from one object to\nanother object for getting data. Egg. you can retrieve and Employee\nobject, then go to its department object and then get the employees\nin the department object. In RDBMS, we try to minimize the SQL\ncalls, so we get all the data by using joins."},{"number":717,"categorie":"Hibernate","question":"What are the key characteristics of Hibernate?","reponse":"Hibernate has following key characteristics:\n \nObject/Relational Mapping (ORM): Hibernate provides ORM\ncapabilities to developers. So then can write code in Object model\nfor connecting with data in Relational model.\n \nJPA Provider: Hibernate provides an excellent implementation of\nJava Persistence API (JPA) specification.\n \nIdiomatic persistence: Hibernate provides persistence based on\nnatural Object-oriented idioms with full support for inheritance,\npolymorphism, association, composition, and the Java collections\nframework. It can work with any data for persistence.\n \nHigh Performance: Hibernate provides high level of performance\nsupporting features like- lazy initialization, multiple fetching\nstrategies, optimistic locking  etc. Hibernate does not need its own\ndatabase tables or fields. It can generate SQL at system\ninitialization to provide better performance at runtime.\n \nScalability: Hibernate works well in multi server clusters. It has\nbuilt in scalability support. It can work well for small projects as\nwell as for large business software.\n \nReliable: Hibernate very reliable and stable framework. This is the\nreason for its worldwide acceptance and popularity among\ndeveloper community.\n \nExtensible: Hibernate is quite generic in nature. It can be configured\nand extended as per the use case of application."},{"number":718,"categorie":"Hibernate","question":"Can you tell us about the core interfaces of Hibernate framework?","reponse":"The core interfaces of Hibernate framework are as follows:\n \nConfiguration: Configuration interface can be implemented in an\napplication to specify the properties and mapping documents for\ncreating a SessionFactory in Hibernate. Hibernate application\nbootstraps by using this interface.\n \nSessionFactory: In Hibernate, SessionFactory is used to create and\nmanage Sessions. Generally, there is one SessionFactory created for\none database. It is a thread-safe interface that works well in multi-\nthreaded applications.\n \nSession: Session is a lightweight object that is used at runtime\nbetween a Java application and Hibernate. It contains methods to\ncreate, read and delete operations for entity classes. It is a basic\nclass that abstracts the concept of persistence.\n \nTransaction: This is an optional interface. It is a short lived object\nthat is used for encapsulating the overall work based on unit of\nwork design pattern. A Session can have multiple Transactions.\n \nQuery: This interface encapsulates the behavior of an object-\noriented query in Hibernate. It can accept parameters and execute\nthe queries to fetch results. Same query can be executed multiple\ntimes.\n \nCriteria: This is a simplified API to retrieve objects by creating\nCriterion objects. It is very easy to use for creating Search like\nfeatures."},{"number":719,"categorie":"Hibernate","question":"How will you map the columns of a DB table to the properties of a Java class in Hibernate?","reponse":"We can map the class properties and table columns by using one of\nthe two ways:\n \nXML: We can map the column of a table to the property of a class in\nXML file. It is generally with extension hbm.xml\n \nAnnotation: We can also use annotations @Entity and @Table to\nmap a column to the property of a class."},{"number":720,"categorie":"Hibernate","question":"Does Hibernate make it mandatory for a mapping file to have .hbm.xml extension?","reponse":"No. It is a convention to have.hbm.xml extension in the name of a\nmapping file. It is not a requirement enforced by Hibernate. We can\nuse any other extension of our convenience for this."},{"number":721,"categorie":"Hibernate","question":"What are the steps for creating a SessionFactory in Hibernate?","reponse":"Steps to create a SessionFactory in Hibernate are:\n \nConfiguration: First create a Configuration object. This will refer to\nthe path of configuration file.\nResource: Add config file resource to Configuration object.\nProperties: Set properties in the Configuration object.\nSessionFactory: Use Configuration object to build SessionFactory.\n \nEgg.\n \nConfiguration config = new Configuration();\nconfig.addResource(“testInstance/configuration.hbm.xml”);\nconfig.setProperties( System.getProperties() );\nSessionFactory sessions = config.buildSessionFactory();"},{"number":722,"categorie":"Hibernate","question":"Why do we use POJO in Hibernate?","reponse":"POJO stands for Plain Old Java Objects. A POJO is java bean with\ngetter and setter methods for each property of the bean.\n \nIt is a simple class that encapsulates an object’s properties and\nprovides access through setters and getters.\n \nSome of the reasons for using POJO in Hibernate are:\n \nPOJO emphasizes the fact that this class is a simple Java class, not\na heavy class like EJB.\n \nPOJO is a well-constructed class, so it works well with Hibernate\nproxies.\n \nPOJO also comes with a default constructor that makes it easier to\npersist with a default constructor."},{"number":723,"categorie":"Hibernate","question":"What is Hibernate Query Language (HQL)?","reponse":"Hibernate Query Language is also known as HQL. It is an Object\nOriented language. But it is similar to SQL.\n \nHQL works well with persistent objects and their properties. HQL\ndoes not work on database tables.\n \nHQL queries are translated into native SQL queries specific to a\ndatabase.\n \nHQL supports direct running of native SQL queries also. But it\ncreates an issue in Database portability."},{"number":724,"categorie":"Hibernate","question":"How will you call a stored procedure in Hibernate?","reponse":"Hibernate supports executing not only simple queries but also\nstored procedure of database. There are three ways to call a stored\nprocedure in Hibernate:\n \nXML mapping file:\nWe can declare the store procedure inside XML Mapping file.\n \n<!-- Employee.hbm.xml -->\n...\n<hibernate-mapping>\n    <class name=\"com.testHibernate.util.Employee\"\ntable=\"employee\" ...>\n        <id name=\"employeeId\" type=\"java.lang.Integer\">\n            <column name=“EMPLOYEE_ID\" />\n            <generator class=\"identity\" />\n        </id>\n        <property name=\"employeeId\" type=\"string\">\n            <column name=\"EMPLOYEE_ID\" length=\"10\" not-\nnull=\"true\" unique=\"true\" />\n        </property>\n</class>\n \n    <sql-query name=\"callEmployeeStoreProcedure\">\n<return alias=\"employee\"\nclass=\"com.testHibernate.util.Employee\"/>\n<![CDATA[CALL GetEmployees(:employeeId)]]>\n    </sql-query>\n \n</hibernate-mapping>\nWe can call it with getNamedQuery().\n \nQuery query =session.getNamedQuery(\"callEmployeeStoreProcedure\")\n.setParameter(\"employeeId\", “1234”);\nList result = query.list();\nfor(int i=0; i<result.size(); i++){\nEmployee employee = (Employee)result.get(i);\nSystem.out.println(employee.getEmployeeCode());\n}\n \nNative SQL: We can use Native SQL to call a store procedure query\ndirectly. In this example GetEmployees() stored procedure is being\ncalled.\n \nQuery query = session.createSQLQuery(\n\"CALL GetEmployees(:employeeId)\")\n.addEntity(Employee.class)\n.setParameter(\"employeeId\", “1234);\n \nList result = query.list();\nfor(int i=0; i<result.size(); i++){\nEmployee employee = (Employee) result.get(i);\nSystem.out.println(employee.getEmployeeCode());\n}\n \nUse annotation:\nWe can also mark out stored procedure with\n@NamedNativeQueries annotation.\n \n//Employee.java\n \n@NamedNativeQueries({\n@NamedNativeQuery(\nname = \"callEmployeeStoreProcedure\",\nquery = \"CALL GetEmployees(:employeeId)\",\nresultClass = Employee.class\n)\n})\n@Entity@Table(name = \"employee\")\npublic class Employee implements java.io.Serializable {\n...\nCall it with getNamedQuery().\n \nQuery query =\nsession.getNamedQuery(\"callEmployeeStoreProcedure\")\n.setParameter(\"employeeId\", “1234”);\nList result = query.list();\nfor(int i=0; i<result.size(); i++){\nEmployee employee = (Employee)result.get(i);\nSystem.out.println(employee.getEmployeeCode());\n}"},{"number":725,"categorie":"Hibernate","question":"What is Criteria API in Hibernate?","reponse":"Criteria is a simplified API in Hibernate to get entities from\ndatabase by creating Criterion objects.\n \nIt is a very intuitive and convenient approach for search features.\nUsers can specify different criteria for searching entities and\nCriteria API can handle these.\n \nCriterion instances are obtained through factory methods on\nRestrictions."},{"number":726,"categorie":"Hibernate","question":"Why do we use HibernateTemplate?","reponse":"This is a trap question. HibernateTemplate has been deprecated.\nThere were earlier good reasons to use HibernateTemplate. But\nnow the trend has changed towards not using it anymore."},{"number":727,"categorie":"Hibernate","question":"How can you see SQL code generated by Hibernate on console?","reponse":"To display the SQL generated by Hibernate, we have to turn on the\nshow_sql flag.\n \nThis can be done in Hibernate configuration as follows:\n \n<property name=”show_sql”>true</property>"},{"number":728,"categorie":"Hibernate","question":"What are the different types of collections supported by Hibernate?","reponse":"Hibernate supports following two types of collections:\n \nIndexed Collections: List and Maps\nSorted Collections: java.util.SortedMap and java.util.SortedSet"},{"number":729,"categorie":"Hibernate","question":"What is the difference between session.save() and session.saveOrUpdate() methods in Hibernate?","reponse":"Save method first stores an object in the database. Then it persists\nthe given transient instance by assigning a generated identifier.\nFinally, it returns the id of the entity that is just created.\n \nSaveOrUpdate() method calls either save() or update() method. It\nselects one of these methods based on the existence of identifier.\n \nIf an identifier exists for the entity then update() method is called. If\nthere is no identifier for the entity then save() method is called as\nmentioned earlier."},{"number":730,"categorie":"Hibernate","question":"What are the advantages of Hibernate framework over JDBC?","reponse":"Main advantages of Hibernate over JDBC are as follows:\n \nDatabase Portability: Hibernate can be used with multiple types of\ndatabase with easy portability. In JDBC, developer has to write\ndatabase specific native queries. These native queries can reduce\nthe database portability of the code.\n \nConnection Pool: Hibernate handles connection pooling very well.\nJDBC requires connection pooling to be defined by developer.\n \nComplexity: Hibernate handles complex query scenarios very well\nwith its internal API like Criteria. So developer need not gain\nexpertise in writing complex SQL queries. In JDBC application\ndeveloper writes most of the queries."},{"number":731,"categorie":"Hibernate","question":"How can we get statistics of a SessionFactory in Hibernate?","reponse":"In Hibernate we can get the statistics of a SessionFactory by using\nStatistics interface. We can get information like Close Statement\ncount, Collection Fetch count, Collection Load count, Entity insert\ncount etc."},{"number":732,"categorie":"Hibernate","question":"What is the Transient state of an object in Hibernate?","reponse":"When an object is just instantiated using the new operator but is not\nassociated with a Hibernate Session, then the object is in Transient\nstate.\n \nIn Transient state,  object does not have a persistent representation\nin database. Also there is no identifier assigned to an object in\nTransient state.\n \nAn object in Transient state can be garbage collected if there is no\nreference pointing to it"},{"number":733,"categorie":"Hibernate","question":"What is the Detached state of an object in Hibernate?","reponse":"An object is in detached state if it was persistent earlier but its\nSession is closed now.\n \nAny reference to this object is still valid. We can even update this\nobject. Later on we can even attach an object in detached state to a\nnew session and make it persistent.\n \nDetached state is very useful in application transactions where a\nuser takes some time to finish the work"},{"number":734,"categorie":"Hibernate","question":"What is the use of Dirty Checking in Hibernate?","reponse":"Dirty Checking is very useful feature of Hibernate for write to\ndatabase operations. Hibernate monitors all the persistent objects\nfor any changes. It can detect if an object has been modified or not.\n \nBy Dirty Checking, only those fields of an object are updated that\nrequire any change in them. It reduces the time-consuming database\nwrite operations."},{"number":735,"categorie":"Hibernate","question":"What is the purpose of Callback interface in Hibernate?","reponse":"Callback interface in Hibernate is mainly used for receiving\nnotifications of different events from an object.\n \nEgg. We can use Callback to get the notification when an object is\nloaded into or removed from database."},{"number":736,"categorie":"Hibernate","question":"What are the different ORM levels in Hibernate?","reponse":"There are following four different ORM levels in Hibernate:\n \nPure Relational ORM: At this level entire application is designed\naround the relational model. All the operations are SQL based at\nthis level.\n \nLight Object Mapping: At this level entity classes are mapped\nmanually to relational tables. Business logic code is hidden from\ndata access code. Applications with less number of entities use this\nlevel.\n \nMedium Object Mapping: In this case, application is designed\naround an object model. Most of the SQL code is generated at\ncompile time. Associations between objects are supported by the\npersistence mechanism. Object-oriented expression language is\nused to specify queries.\n \nFull Object Mapping: This is one of the most sophisticated object\nmodeling level. It supports composition, inheritance, polymorphism\nand persistence. The persistent classes do not inherit any special\nbase class at this level. There are efficient fetching and caching\nstrategies implemented transparently to the application."},{"number":737,"categorie":"Hibernate","question":"What are the different ways to configure a Hibernate application?","reponse":"There are mainly two ways to configure Hibernate application:\n \nXML based: We can define the Hibernate configuration in an XML\nfile like ibernate.cfg.xml file\n \nProgramming based: We can also use code logic to configure\nHibernate in our application."},{"number":738,"categorie":"Hibernate","question":"What is Query Cache in Hibernate?","reponse":"Hibernate provides Query Cache to improve the performance of\nqueries that run multiple times with same parameters.\n \nAt times Query Caching can reduce the performance of\nTransactional processing. By default Query Cache is disabled in\nHibernate.\n \nIt has to be used based on the benefits gained by it in performance\nof the queries in an application."},{"number":739,"categorie":"Hibernate","question":"What are the different types of Association mappings supported by Hibernate?","reponse":"Hibernate supports following four types of Association mappings:\n \nUnidirectional association: This kind of association works in only\none direction.\nUnidirectional association with join tables\nBidirectional association: This kind of association works in both\ndirections.\nBidirectional association with join tables"},{"number":740,"categorie":"Hibernate","question":"What are the different types of Unidirectional Association mappings in Hibernate?","reponse":"In Hibernate there can be following three types of Unidirectional\nAssociation mappings:\n \nMany to one\nOne to one\nOne to many"},{"number":741,"categorie":"Hibernate","question":"What is Unit of Work design pattern?","reponse":"Unit of Work is a design pattern to define business transactions.\n \nA Unit of Work is a list of ordered operations that we want to run on\na database together. Either all of these go together or none of these\ngoes.\n \nMost of the time, we use term business transaction in place of Unit\nof Work.\n \nEgg. In case of money transfer from account A to B, the unit of work\ncan be two operation Debit account A and Credit account B in a\nsequence. Both these operations should happen together and in right\nsequence."},{"number":742,"categorie":"Hibernate","question":"In Hibernate, how can an object go in Detached state?","reponse":"Once the session attached to an Object is closed, the object goes\ninto Detached state. An Object in Detached state can be attached to\nanother session at a later point of time.\n \nThis state is quite useful in concurrent applications that have long\nunit of work."},{"number":743,"categorie":"Hibernate","question":"How will you order the results returned by a Criteria in Hibernate?","reponse":"Hibernate provides an Order criterion that can be used to order the\nresults. This can be order objects based on their property in\nascending or descending order.\n \nClass is org.hibernate.criterion.Order.\n \nOne example is as follows:\n \nEgg.\n \nList employees = session.createCriteria(Employee.class)\n    .add( Restrictions.like(\"name\", \"F%\")\n    .addOrder( Order.asc(\"name\") )\n    .addOrder( Order.desc(\"age\") )\n    .setMaxResults(10)\n    .list()"},{"number":744,"categorie":"Hibernate","question":"How does Example criterion work in Hibernate?","reponse":"In Hibernate, we can create an object with desired properties. Then\nwe can use this object to search for objects with similar object. For\nthis we can use org.hibernate.criterion.Example criterion.\n \nEgg. First we create a sample book object of author Richard and\ncategory mystery. Then we search for similar books.\n \nBook book = new Book();\nbook.setAuthor(‘Richard’);\nbook.setCategory(Category.MYSTERY);\nList results = session.createCriteria(Book.class)\n    .add( Example.create(book) )\n    .list();"},{"number":745,"categorie":"Hibernate","question":"How does Transaction management work in Hibernate?","reponse":"In Hibernate we use Session interface to get a new transaction.\nOnce we get the transaction we can run business operations in that\ntransaction. At the end of successful business operations, we\ncommit the transaction. In case of failure, we rollback the\ntransaction.\n \nSample code is a follows:\n \nSession s = null;\nTransaction trans = null;\ntry {\ns = sessionFactory.openSession();\ntrans = s.beginTransaction();\ndoTheAction(s);\ntrans.commit();\n} catch (RuntimeException exc) {\ntrans.rollback();\n} finally {\ns.close();\n}"},{"number":746,"categorie":"Hibernate","question":"How can we mark an entity/collection as immutable in Hibernate?","reponse":"In Hibernate, by default an entity or collection is mutable. We can\nadd, delete or update an entity/collection.\n \nTo mark an entity/collection as immutable, we can use one of the\nfollowing:\n \n@Immutable: We can use the annotation @Immutable to mark an\nentity/collection immutable.\n \nXML file: We can also set the property mutable=false in the XML\nfile for an entity to make it immutable."},{"number":747,"categorie":"Hibernate","question":"What are the different options to retrieve an object from database in Hibernate?","reponse":"In Hibernate, we can use one of the following options to retrieve\nobjects from database:\n \nIdentifier: We can use load() or get() method and pass the identifier\nlike primary key to fetch an object from database.\n \nHQL: We can create a HQL query and get the object after executing\nthe query.\n \nCriteria API: We can use Criteria API to create the search\nconditions for getting the objects from database.\n \nNative SQL: We can write native SQL query for a database and just\nexecute it to get the data we want and convert it into desired object."},{"number":748,"categorie":"Hibernate","question":"How can we auto-generate primary key in Hibernate?","reponse":"We can use the primary key generation strategy of type\nGenerationType.AUTO  to auto-generate primary key while\npersisting an object in Hibernate.\n \nEgg.\n@Id\n@GeneratedValue(strategy=GenerationType.AUTO)\nprivate int id;\nWe can leave it null/0 while persisting and Hibernate automatically\ngenerates a primary key for us.\n \nSometimes, AUTO strategy refers to a SEQUENCE instead of an\nIDENTITY ."},{"number":749,"categorie":"Hibernate","question":"How will you re-attach an object in Detached state in Hibernate?","reponse":"We can call one of the methods Session.update(),\nSession.saveOrUpdate(), or Session.merge() to re-attach an object\nin detached state with another session in Hibernate."},{"number":750,"categorie":"Hibernate","question":"What is the first level of cache in Hibernate?","reponse":"A Hibernate Session is the first level of cache for persistent data in\na transaction. \n \nThe second level of cache is at JVM or SessionFactory level."},{"number":751,"categorie":"Hibernate","question":"What are the different second level caches available in Hibernate?","reponse":"In Hibernate, we can use different cache providers for implementing\nsecond level cache at JVM/SessionFactory level.\n \nSome of these are:\n \nHashtable\nEHCache\nOSCache\nSwarmCache\nJBoss Cache 1.x\nJBoss Cache 2"},{"number":752,"categorie":"Hibernate","question":"Which is the default transaction factory in Hibernate?","reponse":"In Hibernate, default transaction factory is\nJDBCTransactionFactory. But we can change it by setting the\nproperty hibernate.transaction.factory_class."},{"number":753,"categorie":"Hibernate","question":"What are the options to disable second level cache in Hibernate?","reponse":"This is a trick question. By default Second level cache is already\ndisabled in Hibernate.\n \nIn case, your project is using a second level cache you can use one\nof the following options to disable second level cache in Hibernate:\n \nWe can set hibernate.cache.use_second_level_cache to false.\nWe can use CacheMode.IGNORE to stop interaction between the\nsession and second-level cache. Session will interact with cache\nonly to invalidate cache items when updates occur"},{"number":754,"categorie":"Hibernate","question":"What are the different fetching strategies in Hibernate?","reponse":"Hibernate 3 onwards there are following fetching strategies to\nretrieve associated objects:\n \nJoin fetching: In Join strategy Hibernate uses OUTER join to\nretrieve the associated instance or collection in the same SELECT.\n \nSelect fetching: In Select strategy, Hibernate uses a second SELECT\nto retrieve the associated entity or collection. We can explicitly\ndisable lazy fetching by specifying lazy=\"false\". By default lazy\nfetching is true.\n \nSubselect fetching: In Subselect strategy, Hibernate uses a second\nSELECT to retrieve the associated collections for all entities\nretrieved in a previous query or fetch.\n \nBatch fetching: In Batch strategy, Hibernate uses a single SELECT\nto retrieve a batch of entity instances or collections by specifying a\nlist of primary or foreign keys. This is a very good performance\noptimization strategy for select fetching."},{"number":755,"categorie":"Hibernate","question":"What is the difference between Immediate fetching and Lazy collection fetching?","reponse":"In Immediate fetching an association, collection or attribute is\nretrieved at the same time when the owner is loaded.\nBut in Lazy collection fetching, a collection is fetched only when an\noperation is invoked on that collection by client application.\n \nThis is the default fetching strategy for collections in Hibernate.\n \nLazy fetching is better from performance perspective."},{"number":756,"categorie":"Hibernate","question":"What is ‘Extra lazy fetching’ in Hibernate?","reponse":"In Extra lazy fetching, only individual elements of a collection are\nfetched from the database when they are required.\n \nIn this strategy, Hibernate does not fetch the whole collection into\nmemory unless it is essential.\n \nIt is a good fetching strategy for large collections of objects."},{"number":757,"categorie":"Hibernate","question":"How can we check is a collection is initialized or not under Lazy Initialization strategy?","reponse":"Hibernate provides two convenient methods, Hibernate.initialize()\nand Hibernate.isInitialized() to check whether a collection is\ninitialized or not.\n \nBy using Hibernate.initialize() we can force the initialization of a\ncollection in Hibernate."},{"number":758,"categorie":"Hibernate","question":"What are the different strategies for cache mapping in Hibernate?","reponse":"Hibernate provides following strategies for cache mapping:\n \nRead only: If an application requires caching only for read but not\nfor write operations, then we can use this strategy. It is very simple\nto use and give very good performance benefit.\n \nIt is also safe to use in a cluster environment.\n \nRead/Write: If an application also needs caching for write\noperations, then we use Read/Write strategy.\n \nRead/write cache strategy should not be used if there is requirement\nfor serializable transaction isolation level.\n \nIf we want to use it in a cluster environment, we need to implement\nlocking mechanism.\n \nNonstrict Read/Write: If an application only occasionally updates\nthe data, then we can use this strategy. It cannot be used in systems\nwith serializable transaction isolation level requirement.\n \nTransactional: This strategy supports full transactional cache\nproviders like JBoss TreeCache."},{"number":759,"categorie":"Hibernate","question":"What is the difference between a Set and a Bag in Hibernate?","reponse":"A Bag in Hibernate is an unordered collection. It can have duplicate\nelements. When we persist an object in a bag, there is no guarantee\nthat bag will maintain any order.\n \nA Set in Hibernate can only store unique objects. If we add the same\nelement to set second time, it just replaces the old one. By default a\nSet is unordered collection in Hibernate."},{"number":760,"categorie":"Hibernate","question":"How can we monitor the performance of Hibernate in an application?","reponse":"We can use following ways to monitor Hibernate performance:\n \nMonitoring SessionFactory: Since there is one SessionFactory in an\napplication, we can collect the statistics of a SessionFactory to\nmonitor the performance. Hibernate provides\nsessionFactory.getStatistics() method to get the statistics of\nSessionFactory.\n \nHibernate can also use JMX to publish metrics.\n \nMetrics: In Hibernate we can also collect other metrics like-\nnumber of open sessions, retrieved JDBC connections, cache hit,\nmiss etc.\n \nThese metrics give great insight into the performance of Hibernate.\nWe can tune Hibernate settings and strategies based on these\nmetrics."},{"number":761,"categorie":"Hibernate","question":"How can we check if an Object is in Persistent, Detached or Transient state in Hibernate?","reponse":"We can use following methods to check the state of an object in\nHibernate:\n \nPersistent State: If call to EntityManager.contains(object) returns\ntrue, the object is in Persistent state.\n \nDetached State: If the call to\nPersistenceUnitUtil.getIdentifier(object) returns identifier property\nthen the object is in detached state.\n \nTransient State: If call to PersistenceUnitUtil.getIdentifier(object)\nreturns null then object is in Transient state.\n \nWe can get access to PersistenceUnitUtil from the\nEntityManagerFactory in Hibernate."},{"number":762,"categorie":"Hibernate","question":"What is ‘the inverse side of association’ in a mapping?","reponse":"Let us consider an example in which a customer can have multiple\norders and for every order there has to be a customer.\n \nIn OO world, customer is the owner of order. In SQL world, an\nOrder has reference to customer id.\n \nIt is a bi-directional one to many mapping from customer to order.\n \nThe inverse side in this mapping is the owner of object. In this case\ncustomer is the owner or order. Since an order cannot exist without\na customer. But a customer can exist without an order.\n \nAlso customer has no column to save order data. But an Order table\ncan store customer id, which is used for mapping."},{"number":763,"categorie":"Hibernate","question":"What is ORM metadata?","reponse":"ORM uses metadata for its internal work. ORM maintains metadata\nto generate code used for accessing columns and tables.\n \nORM maps classes to tables and stores this information in\nMetadata. It maps fields in classes to columns in tables. These kinds\nof mappings are also part of Metadata.\n \nApplication developers can also access Hibernate Metadata by\nusing ClassMetadata and CollectionMetadata interfaces and Type\nhierarchy."},{"number":764,"categorie":"Hibernate","question":"What is the difference between load() and get() method in Hibernate?","reponse":"In Hibernate, load() and get() methods are quite similar in\nfunctionality.\n \nThe main difference is that load() method will throw an\nObjectNotFoundException if row corresponding to an object is not\nfound in the database.\n \nOn the other hand, get() method returns null value when an object is\nnot found in the database.\n \nIt is recommended that we should use load() method only when we\nare sure that object exists in database."},{"number":765,"categorie":"Hibernate","question":"When should we use get() method or load() method in Hibernate?","reponse":"As a thumb rule we can follow these guidelines:\n \nWe should use get() method when we want to load an object.\nWe should use load() method when we need a reference to an object\nwithout running extra SQL queries."},{"number":766,"categorie":"Hibernate","question":"What is a derived property in Hibernate?","reponse":"In Hibernate, a derived property is not mapped to any column of a\ndatabase table.\n \nA derived property is computed at runtime by evaluation of an\nexpression.\n \nThese are read only properties.\n \nEgg. In this example profitMargin is derived from salePrice and\nbuyPrice.\n \n<property name=\"profitMargin\" formula=\"( SELECT (i.salePrice –\ni.buyPrice) FROM item i WHERE i.Id = Id)\"/>"},{"number":767,"categorie":"Hibernate","question":"How can we use Named Query in Hibernate?","reponse":"A Named SQL query is the HQL query that is associated with a\nstring name and can be referenced in the application by name.\n \nIt can be used in following ways:\n \nXML Mapping File: We can define it in XML mapping file.\n \nEgg.    <query name=\"findBookByAuthor”>\n        <![CDATA[from Book s where s.author = :author]]>\n    </query>\n \nAnnotation: We can also mark Named SQL with annotation.\n \n@NamedQueries({\n@NamedQuery(\nname = \"findBookByAuthor”,\nquery = \"from Book s where s.author = :author”\n)\n})"},{"number":768,"categorie":"Hibernate","question":"What are the two locking strategies in Hibernate?","reponse":"There are two popular locking strategies that can be used in\nHibernate:\n \nOptimistic: In Optimistic locking we assume that multiple\ntransactions can complete without affecting each other. So we let the\ntransactions do their work without locking the resources initially.\n \nJust before the commit, we check if any of the resource has changed\nby another transaction, then we throw exception and rollback the\ntransaction.\n \nPessimistic: In Pessimistic locking we assume that concurrent\ntransactions will conflict while working with same resources. So a\ntransaction has to first obtain lock on the resources it wants to\nupdate.\n \nThe other transaction can proceed with same resource only after the\nlock has been released by previous transaction."},{"number":769,"categorie":"Hibernate","question":"What is the use of version number in Hibernate?","reponse":"Version number is used in optimistic locking in Hibernate. When a\ntransaction modifies an object, it increments its version. Based on\nversion number, second transaction can determine if the object it has\nread earlier has changed or not.\n \nIf the version number at the time of write is different than the\nversion number at the time of read, then we should not commit the\ntransaction."},{"number":770,"categorie":"Hibernate","question":"What is the use of session.lock() method in Hibernate?","reponse":"Session.lock() is a deprecated method in Hibernate. We should not\nuse it.\n \nInstead we should call\nbuildLockRequest(LockMode).lock(entityName, object) method in\nHibernate."},{"number":771,"categorie":"Hibernate","question":"What inheritance mapping strategies are supported by Hibernate?","reponse":"Hibernate supports following inheritance mapping strategies\nbetween classes and tables:\n \nTable per class hierarchy: In case of multiple types of books, we\ncan have one book class and one book table. We can store all child\nclasses of book like- HardCoverBook, PaperBackBook etc in same\ntable book. But we can identify the subclasses by a BookType\ncolumn in Book table.\n \nTable per subclass: In this case we can have separate table for each\nkind of book. HardCoverBook table for HardCoverBook book\nclass. PaperBackBook table for PaperBackBook book class. And\nthere will be a parent table, Book for Book class.\n \nTable per concrete class: In this case also we have separate table\nfor each kind of book. But in this case we have even inherited\nproperties defined inside each table. There is no parent table Book\nfor Book class, since it is not a concrete class.\n \n Maven"},{"number":772,"categorie":"Maven","question":"What is Maven?","reponse":"Maven is a software project management tool. It is open source\nsoftware from Apache software foundation.\n \nIt is used for building, reporting and documenting a Software\nproject. It is mainly based on POM (Project Object Model)."},{"number":773,"categorie":"Maven","question":"What are the main features of Maven?","reponse":"Some of the main features of Maven are:\n \n1. Simple: Maven provides simple project setup that is based\non best practices.\n \n2. Fast: You can get a new project or module started in a few\nseconds in Maven.\n \n3. Easy to learn: Maven usage and commands are easy to\nlearn across all projects. Therefore ramp up time for new\ndevelopers coming onto a project is very less.\n \n4. Dependency management: Maven provides superior\ndependency management including automatic updates and\ntransitive dependencies.\n \n5. Multiple Projects: You can easily work with multiple\nprojects at the same time by using Maven.\n \n6. Large Library: Maven has a large and growing repository\nof libraries and metadata to use out of the box.\n \n7. Extensible: Maven supports the ability to easily write\nplugins in Java or scripting languages for extending its\ncore functionality.\n \n8. Instant: Maven is online and it provides instant access to\nnew features with very less configuration."},{"number":774,"categorie":"Maven","question":"What areas of a Project can you manage by using Maven?","reponse":"Maven can help us manage following areas of a project:\n \n1. Build\n2. Testing\n3. Release\n4. Reporting\n5. Software Change Management (SCM)\n6. Documentation\n7. Distribution"},{"number":775,"categorie":"Maven","question":"What are the main advantages of Maven?","reponse":"Maven has a long list of advantages for Software development.\nSome of the main advantages are:\n \n1. Common Project Structure: By using Maven, every\ndeveloper has a common project structure that helps in\nunderstanding the code as well as developing new features\nin a new project.\n \n2. Modular Design: Maven promotes modular design that\ndivides a complex project into multiple modules that are\neasier to manage. By using Maven, it is easier to manage\nmultiple modules for build, test, release etc.\n \n3. Centralized Dependency Management: With Maven,\neach developer does not have to include the jars separately\nin each project or module. Maven provides a centralized\ndependency management that can help improve efficiency\nof software development.\n \n4. Fewer Decisions: With Maven a developer has to make\nfewer decisions about things unrelated to software\ndevelopment work. The project structure comes ready with\nMaven, dependency management is a uniform approach\nand build/release are handled by Maven. So a developer\ncan focus on core work of developing software."},{"number":776,"categorie":"Maven","question":"Why do we say “Maven uses convention over configuration”?","reponse":"Convention over configuration is a Software Design Paradigm that\ndecreases the number of decisions made by a software developer,\nwithout losing flexibility.\n \nIn Maven, there are many conventions for setting up the project,\nbuilding the artifacts, running unit tests and releasing the code.\nThese conventions lead to common process for Software\ndevelopment.\n \nIn case of other tools, there are a lot of configuration options are\npresent. But most of the time, a developer uses same set of\nconfiguration options. So it is better to make these as a default\noptions. Maven uses default options from best practices and\nprovides right conventions for Software development."},{"number":777,"categorie":"Maven","question":"What are the responsibilities of a Build tool like Maven?","reponse":"A Build tool like Maven helps us with following tasks:\n \n1. Source Code: A Build tool can generate source code\nbased on templates.\n \n2. Documentation: We can get documentation files from\nsource code by using a build tool. E.g. Javadoc\n \n3. Compilation: Primary responsibility of a Build tool is to\ncompile source code into executable code.\n \n4. Packaging: A Build tool packages compiled code into a\ndeployable file like- jar, zip war etc.\n \n5. Deployment: We can deploy the packaged code on server\nby using a Build tool."},{"number":778,"categorie":"Maven","question":"What are the differences between Ant and Maven?","reponse":"Key differences between Ant and Maven are:\n \n1. Ant is a Java library and command line toolbox for build\nprocess. Maven is a framework for many aspects of\nsoftware development like- project setup, compile, build,\ndocumentation etc.\n \n2. Ant does not have any conventions for project structure or\nbuild processes. Maven has conventions for setting up\nproject structure as well as for build processes.\n \n3. Ant is based on procedural programming. We have to write\ncode for compilation build, copy etc. Maven is based on\ndeclarative programming. We have to just configure it for\nour project setup and programming.\n \n4. Ant does not impose any lifecycle. We need to create the\nsequence of tasks manually. Maven has a lifecycle for\nsoftware build processes. There are well-defined phases\nthat we can use in Maven.\n \n5. Ant scripts are not reusable in multiple projects. Maven\nhas plugins that are reusable across multiple projects."},{"number":779,"categorie":"Maven","question":"What is MOJO in Maven?","reponse":"MOJO stands for Maven plain Old Java Object.\n \nEvery MOJO is an executable goal in Maven. It is like an annotated\nJava class. It specifies metadata about a goal like- goal name, phase\nof lifecycle for goal and parameters required by goal.\n \nA Maven plugin can contain multiple MOJOs."},{"number":780,"categorie":"Maven","question":"What is a Repository in Maven?","reponse":"A repository is a location on file system where build artifacts, jars,\ndependencies and pom.xml files are stored."},{"number":781,"categorie":"Maven","question":"What are the different types of repositories in Maven?","reponse":"There are mainly two types of repositories in Maven:\n \n1. Local Repository: This is your local folder in which a\ncopy of your installation and dependencies is stored.\n \n2. Remote Repository: This is a remote folder in which jars\nand other build artifacts are stored. These can be located\non servers within your organization.\n \n3. Central Remote Repository:  This is the central Maven\nrepository that is located on repo.maven.apache.org or\nuk.maven.org or any other third party location. This where\nwe can find artifacts from different providers that are\navailable for download and use. Like- Hibernate, Spring\nlibraries etc."},{"number":782,"categorie":"Maven","question":"What is a local repository in Maven?","reponse":"Maven local repository is a folder in your local files system in\nwhich your project’s installation, dependency jars, plugins etc. are\nstored.\n \nDefault location of Maven local repository is .m2 folder. It can be\nlocated under following location on file system:\n \nWindows – C:\\Documents and Settings\\{ username}\\.m2\nUnix/Linux/Mac – ~/.m2"},{"number":783,"categorie":"Maven","question":"What is a central repository in Maven?","reponse":"Maven central repository is a truly remote repository that is located\non repo.maven.apache.org or uk.maven.org or any other third party\nlocation.\n \nThis contains the jars and artifacts provided by various software\nproviders.\n \nCentral repository contains a large amount of data. Therefore it is\nnot allowed to scrape the whole site. But you can use the relevant\njars that you want for download and use in your Maven project."},{"number":784,"categorie":"Maven","question":"What is a Remote repository in Maven?","reponse":"A Remote repository is a remote location on the internet where the\njars and dependencies from different vendors are stored.\n \nThese files can be accessed by protocols like- file:// or http:// etc.\n \nThese can be truly remote repositories set up by third party vendors\nor locations inside your organization that contains the relevant jars\nrequired by your project."},{"number":785,"categorie":"Maven","question":"Why we should not store jars in CVS or any other version control system instead of Maven repository?","reponse":"Maven recommends storing jars in local repository instead of CVS\nor any other version control system. There are following advantages\nof storing it in Maven repo vs. CVS:\n \nLess Storage: A repository is very large, but it takes less space\nbecause each JAR is stored only in one place. E.g. If we have 10\nmodules dependent on Spring jar, then they all refer to same Spring\njar stored in local repository.\n \nQuicker Checkout: Project checkout is quicker from local\nrepository, since there is not need to checkout jars if they are\nalready present in repo.\n \nNo need for versioning: There is no need to version JARS since\nexternal dependencies do not change so often."},{"number":786,"categorie":"Maven","question":"Can anyone upload JARS or artifacts to Central Repository?","reponse":"No, we need special permissions to upload JARS and artifacts to\nCentral Maven Repository?"},{"number":787,"categorie":"Maven","question":"What is a POM?","reponse":"POM is an abbreviation for Project Object Model. This is the basic\nunit of work in Maven. It is an XML file with name pom.xml.\n \nIt contains details of project and project configuration that are used\nby Maven to build the project.\n \nIt also contains default values for many projects. E.g. target is the\nname of build directory for Java Maven project."},{"number":788,"categorie":"Maven","question":"What is Super POM?","reponse":"Super POM is Maven’s default POM. All the POM files extend\nfrom Super POM."},{"number":789,"categorie":"Maven","question":"What are the main required elements in POM file?","reponse":"Every POM file should have following required elements:\n \n1. project root\n2. modelVersion\n3. groupID: the id of the project's group.\n4. artifactID: the id of the artifact (project)\n5. version: the version of the artifact under the specified\ngroup"},{"number":790,"categorie":"Maven","question":"What are the phases in Build lifecycle in Maven?","reponse":"In Maven, each build lifecycle consists of many phases. Default\nbuild lifecycle has following phases:\n \n1. validate: In this phase, Maven validates that the project is\ncorrect and all necessary information is available to run\nnext phase.\n \n2. compile: Maven compiles the source code of the project in\nthis phase.\n \n3. test: This is the phase to run unit tests on the compiled\nsource. There should not be any need to package or deploy\nthe code to run these tests.\n \n4. package: In this phase, Maven takes the compiled code\nand packages it in its distributable format, such as a JAR.\n \n5. verify: Maven runs any checks on results of integration\ntests to ensure that quality criteria are met.\n \n6. install: In this phase, Maven installs the package into local\nrepository. After this it can be used as a dependency in\nother projects locally.\n \n7. deploy: In the build environment, Maven copies the final\npackage to the remote repository for sharing with other\ndevelopers and projects."},{"number":791,"categorie":"Maven","question":"What command will you use to package your Maven project?","reponse":"To package a project into a distributable format we use following\ncommand:\n \nmvn -package"},{"number":792,"categorie":"Maven","question":"What is the format of fully qualified artifact name of a Maven project?","reponse":"A Maven project has artifact name with following format:\n \n<groupId>:<artifactId>:<version> \n \nFollowing is the convention used by some organizations:\n \nParent pom\n \ngroupId: org.Orgname.Projectname\nartifactId: org.Orgname.Projectname\nversion: x.x.x\n \nE.g. org.Orgname.Projectname:org.Orgname.Projectname-1.0.0.pom\n \nModules\n \ngroupId: org.Orgname.Projectname\nartifactId: org.Orgname.Projectname.Modulename\nversion: x.x.x\n \nE.g.\norg.Orgname.Projectname:org.Orgname.Projectname.Modulename-\n1.0.0.jar"},{"number":793,"categorie":"Maven","question":"What is an Archetype in Maven?","reponse":"As per official definition, an Archetype is a Maven project\ntemplating toolkit.\n \nBy using an Archetype, an author of Archetype can create a Project\ntemplate. Users of this project template (archetype) can pass\ndifferent parameters to this template and start using it.\n \nArchetype promotes consistency in the process of creating and\nworking on a project. It also helps in reducing the ramp up time for\nnew developers to come on board on a project."},{"number":794,"categorie":"Maven","question":"What is the command in Maven to generate an Archetype?","reponse":"In Maven, we can use following command to generate an\nArchetype:\n \nmvn archetype:generate"},{"number":795,"categorie":"Maven","question":"What are the three main build lifecycles of Maven?","reponse":"Maven has following three build lifecycles that further contain\nmultiple phases:\n \n1. clean: In this lifecycle any files generated by previous\nbuilds are removed.\n \n2. default: This lifecycle is used for validating, compiling\nand creating the application. It has multiple phases like-\ncompile, test, package inside it.\n \n3. site: Maven generates and deploys the documentation of a\nsite in this phase."},{"number":796,"categorie":"Maven","question":"What are the main uses of a Maven plugin?","reponse":"Maven is mainly a plugin execution framework. At the code of\nMaven all the work is done by plugins. A Maven plugin can be used\nfor following purposes:\n \n1. Cleaning up the code\n2. Compiling the code\n3. Creating a JAR file\n4. Deploying the artifacts\n5. Running the unit tests\n6. Documenting the project\n7. Generating the site of a project\n8. Generating a WAR file\n9. Generate a checkstyle report"},{"number":797,"categorie":"Maven","question":"How will you find the version of a plugin being used?","reponse":"Maven Help Plugin has a describe goal. This can be used for listing\nthe version of a plugin. Sample command for this is:\n \nmvn -Dplugin=install help:describe\n \nNote: In the above command replace Dplugin with the plugin prefix\nas the argument. Do not use the artifact ID of plugin here."},{"number":798,"categorie":"Maven","question":"What are the different types of profile in Maven?","reponse":"Where will you\ndefine these profiles?\n \nIn Maven, we can have following types of Profile:\n \nPer Project\nIt is defined in the POM itself (pom.xml).\n \nPer User\nWe can define it in the Maven-settings\n(%USER_HOME%/.m2/settings.xml).\n \nGlobal\nIt is defined in the global Maven-settings\n(${maven.home}/conf/settings.xml).\n \nProfile descriptor\nDescriptor is located in project basedir (profiles.xml) (It is not\nsupported in Maven 3.0)"},{"number":799,"categorie":"Maven","question":"What are the different setting files in Maven?","reponse":"Where will you find\nthese files?\n \nMaven is very simple to use. At the core it has a setting file names\nsettings.xml. This file contains the setting element that is used to\nconfigure the Maven with different options.\n \nThe main locations where this file can be found are:\n \nMaven Installation directory: ${maven.home}/conf/settings.xml\n \nUser Home directory: ${user.home}/ .m2 / settings.xml"},{"number":800,"categorie":"Maven","question":"What are the main elements we can find in settings.xml?","reponse":"In settings.xml we can have all the configuration information for\nMaven. Some of the important elements are:\n \nlocalRepository: The value of this element is the path of this build\nsystem’s local repository. The default value is\n${user.home}/.m2/repository.\n \nIt is used for a main build server to allow all logged-in users to\nbuild from a common local repository.\n \ninteractiveMode: If it is true then Maven should attempt to interact\nwith the user for input. If it is false then Maven does not interact\nwith the user. Default setting is true.\n \nusePluginRegistry: If it is true Maven uses the\n${user.home}/.m2/plugin-registry.xml file to manage plugin\nversions. By defaults it is false.\n \noffline: If it is true this build system should be able to operate in\noffline mode. By default it is false. This element is used for build\nservers that cannot connect to a remote repository due to network\nsetup or security reasons."},{"number":801,"categorie":"Maven","question":"How will you check the version of Maven in your system?","reponse":"We can use following command in console to check the version of\nMaven in our system.\n \nmvn -version"},{"number":802,"categorie":"Maven","question":"How will you verify if Maven is installed on Windows?","reponse":"To check this, type mvn –version in cmd prompt of Windows. This\nwill give you the version of Maven installed on Windows."},{"number":803,"categorie":"Maven","question":"What is a Maven artifact?","reponse":"A Maven artifact is a file that gets deployed to a Maven repository.\nIn most cases it is a JAR file.\n \nWhen Maven build runs, it creates one or more artifacts. In case of\nJava projects, it produces a compiled jar and a sources jar.\n \nEvery artifact in Maven has a group ID, an artifact ID and a version\nstring. These three attributes uniquely identify an artifact.\n \nIn Maven, we specify a project's dependencies as artifacts."},{"number":804,"categorie":"Maven","question":"What are the different dependency scopes in Maven?","reponse":"Maven supports following dependency scopes:\n \ncompile: This is the default dependency scope in Maven. The\ncompile level dependencies are available in all classpaths of a\nproject. These dependencies are also propagated to dependent\nprojects.\n \nprovided: This scope is similar to compile. But in this scope we\nexpect the JDK or a container to provide the dependency at runtime.\nE.g. While building a web application for the Java Enterprise\nEdition, we can set the dependency on the Servlet API and related\nJava EE APIs to scope provided. The web container will provide\nthese classes at runtime to our application.\n \nThis scope is only available on the compilation and test classpath,\nand is not transitive.\nruntime: The dependency in this scope is not required for\ncompilation. It is required for execution. It is available in the\nruntime and test classpaths. It is not present in the compile\nclasspath.\n \ntest: This scope is used for dependencies that are required for test\ncompilation and execution phases. This scope is not transitive.\n \nsystem: This scope is same as provided scope, except that you have\nto provide the JAR that contains it explicitly. In this case, he artifact\nis always available. There is no need to look it up in a repository.\n \nimport: This scope is only used on a dependency of type pom in the\n<dependencyManagement> section. In this case, the specified POM\nhas to be replaced with the dependencies in that POM's\n<dependencyManagement> section. This scope is only available inMaven 2.0.9 or later."},{"number":805,"categorie":"Maven","question":"How can we exclude a dependency in Maven?","reponse":"To exclude a dependency we can add the <exclusions> tag under the\n<dependency> section of the pom.\n \nE.g.\n \n<dependencies>\n    <dependency>\n      <groupId>test.ProjectX</groupId>\n      <artifactId>ProjectX</artifactId>\n      <version>1.0</version>\n      <scope>compile</scope>\n      <exclusions>\n        <exclusion>  <!-- exclusion is mentioned here -->\n          <groupId>test.ProjectY</groupId>\n          <artifactId>ProjectY</artifactId>\n        </exclusion>\n      </exclusions>\n    </dependency>\n</dependencies>"},{"number":806,"categorie":"Maven","question":"How Maven searches for JAR corresponding to a dependency?","reponse":"Maven first looks for a JAR related to a dependency in the local\nrepository. If it finds it there then it stops.\n \nIf it does not find it in local repo, it looks for the JAR in the remote\nrepository and downloads the corresponding version of JAR file.\nFrom remote repository it stores the JAR into local repository."},{"number":807,"categorie":"Maven","question":"What is a transitive dependency in Maven?","reponse":"Let say you have a Project A that depends on dependency B. The\ndependency B further depends on dependency C. So your\ndependency C is a Transitive Dependency of your project A.\n \nIn Maven, starting from 2.0, you do not have to specify transitive\ndependencies. You just mention your immediate dependencies in\npom.xml.\n \nMaven takes care of resolving the Transitive dependencies and\nincludes them automatically."},{"number":808,"categorie":"Maven","question":"What are Excluded dependencies in Maven?","reponse":"Let say a project A depends on project B, and project B depends on\nproject C. The developers of project A can explicitly exclude\nproject C as a dependency. We can use the \"exclusion\" element to\nexclude it.\n \nSuch dependencies are called Excluded dependencies in Maven."},{"number":809,"categorie":"Maven","question":"What are Optional dependencies in Maven?","reponse":"Let say a project B depends on project C. The developers of project\nB can mark project C as an optional dependency by using the\n\"optional\" element.\n \nIn case project A depends on project B, A will depend only on B\nand not on B's optional dependency C.\n \nThe developers of project A may then explicitly add a dependency\non C. The dependency of B on C is known as Optional dependency\nin Maven."},{"number":810,"categorie":"Maven","question":"Where will you find the class files after compiling a Maven project successfully?","reponse":"Once Maven completes the compilation successfully, it stores the\nfiles in target folder. The default location for class files is:\n \n${basedir}/target/classes/"},{"number":811,"categorie":"Maven","question":"What are the default locations for source, test and build directories in Maven?","reponse":"The default locations are as follows:\n \nSource: src/main/java\nTest: src/main/test\nBuild: Target"},{"number":812,"categorie":"Maven","question":"What is the result of  jar:jar goal in Maven?","reponse":"In Maven, jar:jar goal creates a jar file in the Maven build\ndirectory. Jar file is create with the name format ${project.id}-\n${project.currentVersion}.jar.\n \nThe id and currentVersion are mentioned in the project.xml of the\nproject being built.\n \njar:jar does not recompile sources. It just creates a jar from already\ncompiled classes."},{"number":813,"categorie":"Maven","question":"How can we get the debug or error messages from the execution of Maven?","reponse":"At times, project build or compile fails in Maven. At this time it is\nvery helpful to see the debug or error messages from Maven\nexecution.\n \nTo get the debug messages we can call Maven with -X option.\n \nTo get the error/exception messages we can call Maven with -e\noption."},{"number":814,"categorie":"Maven","question":"What is the difference between a Release version and SNAPSHOT version in Maven?","reponse":"A SNAPSHOT version in Maven is the one that has not been\nreleased.\n \nBefore every release version there is a SNAPSHOT version.\nBefore 1.0 release there will be 1.0-SNAPSHOT.\n \nIf we download 1.0-SNAPSHOT today then we may get different\nset of files than the one we get on downloading it yesterday.\nSNAPSHOT version can keep getting changes in it since it is under\ndevelopment.\n \nBut release version always gives exactly same set files with each\ndownload."},{"number":815,"categorie":"Maven","question":"How will you run test classes in Maven?","reponse":"We need Surefire plugin to run the test classes in Maven.\n \nTo run a single test we can call following command:\n \nmvn -Dtest=TestCaseA test\n \n \nWe can also use patterns to run multiple test cases:\n \nmvn -Dtest=TestCase* test\n \nor\n \nmvn -Dtest=TestCaseA,TestCaseB,TestImportant* test"},{"number":816,"categorie":"Maven","question":"Sometimes Maven compiles the test classes but doesn't run them?","reponse":"What could be the reason for it?\n \nIn Maven, Surefire plugin is used for running the Tests.\n \nWe can configure it to run certain test classes. Sometimes we you\nmay have unintentionally specified an incorrect value to ${test} in\nsettings.xml or pom.xml.\n \nWe need to look for following in pom.xml/settings.xml and fix it:\n \n<properties>\n    <property>\n      <name>test</name>\n      <value>some-value</value>\n     </property>\n  </properties>"},{"number":817,"categorie":"Maven","question":"How can we skip the running of tests in Maven?","reponse":"We can use the parameter -Dmaven.test.skip=true or -\nDskipTests=true in the command line for skipping the tests.\n \nThe parameter -Dmaven.test.skip=true skips the compilation of\ntests.\n \nThe parameter -DskipTests=true skips the execution of tests\n \nSurefire plugin of Maven honors these parameters."},{"number":818,"categorie":"Maven","question":"Can we create our own directory structure for a project in Maven?","reponse":"Yes, Maven gives us the flexibility of creating our own directory\nstructure. We just need to configure the elements like\n<sourceDirectory>, <resources> etc. in the <build> section of\npom.xml."},{"number":819,"categorie":"Maven","question":"What are the differences between Gradle and Maven?","reponse":"Gradle is nowadays getting more popular. Google uses it for\nAndroid development and release. Companies like LinkedIn also\nuse Gradle.\n \nGradle is based on Domain Specific Language (DSL). Maven is\nbased on XML.\n \nGradle gives more flexibility to do custom tasks similar to ANT.\nMaven scripts have predefined structure. So it is less flexible.\n \nMaven is mainly used for Java based systems. Gradle is used for a\nvariety of languages. It is a Polyglot build tool"},{"number":820,"categorie":"Maven","question":"What is the difference between Inheritance and Multi-module in Maven?","reponse":"In Maven, we can create a parent project that will pass its values to\nits children projects.\n \nA multi-module project is created to manage a group of other sub-\nprojects or modules. The multi-module relationship is like a tree\nthat starts from the topmost level to the bottom level. In a multi-\nmodule project, we specify that a project should include the\nspecific modules for build. Multi-module builds are used to group\nmodules together in a single build.\n \nWhereas in Inheritance, the parent-child project relationship starts\nfrom the leaf node and goes upwards. It deals more with the\ndefinition of a specific project. In this case a child’s pom is derived\nfrom its parent’s pom."},{"number":821,"categorie":"Maven","question":"What is Build portability in Maven?","reponse":"In Maven, the portability of a build is the measure of how easy it is\nto take a particular project and build it in different environments.\n \nA build that does not require any custom configuration or\ncustomization of properties files is more portable than a build that\nrequires a lot of custom work to build it from scratch.\n \nOpen source projects from Apache Commons are one of the most\nportable projects. These build can work just out of the box.\n GIT"},{"number":822,"categorie":"GIT","question":"How can we see n most recent commits in GIT?","reponse":"We can use git log command to see the latest commits. To see the\nthree most recent commits we use following command:\n \ngit log -3"},{"number":823,"categorie":"GIT","question":"How can we know if a branch is already merged into master in GIT?","reponse":"We can use following commands for this purpose:\n \n \ngit branch --merged master  : This prints the branches merged into\nmaster\n \ngit branch --merged lists : This prints the branches merged into\nHEAD (i.e. tip of current branch)\n \ngit branch --no-merged : This prints the branches that have not been\nmerged\n \nBy default this applies only to local branches.\n \nWe can use -a flag to show both local and remote branches.\n \nOr we can use -r flag to show only the remote branches."},{"number":824,"categorie":"GIT","question":"What is the purpose of git stash drop?","reponse":"In case we do not need a specific stash, we use git stash drop\ncommand to remove it from the list of stashes.\n \nBy default, this command removes to latest added stash\n \nTo remove a specific stash we specify as argument in the git stash\ndrop <stashname> command."},{"number":825,"categorie":"GIT","question":"What is the HEAD in GIT?","reponse":"A HEAD is a reference to the currently checked out commit.\n \nIt is a symbolic reference to the branch that we have checked out.\n \nAt any given time, one head is selected as the ‘current head’ This\nhead is also known as HEAD (always in uppercase)."},{"number":826,"categorie":"GIT","question":"What is the most popular branching strategy in GIT?","reponse":"There are many ways to do branching in GIT. One of the popular\nways is to maintain two branches:\n \nmaster: This branch is used for production. In this branch HEAD is\nalways in production ready state.\n \ndevelop: This branch is used for development. In this branch we\nstore the latest code developed in project. This is work in progress\ncode.\n \nOnce the code is ready for deployment to production, it is merged\ninto master branch from develop branch."},{"number":827,"categorie":"GIT","question":"What is SubGit?","reponse":"SubGit is software tool used for migrating SVN to Git. It is very\neasy to use. By using this we can create a writable Git mirror of a\nSubversion repository.\n \nIt creates a bi-directional mirror that can be used for pushing to Git\nas well as committing to Subversion.\n \nSubGit also takes care of synchronization between Git and\nSubversion."},{"number":828,"categorie":"GIT","question":"What is the use of git instaweb?","reponse":"Git-instaweb is a script by which we can browse a git repository in\na web browser.\n \nIt sets up the gitweb and a web-server that makes the working\nrepository available online."},{"number":829,"categorie":"GIT","question":"What are git hooks?","reponse":"Git hooks are scripts that can run automatically on the occurrence of\nan event in a Git repository. These are used for automation of\nworkflow in GIT.\n \nGit hooks also help in customizing the internal behavior of GIT.\n \nThese are generally used for enforcing a GIT commit policy."},{"number":830,"categorie":"GIT","question":"What is GIT?","reponse":"GIT is a mature Distributed Version Control System (DVCS). It is\nused for Source Code Management (SCM).\n \nIt is open source software. It was developed by Linus Torvalds, the\ncreator of Linux operating system.\n \nGIT works well with a large number of IDEs (Integrated\nDevelopment Environments) like- Eclipse, InteliJ etc.\n \nGIT can be used to handle small and large projects."},{"number":831,"categorie":"GIT","question":"What is a repository in GIT?","reponse":"A repository in GIT is the place in which we store our software\nwork.\n \nIt contains a sub-directory called .git. There is only one .git\ndirectory in the root of the project.\n \nIn .git, GIT stores all the metadata for the repository. The contents\nof .git directory are of internal use to GIT."},{"number":832,"categorie":"GIT","question":"What are the main benefits of GIT?","reponse":"There are following main benefits of GIT:\n \n1. Distributed System: GIT is a Distributed Version Control\nSystem (DVCS). So you can keep your private work in\nversion control but completely hidden from others. You\ncan work offline as well.\n2. Flexible Workflow: GIT allows you to create your own\nworkflow. You can use the process that is suitable for your\nproject. You can go for centralized or master-slave or any\nother workflow.\n3. Fast: GIT is very fast when compared to other version\ncontrol systems.\n4. Data Integrity: Since GIT uses SHA1, data is not easier to\ncorrupt.\n5. Free: It is free for personal use. So many amateurs use it\nfor their initial projects. It also works very well with large\nsize project.\n6. Collaboration: GIT is very easy to use for projects in\nwhich collaboration is required. Many popular open\nsource software across the globe use GIT."},{"number":833,"categorie":"GIT","question":"What are the disadvantages of GIT?","reponse":"GIT has very few disadvantages. These are the scenarios when GIT\nis difficult to use. Some of these are:\n \n1. Binary Files: If we have a lot binary files (non-text) in our\nproject, then GIT becomes very slow. E.g. Projects with a\nlot of images or Word documents.\n2. Steep Learning Curve: It takes some time for a newcomer\nto learn GIT. Some of the GIT commands are non-intuitive\nto a fresher.\n3. Slow remote speed: Sometimes the use of remote\nrepositories in slow due to network latency. Still GIT is\nbetter than other VCS in speed"},{"number":834,"categorie":"GIT","question":"What are the main differences between GIT and SVN?","reponse":"The main differences between GIT and SVN are:\n \n1. Decentralized: GIT is decentralized. You have a local\ncopy that is a repository in which you can commit. In SVN\nyou have to always connect to a central repository for\ncheck-in.\n \n2. Complex to learn: GIT is a bit difficult to learn for some\ndevelopers. It has more concepts and commands to learn.\nSVN is much easier to learn.\n \n3. Unable to handle Binary files: GIT becomes slow when it\ndeals with large binary files that change frequently. SVN\ncan handle large binary files easily.\n \n4. Internal directory: GIT creates only .git directory. SVN\ncreates .svn directory in each folder.\n \n5. User Interface: GIT does not have good UI. But SVN has\ngood user interfaces."},{"number":835,"categorie":"GIT","question":"How will you start GIT for your project?","reponse":"We use git init command in an existing project directory to start\nversion control for our project.\n \nAfter this we can use git add and git commit commands to add files\nto our GIT repository."},{"number":836,"categorie":"GIT","question":"What is git clone in GIT?","reponse":"In GIT, we use git clone command to create a copy of an existing\nGIT repository in our local.\n \nThis is the most popular way to create a copy of the repository\namong developers.\n \nIt is similar to svn checkout. But in this case the working copy is a\nfull-fledged repository."},{"number":837,"categorie":"GIT","question":"How will you create a repository in GIT?","reponse":"To create a new repository in GIT, first we create a directory for the\nproject. Then we run ‘git init’ command.\n \nNow, GIT creates .git directory in our project directory. This is\nhow our new GIT repository is created."},{"number":838,"categorie":"GIT","question":"What are the different ways to start work in GIT?","reponse":"We can start work in GIT in following ways:\n \nNew Project: To create a new repository we use git init command.\n \nExisting Project: To work on an existing repository we use git clone\ncommand."},{"number":839,"categorie":"GIT","question":"GIT is written in which language?","reponse":"Most of the GIT distributions are written in C language with Bourne\nshell. Some of the commands are written in Perl language."},{"number":840,"categorie":"GIT","question":"What does ‘git pull’ command in GIT do internally?","reponse":"In GIT, git pull internally does a git fetch first and then does a git\nmerge.\n \nSo pull is a combination of two commands: fetch and merge.\n \nWe use git pull command to bring our local branch up to date with\nits remote version."},{"number":841,"categorie":"GIT","question":"What does ‘git push’ command in GIT do internally?","reponse":"In GIT, git push command does following two commands:\n \n1. fetch: First GIT, copies all the extra commits from server\ninto local repo and moves origin/master branch pointer to\nthe end of commit chain.\n \n2. merge: Then it merges the origin/master branch into the\nmaster branch. Now the master branch pointer moves to\nthe newly created commit. But the origin/master pointer\nremains there."},{"number":842,"categorie":"GIT","question":"What is git stash?","reponse":"In GIT, sometimes we do not want to commit our code but we do not\nwant to lose also the unfinished code. In this case we use git stash\ncommand to record the current state of the working directory and\nindex in a stash. This stores the unfinished work in a stash, and\ncleans the current branch from uncommitted changes.\n \nNow we can work on a clean working directory.\n \nLater we can use the stash and apply those changes back to our\nworking directory.\n \nAt times we are in the middle of some work and do not want to lose\nthe unfinished work, we use git stash command."},{"number":843,"categorie":"GIT","question":"What is the meaning of ‘stage’ in GIT?","reponse":"In GIT, stage is a step before commit. To stage means that the files\nare ready for commit.\n \nLet say, you are working on two features in GIT. One of the features\nis finished and the other is not yet ready. You want to commit and\nleave for home in the evening. But you can commit since both of\nthem are not fully ready. In this case you can just stage the feature\nthat is ready and commit that part. Second feature will remain as\nwork in progress."},{"number":844,"categorie":"GIT","question":"What is the purpose of git config command?","reponse":"We can set the configuration options for GIT installation by using git\nconfig command."},{"number":845,"categorie":"GIT","question":"How can we see the configuration settings of GIT installation?","reponse":"We can use ‘git config --list’ command to print all the GIT\nconfiguration settings in GIT installation."},{"number":846,"categorie":"GIT","question":"How will you write a message with commit command in GIT?","reponse":"We call following command for commit with a message:\n$/> git commit –m <message>"},{"number":847,"categorie":"GIT","question":"What is stored inside a commit object in GIT?","reponse":"GIT commit object contains following information:\n \nSHA1 name: A 40 character string to identify a commit     \nFiles: List of files that represent the state of a project at a specific\npoint of time\nReference: Any reference to parent commit objects"},{"number":848,"categorie":"GIT","question":"How many heads can you create in a GIT repository?","reponse":"There can be any number of heads in a repository.\n \nBy default there is one head known as HEAD in each repository in\nGIT."},{"number":849,"categorie":"GIT","question":"Why do we create branches in GIT?","reponse":"If we are simultaneously working on multiple tasks, projects,\ndefects or features, we need multiple branches. In GIT we can\ncreate a separate branch for each separate purpose.\n \nLet say we are working on a feature, we create a feature branch for\nthat. In between we get a defect to work on then we create another\nbranch for defect and work on it. Once the defect work is done, we\nmerge that branch and come back to work on feature branch again.\n \nSo working on multiple tasks is the main reason for using multiple\nbranches."},{"number":850,"categorie":"GIT","question":"What are the different kinds of branches that can be created in GIT?","reponse":"We can create different kinds of branches for following purposes in\nGIT:\n \nFeature branches: These are used for developing a feature.\n \nRelease branches: These are used for releasing code to production.\n \nHotfix branches: These are used for releasing a hotfix to production\nfor a defect or emergency fix."},{"number":851,"categorie":"GIT","question":"How will you create a new branch in GIT?","reponse":"We use following command to create a new branch in GIT:\n \n$/> git checkout –b <branchname>"},{"number":852,"categorie":"GIT","question":"How will you add a new feature to the main branch?","reponse":"We do the development work on a feature branch that is created\nfrom master branch. Once the development work is ready we use git\nmerge command to merge it into master branch"},{"number":853,"categorie":"GIT","question":"What is a pull request in GIT?","reponse":"A pull request in GIT is the list of changes that have been pushed to\nGIT repository. Generally these changes are pushed in a feature\nbranch or hotfix branch. After pushing these changes we create a\npull request that contains the changes between master and our\nfeature branch. This pull request is sent to reviewers for reviewing\nthe code and then merging it into develop or release branch."},{"number":854,"categorie":"GIT","question":"What is merge conflict in GIT?","reponse":"A merge conflict in GIT is the result of merging two commits.\nSometimes the commit to be merged and current commit have\nchanges in same location. In this scenario, GIT is not able to decide\nwhich change is more important. Due to this GIT reports a merge\nconflict. It means merge is not successful. We may have to manually\ncheck and resolve the merge conflict."},{"number":855,"categorie":"GIT","question":"How can we resolve a merge conflict in GIT?","reponse":"When GIT reports merge conflict in a file, it marks the lines as\nfollows:\n \nE.g.\nthe business days in this week are\n<<<<<<< HEAD\nfive\n=======\nsix\n>>>>>>> branch-feature\n \n \nTo resolve the merge conflict in a file, we edit the file and fix the\nconflicting change. In above example we can either keep five or six.\n \nAfter editing the file we run git add command followed by git\ncommit command. Since GIT is aware that it was merge conflict, it\nlinks this change to the correct commit."},{"number":856,"categorie":"GIT","question":"What command will you use to delete a branch?","reponse":"After the successful merge of feature branch in main branch, we do\nnot need the feature branch.\n \nTo delete an unwanted branch we use following command:\n \ngit branch –d <branchname>"},{"number":857,"categorie":"GIT","question":"What command will you use to delete a branch that has unmerged changes?","reponse":"To forcibly delete an unwanted branch with unmerged changes, we\nuse following command:\n \ngit branch –D <branchname>"},{"number":858,"categorie":"GIT","question":"What is the alternative command to merging in GIT?","reponse":"Another alternative of merging in GIT is rebasing. It is done by git\nrebase command."},{"number":859,"categorie":"GIT","question":"What is Rebasing in GIT?","reponse":"Rebasing is the process of moving a branch to a new base commit.\nIt is like rewriting the history of a branch.\n \nIn Rebasing, we move a branch from one commit to another. By this\nwe can maintain linear project history.\n \nOnce the commits are pushed to a public repository, it is not a good\npractice to use Rebasing."},{"number":860,"categorie":"GIT","question":"What is the ‘Golden Rule of Rebasing’ in GIT?","reponse":"The golden rule of Rebasing is that we should never use git rebase\non public branches. If other people are using the same branch then\nthey may get confused by looking at the changes in Master branch\nafter GIT rebasing.\n \nTherefore, it is not recommended to do rebasing on a public branch\nthat is also used by other collaborators."},{"number":861,"categorie":"GIT","question":"Why do we use Interactive Rebasing in place of Auto Rebasing?","reponse":"By using Interactive rebasing we can alter the commits before\nmoving them to a new branch.\n \nThis is more powerful than an automated rebase. It gives us\ncomplete control over the branch’s commit history.\n \nGenerally, we use Interactive Rebasing to clean up the messy\nhistory of commits just before merging a feature branch into master."},{"number":862,"categorie":"GIT","question":"What is the command for Rebasing in Git?","reponse":"Git command for rebasing is:\n \ngit rebase <new-commit>"},{"number":863,"categorie":"GIT","question":"What is the main difference between git clone and git remote?","reponse":"The main difference between git clone and git remote is that git\nclone is used to create a new local repository whereas git remote is\nused in an existing repository.\n \ngit remote adds a new reference to existing remote repository for\ntracking further changes.\n \ngit clone creates a new local repository by copying another\nrepository from a URL."},{"number":864,"categorie":"GIT","question":"What is GIT version control?","reponse":"GIT version control helps us in managing the changes to source\ncode over time by a software team. It keeps track of all the changes\nin a special kind of database. If we make a mistake, we can go back\nin time and see previous changes to fix the mistake.\n \nGIT version control helps the team in collaborating on developing a\nsoftware and work efficiently. Every one can merge the changes\nwith confidence that everything is tracked and remains intact in GIT\nversion control. Any bug introduced by a change can be discovered\nand reverted back by going back to a working version."},{"number":865,"categorie":"GIT","question":"What GUI do you use for working on GIT?","reponse":"There are many GUI for GIT that we can use. Some of these are:\n \nGitHub Desktop\nGITX-dev\nGitbox\nGit-cola\nSourceTree\nGit Extensions\nSmartGit\nGitUp"},{"number":866,"categorie":"GIT","question":"What is the use of git diff  command in GIT?","reponse":"In GIT, git diff command is used to display the differences between\n2 versions, or between working directory and an index, or between\nindex and most recent commit.\n \nIt can also display changes between two blob objects, or between\ntwo files on disk in GIT.\n \nIt helps in finding the changes that can be used for code review for a\nfeature or bug fix."},{"number":867,"categorie":"GIT","question":"What is git rerere?","reponse":"In GIT, rerere is a hidden feature. The full form of rerere is “reuse\nrecorded resolution”.\n \nBy using rerere, GIT remembers how we’ve resolved a hunk\nconflict. The next time GIT sees the same conflict, it can\nautomatically resolve it for us."},{"number":868,"categorie":"GIT","question":"What are the three most popular version of git diff command?","reponse":"Three most popular git diff commands are as follows:\n \ngit diff: It displays the differences between working directory and\nthe index.\n \ngit diff –cached: It displays the differences between the index and\nthe most recent commit.\n \ngit diff HEAD: It displays the differences between working\ndirectory and the most recent commit"},{"number":869,"categorie":"GIT","question":"What is the use of git status command?","reponse":"In GIT, git status command mainly shows the status of working tree.\n \nIt shows following items:\n \n1. The paths that have differences between the index file and\nthe current HEAD commit.\n \n2. The paths that have differences between the working tree\nand the index file\n \n3. The paths in the working tree that are not tracked by GIT.\n \nAmong the above three items, first item is the one that we commit by\nusing git commit command. Item two and three can be committed\nonly after running git add command."},{"number":870,"categorie":"GIT","question":"What is the main difference between git diff and git status?","reponse":"In GIT, git diff shows the differences between different commits or\nbetween the working directory and index.\n \nWhereas, git status command just shows the current status of\nworking tree."},{"number":871,"categorie":"GIT","question":"What is the use of git rm command in GIT?","reponse":"In GIT, git rm command is used for removing a file from the\nworking tree and the index.\n \nWe use git rm –r to recursively remove all files from a leading\ndirectory."},{"number":872,"categorie":"GIT","question":"What is the command to apply a stash?","reponse":"Sometimes we want to save our unfinished work. For this purpose\nwe use git stash command. Once we want to come back and\ncontinue working from the last place where we left, we use git stash\napply command to bring back the unfinished work.\n \nSo the command to apply a stash is:\n \ngit stash apply\n \nOr we can use\ngit stash apply <stashname>"},{"number":873,"categorie":"GIT","question":"Why do we use git log command?","reponse":"We use git log command to search for specific commits in project\nhistory.\n \nWe can search git history by author, date or content. It can even list\nthe commits that were done x days before or after a specific date."},{"number":874,"categorie":"GIT","question":"Why do we need git add command in GIT?","reponse":"GIT gives us a very good feature of staging our changes before\ncommit. To stage the changes we use git add command. This adds\nour changes from working directory to the index.\n \nWhen we are working on multiple tasks and we want to just commit\nthe finished tasks, we first add finished changes to staging area and\nthen commit it. At this time git add command is very helpful."},{"number":875,"categorie":"GIT","question":"Why do we use git reset command?","reponse":"We use git reset command to reset current HEAD to a specific state.\nBy default it reverses the action of git add command.\n \nSo we use git reset command to undo the changes of git add\ncommand."},{"number":876,"categorie":"GIT","question":"What does a commit object contain?","reponse":"Whenever we do a commit in GIT by using git commit command,\nGIT creates a new commit object. This commit objects is saved to\nGIT repository.\n \nThe commit object contains following information:\n \nHASH: The SHA1 hash of the Git tree that refers to the state of\nindex at commit time.\nCommit Author: The name of person/process doing the commit and\ndate/time.\nComment: Some text messages that contains the reason for the\ncommit ."},{"number":877,"categorie":"GIT","question":"How can we convert git log messages to a different format?","reponse":"We can use pretty option in git log command for this.\n \ngit log – pretty\n \nThis option converts the output format from default to other formats.\nThere are pre-built formats available for our use.\n \ngit log –pretty=oneline\n \nE.g. git log --pretty=format:\"%h - %an, %ar : %s\"\nba72a6c - Dave Adams, 3 years ago : changed the version number"},{"number":878,"categorie":"GIT","question":"What are the programming languages in which git hooks can be written?","reponse":"Git hooks are generally written in shell and PERL scripts. But these\ncan be written in any other language as long as it has an executable.\n \nGit hooks can also be written in Python script."},{"number":879,"categorie":"GIT","question":"What is a commit message in GIT?","reponse":"A commit message is a comment that we add to a commit. We can\nprovide meaningful information about the reason for commit by\nusing a commit message.\n \nIn most of the organizations, it is mandatory to put a commit\nmessage along with each commit.\n \nOften, commit messages contain JIRA ticket, bug id, defect id etc.\nfor a project."},{"number":880,"categorie":"GIT","question":"How GIT protects the code in a repository?","reponse":"GIT is made very secure since it contains the source code of an\norganization. All the objects in a GIT repository are encrypted with\na hashing algorithm called SHA1.\n \nThis algorithm is quite strong and fast. It protects source code and\nother contents of repository against the possible malicious attacks.\n \nThis algorithm also maintains the integrity of GIT repository by\nprotecting the change history against accidental changes."},{"number":881,"categorie":"GIT","question":"How GIT provides flexibility in version control?","reponse":"GIT is very flexible version control system. It supports non-linear\ndevelopment workflows. It supports flows that are compatible with\nexternal protocols and existing systems.\n \nGIT also supports both branching and tagging that promotes multiple\nkinds of workflows in version control."},{"number":882,"categorie":"GIT","question":"How can we change a commit message in GIT?","reponse":"If a commit has not been pushed to GitHub, we can use git commit --\nammend command to change the commit message.\n \nWhen we push the commit, a new message appears on GitHub."},{"number":883,"categorie":"GIT","question":"Why is it advisable to create an additional commit instead of amending an existing commit?","reponse":"Git amend internally creates a new commit and replaces the old\ncommit. If commits have already been pushed to central repository,\nit should not be used to modify the previous commits.\n \nIt should be generally used for only amending the git comment."},{"number":884,"categorie":"GIT","question":"What is a bare repository in GIT?","reponse":"A repository created with git init –bare command is a bare\nrepository in GIT.\n \nThe bare repository does not contain any working or checked out\ncopy of source files. A bare repository stores git revision history in\nthe root folder of repository instead of in a .git subfolder.\n \nIt is mainly used for sharing and collaborating with other\ndevelopers.\n \nWe can create a bare repository in which all developers can push\ntheir code.\n \nThere is no working tree in bare repository, since no one directly\nedits files in a bare repository."},{"number":885,"categorie":"GIT","question":"How do we put a local repository on GitHub server?","reponse":"To put a local repository on GitHub, we first add all the files of\nworking directory into local repository and commit the changes.\nAfter that we call git remote add <Remote Repo URL> command to\nadd the local repository on GitHub server.\n \nOnce it is added, we use git push command to push the contents of\nlocal repository to remote GitHub server."},{"number":886,"categorie":"GIT","question":"How will you delete a branch in GIT?","reponse":"We use git branch –d <branchname> command to delete a branch in\nGIT.\n \nIn case a local branch is not fully merged, but we want to delete it\nby force, then we use git branch –D <branchname> command."},{"number":887,"categorie":"GIT","question":"How can we set up a Git repository to run code sanity checks and UAT tests just before a commit?","reponse":"We can use git hooks for this kind of purpose. We can write the code\nsanity checks in script. This script can be called by pre-commit\nhook of the repository.\n \nIf this hook passes, then only commit will be successful."},{"number":888,"categorie":"GIT","question":"How can we revert a commit that was pushed earlier and is public now?","reponse":"We can use git revert command for this purpose.\n \nInternally, git revert command creates a new commit with patches\nthat reverse the changes done in previous commits.\n \nThe other option is to checkout a previous commit version and then\ncommit it as a new commit."},{"number":889,"categorie":"GIT","question":"In GIT, how will you compress last n commits into a single commit?","reponse":"Tom compress last n commits a single commit, we use git rebase\ncommand. This command compresses multiple commits and creates\na new commit. It overwrites the history of commits.\n \nIt should be done carefully, since it can lead to unexpected results."},{"number":890,"categorie":"GIT","question":"How will you switch from one branch to a new branch in GIT?","reponse":"In GIT, we can use git checkout <new branchname> command to\nswitch to a new branch."},{"number":891,"categorie":"GIT","question":"How can we clean unwanted files from our working directory in GIT?","reponse":"GIT provides git clean command to recursively clean the working\ntree. It removes the files that are not under version control in GIT.\n \n \nIf we use git clean –x, then ignored files are also removed."},{"number":892,"categorie":"GIT","question":"What is the purpose of git tag command?","reponse":"We use git tag command to add, delete, list or verify a  tag object in\nGIT.\n \nTag objects created with options –a, -s, -u are also known as\nannotated tags.\n \nAnnotated tags are generally used for release."},{"number":893,"categorie":"GIT","question":"What is cherry-pick in GIT?","reponse":"A git cherry-pick is a very useful feature in GIT. By using this\ncommand we can selectively apply the changes done by existing\ncommits.\n \nIn case we want to selectively release a feature, we can remove the\nunwanted files and apply only selected commits."},{"number":894,"categorie":"GIT","question":"What is shortlog in GIT?","reponse":"A shortlog in GIT is a command that summarizes the git log output.\n \nThe output of git shortlog is in a format suitable for release\nannouncements"},{"number":895,"categorie":"GIT","question":"How can you find the names of files that were changed in a specific commit?","reponse":"Every commit in GIT has a hash code. This hash code uniquely\nrepresents the GIT commit object.\n \nWe can use git diff-tree command to list the name of files that were\nchanged in a commit.\n \nThe command will be as follows:\ngit diff-tree  -r <hash of commit>\n \n \nBy using -r flag, we just get the list of individual files."},{"number":896,"categorie":"GIT","question":"How can we attach an automated script to run on the event of a new commit by push command?","reponse":"In GIT we can use a hook to run an automated script on a specific\nevent. We can choose between pre-receive, update or post-receive\nhook and attach our script on any of these hooks.\n \nGIT will automatically run the script on the event of any of these\nhooks."},{"number":897,"categorie":"GIT","question":"What is the difference between pre-receive, update and post-receive hooks in GIT?","reponse":"Pre-receive hook is invoked when a commit is pushed to a\ndestination repository. Any script attached to this hook is executed\nbefore updating any reference. This is mainly used to enforce\ndevelopment best practices and policies.\n \nUpdate hook is similar to pre-receive hook. It is triggered just\nbefore any updates are done. This hook is invoked once for every\ncommit that is pushed to a destination repository.\n \nPost-receive hook is invoked after the updates have been done and\naccepted by a destination repository. This is mainly used to\nconfigure deployment scripts. It can also invoke Continuous\nIntegration (CI) systems and send notification emails to relevant\nparties of a repository."},{"number":898,"categorie":"GIT","question":"Do we have to store Scripts for GIT hooks within same repository?","reponse":"A Hook is local to a GIT repository. But the script attached to a\nhook can be created either inside the hooks directory or it can be\nstored in a separate repository. But we have to link the script to a\nhook in our local repository.\n \nIn this way we can maintain versions of a script in a separate\nrepository, but use them in our repository where hooks are stored.\n \nAlso when we store scripts in a separate common repository, we\ncan reuse same scripts for different purposes in multiple\nrepositories."},{"number":899,"categorie":"GIT","question":"How can we determine the commit that is the source of a bug in GIT?","reponse":"In GIT we can use git bisect command to find the commit that has\nintroduced a bug in the system.\n \nGIT bisect command internally uses binary search algorithm to find\nthe commit that introduced a bug.\n \nWe first tell a bad commit that contains the bug and a good commit\nthat was present before the bug was introduced.\n \nThen git bisect picks a commit between those two endpoints and\nasks us whether the selected commit is good or bad.\n \nIt continues to narrow down the range until it discovers the exact\ncommit responsible for introducing the bug."},{"number":900,"categorie":"GIT","question":"How can we see differences between two commits in GIT?","reponse":"We can use git diff command to see the differences between two\ncommits. The syntax for a simple git diff command to compare two\ncommits is:\n \ngit diff <commit#1> <commit#2>"},{"number":901,"categorie":"GIT","question":"What are the different ways to identify a commit in GIT?","reponse":"Each commit object in GIT has a unique hash. This hash is a 40\ncharacters checksum hash. It is based on SHA1 hashing algorithm.\nWe can use a hash to uniquely identify a GIT commit.\n \nGit also provides support for creating an alias for a commit. This\nalias is known as refs. Every tag in GIT is a ref. These refs can also\nbe used to identify a commit. Some of the special tags in GIT are\nHEAD, FETCH_HEAD and MERGE_HEAD."},{"number":902,"categorie":"GIT","question":"When we run git branch <branchname>, how does GIT know the SHA-1 of the last commit?","reponse":"GIT uses the reference named HEAD for this purpose. The HEAD\nfile in GIT is a symbolic reference to the current branch we are\nworking on.\n \nA symbolic reference is not a normal reference that contains a SHA-\n1 value. A symbolic reference contains a pointer to another\nreference.\n \nWhen we open head file we see:\n$ cat .git/HEAD\nref: refs/heads/master\n \nIf we run git checkout branchA, Git updates the file to look like this:\n \n$ cat .git/HEAD\nref: refs/heads/branchA"},{"number":903,"categorie":"GIT","question":"What are the different types of Tags you can create in GIT?","reponse":"In GIT, we can create two types of Tags.\n \nLightweight Tag: A lightweight tag is a reference that never moves.\nWe can make a lightweight tag by running a command similar to\nfollowing:\n \n$ git update-ref refs/tags/v1.0\ndad0dab538c970e37ea1e769cbbde608743bc96d\n \n \nAnnotated Tag: An annotated tag is more complex object in GIT.\nWhen we create an annotated tag, GIT creates a tag object and\nwrites a reference to point to it rather than directly to the commit.\nWe can create an annotated tag as follows:\n \n$ git tag -a v1.1 1d410eabc13591cb07496601ebc7c059dd55bfe9 -\nm 'test tag'"},{"number":904,"categorie":"GIT","question":"How can we rename a remote repository?","reponse":"We can use command git remote rename for changing the name of a\nremote repository. This changes the short name associated with a\nremote repository in your local. Command would look as follows:\n \ngit remote rename repoOldName repoNewName"},{"number":905,"categorie":"GIT","question":"Some people use git checkout and some use git co for checkout. How is that possible?","reponse":"We can create aliases in GIT for commands by modifying the git\nconfiguration.\n \nIn case of calling git co instead of git checkout we can run following\ncommand:\n \ngit config --global alias.co checkout\n \nSo the people using git co have made the alias for git checkout in\ntheir own environment."},{"number":906,"categorie":"GIT","question":"How can we see the last commit on each of our branch in GIT?","reponse":"When we run git branch command, it lists all the branches in our\nlocal repository. To see the latest commit associated with each\nbranch, we use option –v.\n \nExact command for this is as follows:\n \ngit branch –v\n \nIt lists branches as:\n \n  issue75  83b576c fix issue\n* master  7b96605 Merge branch 'issue75'\n  testing 972ac34 add dave to the developer list"},{"number":907,"categorie":"GIT","question":"Is origin a special branch in GIT?","reponse":"No, origin is not a special branch in GIT.\n \nBranch origin is similar to branch master. It does not have any\nspecial meaning in GIT.\n \nMaster is the default name for a starting branch when we run git init\ncommand.\n \nOrigin is the default name for a remote when we run git clone\ncommand. If we run git clone -o myOrigin instead, then we will\nhave myOrigin/master as our default remote branch."},{"number":908,"categorie":"GIT","question":"How can we configure GIT to not ask for password every time?","reponse":"When we use HTTPS URL to push, the GIT server asks for\nusername and password for authentication. It prompts us on the\nterminal for this information.\n \nIf we don’t want to type username/password with  every single time\npush, we can set up a “credential cache”.\n \nIt is kept in memory for a few minutes. We can set it by running:\n \ngit config --global credential.helper cache"},{"number":909,"categorie":"GIT","question":"What are the four major protocols used by GIT for data transfer?","reponse":"GIT uses following major protocols for data transfer:\n \n1. Local\n2. HTTP\n3. Secure Shell (SSH)\n4. Git"},{"number":910,"categorie":"GIT","question":"What is GIT protocol?","reponse":"Git protocol is a mechanism for transferring data in GIT. It is a\nspecial daemon. It comes pre-packaged with GIT. It listens on a\ndedicated port 9418. It provides services similar to SSH protocol.\n \nBut Git protocol does not support any authentication.\n \nSo on plus side, this is a very fast network transfer protocol. But it\nlacks authentication"},{"number":911,"categorie":"GIT","question":"How can we work on a project where we do not have push access?","reponse":"In case of projects where we do not have push access, we can just\nfork the repository. By running git fork command, GIT will create a\npersonal copy of the repository in our namespace. Once our work is\ndone, we can create a pull request to merge our changes on the real\nproject."},{"number":912,"categorie":"GIT","question":"What is git grep?","reponse":"GIT is shipped along with a grep command that allows us to search\nfor a string or regular expression in any committed tree or the\nworking directory.\n \nBy default, it works on the files in your current working directory."},{"number":913,"categorie":"GIT","question":"How can your reorder commits in GIT?","reponse":"We can use git rebase command to reorder commits in GIT. It can\nwork interactively and you can also select the ordering of commits"},{"number":914,"categorie":"GIT","question":"How will you split a commit into multiple commits?","reponse":"To split a commit, we have to use git rebase command in interactive\nmode. Once we reach the commit that needs to be split, we reset\nthat commit and take the changes that have been reset. Now we can\ncreate multiple commits out of that."},{"number":915,"categorie":"GIT","question":"What is filter-branch in GIT?","reponse":"In GIT, filter-branch is another option to rewrite history. It can scrub\nthe entire history. When we have large number of commits, we can\nuse this tool.\n \nIt gives many options like removing the commit related changes  to a\nspecific file from history.\n \nYou can even set you name and email in the commit history by using\nfilter-branch."},{"number":916,"categorie":"GIT","question":"What are the three main trees maintained by GIT?","reponse":"GIT maintains following three trees:\n \nHEAD: This is the last commit snapshot.\nIndex: This is the proposed next commit snapshot.\nWorking Directory: This is the sandbox for doing changes."},{"number":917,"categorie":"GIT","question":"What are the three main steps of working GIT?","reponse":"GIT has following three main steps in a simple workflow:\n \n1. Checkout the project from HEAD to Working Directory.\n2. Stage the files from Working Directory to Index.\n3. Commit the changes from Index to HEAD."},{"number":918,"categorie":"GIT","question":"What are ours and theirs merge options in GIT?","reponse":"In  GIT, we get two simple options for resolving merge conflicts:\nours and theirs\n \nThese options tell the GIT which side to favor in merge conflicts.\n \nIn ours, we run a command like git merge -Xours branchA\n \nAs the name suggests, in ours, the changes in our branch are favored\nover the other branch during a merge conflict"},{"number":919,"categorie":"GIT","question":"How can we ignore merge conflicts due to Whitespace?","reponse":"GIT provides an option ignore-space-change in git merge command\nto ignore the conflicts related to whitespaces.\n \nThe command to do so is as follows:\n \n \ngit merge -Xignore-space-change whitespace"},{"number":920,"categorie":"GIT","question":"What is git blame?","reponse":"In GIT, git blame is a very good option to find the person who\nchanged a specific line. When we call git blame on a file, it\ndisplays the commit and name of a person responsible for making\nchange in that line.\n \nFollowing is a sample:\n \n$ git blame -L 12,19 HelloWorld.java\n^1822fe2 (Dave Adams  2016-03-15 10:31:28 -0700 12)  public\nclass HelloWorld {\n^1822fe2 (Dave Adams  2016-03-15 10:31:28 -0700 13) \n^1822fe2 (Dave Adams  2016-03-15 10:31:28 -0700 14)     public\nstatic void main(String[] args) {\naf6560e4 (Dave Adams  2016-03-17 21:52:20 -0700 16)    // Prints\n\"Hello, World\" to the terminal window.\na9eaf55d (Dave Adams  2016-04-06 10:15:08 -0700 17)  \nSystem.out.println(\"Hello, World\");\naf6560e4 (Dave Adams  2016-03-17 21:52:20 -0700 18)    }\naf6560e4 (Dave Adams  2016-03-17 21:52:20 -0700 19) }"},{"number":921,"categorie":"GIT","question":"What is a submodule in GIT?","reponse":"In GIT, we can create sub modules inside a repository by using git\nsubmodule command.\n \nBy using submodule command, we can keep a Git repository as a\nsubdirectory of another Git repository.\n \nIt allows us to keep our commits to submodule separate from the\ncommits to main Git repository.\n \n AWS"},{"number":922,"categorie":"AWS","question":"What do you know about AWS Region?","reponse":"An AWS Region is a completely independent entity in a\ngeographical area. There are two more Availability Zones in an\nAWS Region.\n \nWithin a region, Availability Zones are connected through low-\nlatency links.\n \nSince each AWS Region is isolated from another Region, it\nprovides very high fault tolerance and stability.\n \nFor launching an EC2 instance, we have to select an AMI within the\nsame region"},{"number":923,"categorie":"AWS","question":"What are the important components of IAM?","reponse":"The important components of IAM are as follows:\n1. IAM User: An IAM User is a person or service that will\ninteract with AWS. User can sign into AWS Management\nConsole for performing tasks in AWS.\n \n2. IAM Group: An IAM Group is a collection of IAM users.\nWe can specify permission to an IAM Group. This helps in\nmanaging large number of IAM users. We can simply add or\nremove an IAM User to an IAM Group to manage the\npermissions.\n \n3. IAM Role: An IAM Role is an identity to which we give\npermissions. A Role does not have any credentials\n(password or access keys). We can temporarily give an\nIAM Role to an IAM User to perform certain tasks in\nAWS.\n \n4. IAM Permission: In IAM we can create two types of\nPermissions. Identity based and Resource based. We can\ncreate a Permission to access or perform an action on an\nAWS Resource and assign it to a User, Role or Group. We\ncan also create Permissions on resources like S3 bucket,\nGlacier vault etc and specify who has access to the\nresource.\n \n5. IAM Policy: An IAM Policy is a document in which we list\npermissions to specify Actions, Resources and Effects. This\ndocument is in JSON format. We can attach a Policy to an\nIAM User or Group"},{"number":924,"categorie":"AWS","question":"What are the important points about AWS IAM?","reponse":"Some of the important points about AWS IAM are as follows:\n1. A new User in IAM does not have any permission.\n2. AWS IAM assigns an Access Key and a Secret Access Key to a new\nUser.\n3. An Access Key cannot be used to login to AWS Console.\n4. We use Access Key to access AWS via an APIs or Command Line\ninterface.\n5. IAM is a universal application. It is common across all the regions in\nAWS.\n6. When we first setup our AWS account, we get a root account that has\ncomplete Admin access."},{"number":925,"categorie":"AWS","question":"What are the important features of Amazon S3?","reponse":"Some of the important features of Amazon S3 are as follows:\n1. Amazon S3 provides unlimited storage for files.\n2. File size in Amazon S3 can vary from 0 Bytes to 5 Terabytes.\n3. We have store files in Buckets in Amazon S3.\n4. In Amazon S3, names of buckets have to be unique globally.\n5. Amazon S3 is Object Based storage"},{"number":926,"categorie":"AWS","question":"What is the scale of durability in Amazon S3?","reponse":"Amazon S3 supports durability at the scale of 99.999999999% of time. This is\n9 nines after decimal."},{"number":927,"categorie":"AWS","question":"What are the Consistency levels supported by Amazon S3?","reponse":"Amazon S3 supports Read after Write consistency when we create a new\nobject by PUT. It means as soon as we Write a new object, we can access it.\nAmazon S3 supports Eventual Consistency when we overwrite an existing\nobject by PUT. Eventual Consistency means that the effect of overwrite will\nnot be immediate but will happen after some time.\nFor deletion of an object, Amazon S3 supports Eventual Consistency after\nDELETE."},{"number":928,"categorie":"AWS","question":"What are the different tiers in Amazon S3 storage?","reponse":"Different Storage tiers in Amazon S3 are as follows:\n1. S3 Standard: In this tier, S3 supports durable storage of files that\nbecome immediately available. This is used for frequently used files.\n \n2. S3 Standard -Infrequent Access (IA): In this tier, S3 provides\ndurable storage that is immediately available. But in this tier files are\ninfrequently accessed.\n \n3. S3 Reduced Redundancy Storage (RRS): In this tier, S3 provides\nthe option to customers to store data at lower levels of redundancy. In\nthis case data is copied to multiple locations but not on as many\nlocations as standard S3."},{"number":929,"categorie":"AWS","question":"How will you upload a file greater than 100 megabytes in Amazon S3?","reponse":"Amazon S3 supports storing objects or files up to 5 terabytes. To upload a file\ngreater than 100 megabytes, we have to use Multipart upload utility from AWS.\nBy using Multipart upload we can upload a large file in multiple parts.\nEach part will be independently uploaded. It doesn’t matter in what order each\npart is uploaded. It even supports uploading these parts in parallel to decrease\noverall time. Once all the parts are uploaded, this utility makes these as one\nsingle object or file from which the parts were created."},{"number":930,"categorie":"AWS","question":"What happens to an Object when we delete it from Amazon S3?","reponse":"Amazon S3 provides DELETE API to delete an object.\nIf the bucket in which the object exists is version controlled, then we can\nspecify the version of the object that we want to delete. The other versions of\nthe Object still exist within the bucket.\nIf we do not specify the version, and just pass the key name, Amazon S3 will\ndelete the object and return the version id. And the object will not appear on\nthe bucket.\nIn case the bucket is Multi-factor authentication (MFA) enabled, then the\nDELETE request will fail if we do not specify a MFA token."},{"number":931,"categorie":"AWS","question":"What is the use of Amazon Glacier?","reponse":"Amazon Glacier is an extremely low cost cloud based storage service\nprovided by Amazon.\nWe mainly use Amazon Glacier for long-term backup purpose.\nAmazon Glacier can be used for storing data archives for months, years or\neven decades.\nIt can also be used for long term immutable storage based on regulatory and\narchiving requirements. It provides Vault Lock support for this purpose. In this\noption, we write once but can read many times same data.\nOne use case is for storing certificates that can be issued only once and only\nthe original person keeps the main copy."},{"number":932,"categorie":"AWS","question":"Can we disable versioning on a version-enabled bucket in Amazon S3?","reponse":"No, we cannot disable versioning on a version-enabled bucket in Amazon S3.\nWe can just suspend the versioning on a bucket in S3.\nOnce we suspend versioning, Amazon S3 will stop creating new versions of\nthe object. It just stores the object with null version ID.\nOn overwriting an existing object, it just replaces the object with null version\nID. So any existing versions of the object still remain in the bucket. But there\nwill be no more new versions of the same object except for the null version ID\nobject"},{"number":933,"categorie":"AWS","question":"What are the use cases of Cross Region Replication Amazon S3?","reponse":"We can use Cross Region Replication Amazon S3 to make copies of an object\nacross buckets in different AWS Regions. This copying takes place\nautomatically and in an asynchronous mode.\nWe have to add replication configuration on our source bucket in S3 to make\nuse of Cross Region Replication. It will create exact replicas of the objects\nfrom source bucket to destination buckets in different regions.\nSome of the main use cases of Cross Region Replication are as follows:\n1. Compliance: Some times there are laws/regulatory requirements that\nask for storing data at farther geographic locations. This kind of\ncompliance can be achieved by using AWS Regions that are spread\nacross the world.\n \n2. Failover: At times, we want to minimize the probability of system\nfailure due to complete blackout in a region. We can use Cross-\nRegion Replication in such a scenario.\n3. Latency: In case we are serving multiple geographies, it makes sense\nto replicate objects in the geographical Regions that are closer to end\ncustomer. This helps in reducing the latency."},{"number":934,"categorie":"AWS","question":"Can we do Cross Region replication in Amazon S3 without enabling versioning on a bucket?","reponse":"No, we have to enable versioning on a bucket to perform Cross Region\nReplication"},{"number":935,"categorie":"AWS","question":"What are the different types of actions in Object Lifecycle Management in Amazon S3?","reponse":"There are mainly two types of Object Lifecycle Management actions in\nAmazon S3.\n1. Transition Actions: These actions define the state when an Object\ntransitions from one storage class to another storage class. E.g. a new\nobject may transition to STANDARD_IA (infrequent access) class\nafter 60 days of creation. And it can transition to GLACIER after 180\ndays of creation.\n \n2. Expiration Actions: These actions specify what happens when an\nObject expires. We can ask S3 to delete an object completely on\nexpiration"},{"number":936,"categorie":"AWS","question":"How do we get higher performance in our application by using Amazon CloudFront?","reponse":"If our application is content rich and used across multiple locations, we can\nuse Amazon CloudFront to increase its performance. Some of the techniques\nused by Amazon CloudFront are as follows:\nCaching: Amazon CloudFront caches the copies of our application’s content at\nlocations closer to our viewers. By this caching our users get our content very\nfast. Also due to caching the load on our main server decreases.\nEdge / Regional Locations: CloudFront uses a global network of Edge and\nRegional edge locations to cache our content. These locations cater to almost\nall of the geographical areas across the world.\nPersistent Connections: In certain cases, CloudFront keeps persistent\nconnections with the main server to fetch the content quickly.\nOther Optimization: Amazon CloudFront also uses other optimization\ntechniques like TCP initial congestion window etc to deliver high performance\nexperience."},{"number":937,"categorie":"AWS","question":"What is the mechanism behind Regional Edge Cache in Amazon CloudFront?","reponse":"A Regional Edge Cache location lies between the main webserver and the\nglobal edge location. When the popularity of an object/content decreases, the\nglobal edge location may take it out from the cache.\nBut Regional Edge location maintains a larger cache. Due to this the\nobject/content can stay for long time in Regional Edge location. Due to this\nCloudFront does not have to go back to main webserver. When it does not find\nany object in Global Edge location it just looks for in Regional Edge location.\nThis improves the performance for serving content to our users in Amazon\nCloudFront."},{"number":938,"categorie":"AWS","question":"What are the benefits of Streaming content?","reponse":"We can get following benefits by Streaming content:\n1. Control: We can provide more control to our users for what they\nwant to watch. In a video streaming, users can select the locations in\nvideo where they want to start watching from.\n \n2. Content: With streaming our entire content does not stay at a user’s\ndevice. Users gets only the part they are watching. Once the session is\nover, content is removed from the user’s device.\n \n3. Cost: With streaming there is no need to download all the content to a\nuser’s device. A user can start viewing content as soon as some part\nis available for viewing. This saves costs since we do not have to\ndownload a large media file before starting each viewing session."},{"number":939,"categorie":"AWS","question":"What is Lambda@Edge in AWS?","reponse":"In AWS, we can use Lambda@Edge utility to solve the problem of low\nnetwork latency for end users.\nIn Lambda@Edge there is no need to provision or manage servers. We can just\nupload our Node.js code to AWS Lambda and create functions that will be\ntriggered on CloudFront requests.\nWhen a request for content is received by CloudFront edge location, the\nLambda code is ready to execute.\nThis is a very good option for scaling up the operations in CloudFront without\nmanaging servers"},{"number":940,"categorie":"AWS","question":"What are the different types of events triggered by Amazon CloudFront?","reponse":"Different types of events triggered by Amazon CloudFront are as follows:\n1. Viewer Request: When an end user or a client program makes an\nHTTP/HTTPS request to CloudFront, this event is triggered at the\nEdge Location closer to the end user.\n2. Viewer Response: When a CloudFront server is ready to respond to\na request, this event is triggered.\n3. Origin Request: When CloudFront server does not have the\nrequested object in its cache, the request is forwarded to Origin\nserver. At this time this event is triggered.\n4. Origin Response: When CloudFront server at an Edge location\nreceives the response from Origin server, this event is triggered."},{"number":941,"categorie":"AWS","question":"What is Geo Targeting in Amazon CloudFront?","reponse":"In Amazon CloudFront we can detect the country from where end users are\nrequesting our content. This information can be passed to our Origin server by\nAmazon CloudFront. It is sent in a new HTTP header.\nBased on different countries we can generate different content for different\nversions of the same content. These versions can be cached at different Edge\nLocations that are closer to the end users of that country.\nIn this way we are able to target our end users based on their geographic\nlocations"},{"number":942,"categorie":"AWS","question":"What are the main features of Amazon CloudFront?","reponse":"Some of the main features of Amazon CloudFront are as follows:\n1. Device Detection\n2. Protocol Detection\n3. Geo Targeting\n4. Cache Behavior\n5. Cross Origin Resource Sharing\n6. Multiple Origin Servers\n7. HTTP Cookies\n8. Query String Parameters\n9. Custom SSL"},{"number":943,"categorie":"AWS","question":"What are the security mechanisms available in Amazon S3?","reponse":"Amazon S3 is a very secure storage service. Some of the main security\nmechanisms available in Amazon S3 are as follows:\n1. Access: When we create a bucket or an object, only the owner get the\naccess to the bucket and objects.\n \n2. Authentication: Amazon S3 also support user authentication to\ncontrol who has access to a specific object or bucket.\n \n3. Access Control List: We can create Access Control Lists (ACL) to\nprovide selective permissions to users and groups.\n \n4. HTTPS: Amazon S3 also supports HTTPS protocol to securely\nupload and download data from cloud.\n \n5. Encryption: We can also use Server Side Encryption (SSE) in\nAmazon S3 to encrypt data.\n Cloud Computing"},{"number":944,"categorie":"AWS","question":"What are the benefits of Cloud Computing?","reponse":"There are ten main benefits of Cloud Computing:\n \nFlexibility: The businesses that have fluctuating bandwidth demands need the\nflexibility of Cloud Computing. If you need high bandwidth, you can scale up\nyour cloud capacity. When you do not need high bandwidth, you can just scale\ndown. There is no need to be tied into an inflexible fixed capacity\ninfrastructure.\nDisaster Recovery: Cloud Computing provides robust backup and recovery\nsolutions that are hosted in cloud. Due to this there is no need to spend extra\nresources on homegrown disaster recovery. It also saves time in setting up\ndisaster recovery.\nAutomatic Software Updates: Most of the Cloud providers give automatic\nsoftware updates. This reduces the extra task of installing new software\nversion and always catching up with the latest software installs.\nLow Capital Expenditure: In Cloud computing the model is Pay as you Go.\nThis means there is very less upfront capital expenditure. There is a variable\npayment that is based on the usage.\nCollaboration: In a cloud environment, applications can be shared between\nteams. This increases collaboration and communication among team members.\nRemote Work: Cloud solutions provide flexibility of working remotely. There\nis no on site work. One can just connect from anywhere and start working.Security: Cloud computing solutions are more secure than regular onsite work.\nData stored in local servers and computers is prone to security attacks. In\nCloud Computing, there are very few loose ends. Cloud providers give a\nsecure working environment to its users.\nDocument Control: Once the documents are stored in a common repository, it\nincreases the visibility and transparency among companies and their clients.\nSince there is one shared copy, there are fewer chances of discrepancies.\nCompetitive Pricing: In Cloud computing there are multiple players, so they\nkeep competing among themselves and provide very good pricing. This comes\nout much cheaper compared to other options.\nEnvironment Friendly: Cloud computing saves precious environmental\nresources also. By not blocking the resources and bandwidth."},{"number":945,"categorie":"AWS","question":"What is On-demand computing in Cloud Computing?","reponse":"On-demand Computing is the latest model in enterprise systems. It is related to\nCloud computing. It means IT resources can be provided on demand by a\nCloud provider.\n \nIn an enterprise system demand for computing resources varies from time to\ntime. In such a scenario, On-demand computing makes sure that servers and IT\nresources are provisioned to handle the increase/decrease in demand.\n \nA cloud provider maintains a poll of resources. The pool of resources contains\nnetworks, servers, storage, applications and services. This pool can serve the\nvarying demand of resources and computing by various enterprise clients.\n \nThere are many concepts like- grid computing, utility computing, autonomic\ncomputing etc. that are similar to on-demand computing.\n \nThis is the most popular trend in computing model as of now."},{"number":946,"categorie":"AWS","question":"What are the different layers of Cloud computing?","reponse":"Three main layers of Cloud computing are as follows:\n \nInfrastructure as a Service (IAAS):  IAAS providers give low-level\nabstractions of physical devices. Amazon Web Services (AWS) is an example\nof IAAS. AWS provides EC2 for computing, S3 buckets for storage etc.\nMainly the resources in this layer are hardware like memory, processor speed,\nnetwork bandwidth etc.\n \nPlatform as a Service (PAAS): PAAS providers offer managed services like\nRails, Django etc. One good example of PAAS is Google App Engineer. These\nare the environments in which developers can develop sophisticated software\nwith ease.\n \nDevelopers just focus on developing software, whereas scaling and\nperformance is handled by PAAS provider.\n \nSoftware as a Service (SAAS): SAAS provider offer an actual working\nsoftware application to clients. Salesforce and Github are two good examples\nof SAAS. They hide the underlying details of the software and just provide an\ninterface to work on the system. Behind the scenes the version of Software can\nbe easily changed."},{"number":947,"categorie":"AWS","question":"What resources are provided by Infrastructure as a Service (IAAS) provider?","reponse":"An IAAS provider can give physical, virtual or both kinds of resources. These\nresources are used to build cloud.\n \nIAAS provider handles the complexity of maintaining and deploying these\nservices.\n \nIAAS provider also handles security and backup recovery for these services.\nThe main resources in IAAS are servers, storage, routers, switches and other\nrelated hardware etc."},{"number":948,"categorie":"AWS","question":"What is the benefit of Platform as a Service?","reponse":"Platform as a service (PaaS) is a kind of cloud computing service. A PaaS\nprovider offers a platform on which clients can develop, run and manage\napplications without the need of building the infrastructure.\n \nIn PAAS clients save time by not creating and managing infrastructure\nenvironment associated with the app that they want to develop."},{"number":949,"categorie":"AWS","question":"What are the main advantages of PaaS?","reponse":"The advantages of PaaS are:\n \nIt allows development work on higher level programming with very less\ncomplexity.\nTeams can focus on just the development of the application that makes the\napplication very effective. \nMaintenance and enhancement of the application is much easier.\nIt is suitable for situations in which multiple developers work on a single\nproject but are not co-located."},{"number":950,"categorie":"AWS","question":"What is the main disadvantage of PaaS?","reponse":"Biggest disadvantage of PaaS is that a developer can only use the tools that\nPaaS provider makes available. A developer cannot use the full range of\nconventional tools. \n \nSome PaaS providers lock in the clients in their platform. This also decreases\nthe flexibility of clients using PaaS."},{"number":951,"categorie":"AWS","question":"What are the different deployment models in Cloud computing?","reponse":"Cloud computing supports following deployment models:\n \nPrivate Cloud: Some companies build their private cloud. A private cloud is a\nfully functional platform that is owned, operated and used by only one\norganization.\n \nPrimary reason for private cloud is security. Many companies feel secure in\nprivate cloud. The other reasons for building private cloud are strategic\ndecisions or control of operations.\n \nThere is also a concept of Virtual Private Cloud (VPC). In VPC, private cloud\nis built and operated by a hosting company. But it is exclusively used by one\norganization.\n \nPublic Cloud: There are cloud platforms by some companies that are open for\ngeneral public as well as big companies for use and deployment. E.g. Google\nApps, Amazon Web Services etc.\n \nThe public cloud providers focus on layers and application like- cloud\napplication, infrastructure management etc. In this model resources are shared\namong different organizations.\n Hybrid Cloud: The combination of public and private cloud is known as\nHybrid cloud. This approach provides benefits of both the approaches- private\nand public cloud. So it is very robust platform.\n \nA client gets functionalities and features of both the cloud platforms. By using\nHybrid cloud an organization can create its own cloud as well as they can pass\nthe control of their cloud to another third party."},{"number":952,"categorie":"AWS","question":"What is the difference between Scalability and Elasticity?","reponse":"Scalability is the ability of a system to handle the increased load on its current\nhardware and software resources. In a highly scalable system it is possible to\nincrease the workload without increasing the resource capacity.  Scalability\nsupports any sudden surge in the demand/traffic with current set of resources.\n \nElasticity is the ability of a system to increase the workload by increasing the\nhardware/software resources dynamically. Highly elastic systems can handle\nthe increased demand and traffic by dynamically commission and\ndecommission resources. Elasticity is an important characteristic of Cloud\nComputing applications. Elasticity means how well your architecture is\nadaptable to workload in real time.\n \n \nE.g. If in a system, one server can handle 100 users, 2 servers can handle 200\nusers and 10 servers can handle 1000 users. But in case for adding every X\nusers, if you need 2X the amount of servers, then it is not a scalable design.\n \nLet say, you have just one user login every hour on your site. Your one server\ncan handle this load. But, if suddenly, 1000 users login at once, can your\nsystem quickly start new web servers on the fly to handle this load? Your\ndesign is elastic if it can handle such sudden increase in traffic so quickly."},{"number":953,"categorie":"AWS","question":"What is Software as a Service?","reponse":"Software as Service is a category of cloud computing in which Software is\ncentrally hosted and it is licensed on a subscription basis. It is also known as\nOn-demand software. Generally, clients access the software by using a thin-\nclient like a web browser. \n \nMany applications like Google docs, Microsoft office etc. provide SaaS model\nfor their software. \n \nThe benefit of SaaS is that a client can add more users on the fly based on its\ncurrent needs. And client does not need to install or maintain any software on\nits premises to use this software."},{"number":954,"categorie":"AWS","question":"What are the different types of Datacenters in Cloud computing?","reponse":"Cloud computing consists of different types of Datacenters linked in a grid\nstructure. The main types of Datacenters in Cloud computing are:\n \nContainerized Datacenter\n \nAs the name suggests, containerized datacenter provides high level of\ncustomization for an organization. These are traditional kind of datacenters. We\ncan choose the different types of servers, memory, network and other\ninfrastructure resources in this datacenter. Also we have to plan temperature\ncontrol, network management and power management in this kind of datacenter.\n \nLow-Density Datacenters\n \nIn a Low-density datacenter, we get high level of performance. In such a\ndatacenter if we increase the density of servers, the issue with power comes.\nWith high density of servers, the area gets heated. In such a scenario, effective\nheat and power management is done. To reach high level of performance, we\nhave to optimize the number of servers’ in the datacenter."},{"number":955,"categorie":"AWS","question":"Explain the various modes of Software as a Service (SaaS) cloud environment?","reponse":"Software as a Service (SaaS) is used to offer different kinds of software\napplications in a Cloud environment. Generally these are offered on\nsubscription basis. Different modes of SaaS are:\n \nSimple multi-tenancy: In this setup, each client gets its own resources. These\nresources are not shared with other clients. It is more secure option, since\nthere is no sharing of resources. But it an inefficient option, since for each\nclient more money is needed to scale it with the rising demands. Also it takes\ntime to scale up the application in this mode.\n \nFine grain multi-tenancy: In this mode, the feature provided to each client is\nsame. The resources are shared among multiple clients. It is an efficient mode\nof cloud service, in which data is kept private among different clients but\ncomputing resources are shared. Also it is easier and quicker to scale up the\nSaaS implementation for different clients."},{"number":956,"categorie":"AWS","question":"What are the important things to care about in Security in a cloud environment?","reponse":"In a cloud-computing environment, security is one of the most important\naspects.\n \nWith growing concern of hacking, every organization wants to make its\nsoftware system and data secure. Since in a cloud computing environment,\nSoftware and hardware is not on the premises of an organization, it becomes\nmore important to implement the best security practices.\n \nOrganizations have to keep their Data most secure during the transfer between\ntwo locations. Also they have to keep data secure when it is stored at a\nlocation. Hackers can hack into application or they can get an unauthorized\ncopy of the data. So it becomes important to encrypt the data during transit as\nwell as during rest to protect it from unwanted hackers."},{"number":957,"categorie":"AWS","question":"Why do we use API in cloud computing environment?","reponse":"Application Programming Interfaces (API) is used in cloud computing\nenvironment for accessing many services. APIs are very easy to use. They\nprovide a quick option to create different set of applications in cloud\nenvironment.\nAn API provides a simple interface that can be used in multiple scenarios.\n \nThere are different types of clients for cloud computing APIs. It is easier to\nserve different needs of multiple clients with APIs in cloud computing\nenvironment."},{"number":958,"categorie":"AWS","question":"What are the different areas of Security Management in cloud?","reponse":"Different areas of Security management in cloud are as follows:\n \nIdentity Management: This aspect creates different level of users, roles and\ntheir credentials to access the services in cloud.\n \nAccess Control: In this area, we create multiple levels of permissions and\naccess areas that can be given to a user or role for accessing a service in cloud\nenvironment.\n \n \nAuthentication: In this area, we check the credentials of a user and confirm that\nit is the correct user. Generally this is done by user password and multi-factor\nauthentication like-verification by a one-time use code on cell phone.\n \nAuthorization: In this aspect, we check for the permissions that are given to a\nuser or role. If a user is authorized to access a service, they are allowed to use\nit in the cloud environment."},{"number":959,"categorie":"AWS","question":"What are the main cost factors of cloud based data center?","reponse":"Costs in a Cloud based data center are different from a traditional data center.\nMain cost factors of cloud based data center are as follows:\n \nLabor cost: We need skilled staff that can work with the cloud-based\ndatacenter that we have selected for our operation. Since cloud is not a very\nold technology, it may get difficult to get the right skill people for handling\ncloud based datacenter.\n \nPower cost: In some cloud operations, power costs are borne by the client.\nSince it is a variable cost, it can increase with the increase in scale and usage.\n \nComputing cost: The biggest cost in Cloud environment is the cost that we pay\nto Cloud provider for giving us computing resources. This cost is much higher\ncompared to the labor or power costs."},{"number":960,"categorie":"AWS","question":"How can we measure the cloud-based services?","reponse":"In a cloud-computing environment we pay for the services that we use. So main\ncriteria to measure a cloud based service its usage.\n \nFor computing resource we measure by usage in terms of time and the power\nof computing resource.\n \nFor a storage resource we measure by usage in terms of bytes (giga bytes) and\nbandwidth used in data transfer.\n \nAnother important aspect of measuring a cloud service is its availability. A\ncloud provider has to specify the service level agreement (SLA) for the time\nfor which service will be available in cloud."},{"number":961,"categorie":"AWS","question":"How a traditional datacenter is different from a cloud environment?","reponse":"In a traditional datacenter the cost of increasing the scale of computing\nenvironment is much higher than a Cloud computing environment. Also in a\ntraditional data center, there are not much benefits of scaling down the\noperation when demand decreases. Since most of the expenditure is in capital\nspent of buying servers etc., scaling down just saves power cost, which is very\nless compared to other fixed costs.\n \nAlso in a Cloud environment there is no need to higher a large number of\noperations staff to maintain the datacenter. Cloud provider takes care of\nmaintaining and upgrading the resources in Cloud environment.\n \nWith a traditional datacenter, people cost is very high since we have to hire a\nlarge number of technical operation people for in-house datacenter."},{"number":962,"categorie":"AWS","question":"How will you optimize availability of your application in a Cloud environment?","reponse":"In a Cloud environment, it is important to optimize the availability of an\napplication by implementing disaster recovery strategy. For disaster recovery\nwe create a backup application in another location of cloud environment. In\ncase of complete failure at a data center we use the disaster recovery site to\nrun the application.\n \nAnother aspect of cloud environment is that servers often fail or go down. In\nsuch a scenario it is important to implement the application in such a way that\nwe just kill the slow server and restart another server to handle the traffic\nseamlessly."},{"number":963,"categorie":"AWS","question":"What are the requirements for implementing IaaS strategy in Cloud?","reponse":"Main requirements to implement IAAS are as follows:\n \nOperating System (OS): We need an OS to support hypervisor in IaaS. We can\nuse open source OS like Linux for this purpose.\n \nNetworking: We have to define and implement networking topology for IaaS\nimplementation. We can use public or private network for this.\n \nCloud Model: We have to select the right cloud model for implementing IaaS\nstrategy. It can be SaaS, PaaS or CaaS.\n DOCKER"},{"number":964,"categorie":"AWS","question":"What is Docker?","reponse":"Docker is Open Source software. It provides the automation of\nLinux application deployment in a software container.\n \nWe can do operating system level virtualization on Linux with\nDocker.\n \nDocker can package software in a complete file system that contains\nsoftware code, runtime environment, system tools, & libraries that\nare required to install and run the software on a server."},{"number":965,"categorie":"AWS","question":"What is the difference between Docker image and Docker container?","reponse":"Docker container is simply an instance of Docker image.\n \nA Docker image is an immutable file, which is a snapshot of\ncontainer. We create an image with build command.\n \nWhen we use run command, an Image will produce a container.\n \nIn programming language, an Image is a Class and a Container is an\ninstance of the class."},{"number":966,"categorie":"AWS","question":"How will you remove an image from Docker?","reponse":"We can use docker rmi command to delete an image from our local\nsystem.\n \nExact command is:\n \n% docker rmi <Image Id>\n \nIf we want to find IDs of all the Docker images in our local system,\nwe can user docker images command.\n \n% docker images\n \nIf we want to remove a docker container then we use docker rm\ncommand.\n \n% docker rm <Container Id>"},{"number":967,"categorie":"AWS","question":"How is a Docker container different from a hypervisor?","reponse":"In a Hypervisor environment we first create a Virtual Machine and\nthen install an Operating System on it. After that we deploy the\napplication. The virtual machine may also be installed on different\nhardware configurations.\n \nIn a Docker environment, we just deploy the application in Docker.\nThere is no OS layer in this environment. We specify libraries, and\nrest of the kernel is provided by Docker engine.\n \nIn a way, Docker container and hypervisor are complementary to\neach other."},{"number":968,"categorie":"AWS","question":"Can we write compose file in json file instead of yaml?","reponse":"Yes. Yaml format is a superset of json format. Therefore any json\nfile is also a valid Yaml file.\n \nIf we use a json file then we have to specify in docker command that\nwe are using a json file as follows:\n \n% docker-compose -f docker-compose.json up"},{"number":969,"categorie":"AWS","question":"Can we run multiple apps on one server with Docker?","reponse":"Yes, theoretically we can run multiples apps on one Docker server.\nBut in practice, it is better to run different components on separate\ncontainers.\n \nWith this we get cleaner environment and it can be used for multiple\nuses."},{"number":970,"categorie":"AWS","question":"What are the common use cases of Docker?","reponse":"Some of the common use cases of Docker are as follows:\n \n1. Setting up Development Environment: We can use\nDocker to set the development environment with the\napplications on which our code is dependent.\n2. Testing Automation Setup: Docker can also help in\ncreating the Testing Automation setup. We can setup\ndifferent services and apps with Docker to create the\nautomation testing environment.\n3. Production Deployment: Docker also helps in\nimplementing the Production deployment for an\napplication. We can use it to create the exact environment\nand process that will be used for doing the production\ndeployment."},{"number":971,"categorie":"AWS","question":"What are the main features of Docker-compose?","reponse":"Some of the main features of Docker-compose are as follows:\n \n1. Multiple environments on same Host: We can use it to\ncreate multiple environments on the same host server.\n2. Preserve Volume Data on Container Creation: Docker\ncompose also preserves the volume data when we create a\ncontainer.\n3. Recreate the changed Containers: We can also use\ncompose to recreate the changed containers.\n4. Variables in Compose file: Docker compose also supports\nvariables in compose file. In this way we can create\nvariations of our containers."},{"number":972,"categorie":"AWS","question":"What is the most popular use of Docker?","reponse":"The most popular use of Docker is in build pipeline. With the use of\nDocker it is much easier to automate the development to deployment\nprocess in build pipeline.\n \nWe use Docker for the complete build flow from development\nwork, test run and deployment to production environment."},{"number":973,"categorie":"AWS","question":"What is the role of open source development in the popularity of Docker?","reponse":"Since Linux was an open source operating system, it opened new\nopportunities for developers who want to contribute to open source\nsystems.\n \nOne of the very good outcomes of open source software is Docker.\nIt has very powerful features.\n \nDocker has wide acceptance due to its usability as well as its open\nsource approach of integrating with different systems.\n \n UNIX Shell"},{"number":974,"categorie":"AWS","question":"How will you remove all files in current directory?","reponse":"Including the\nfiles that are two levels down in a sub-\ndirectory.\n \nIn Unix we have rm command to remove files and sub-directories.\nWith rm command we have –r option that stands for recursive. The\n–r option can delete all files in a directory recursively.\n \nIt means if we our current directory structure is as follows:\n \nMy_dir\n->Level_1_dir\n-> Level_1_dir ->Level_2_dir\n-> Level_1_dir ->Level_2_dir->a.txt\n \nWith rm –r * command we can delete the file a.txt as well as sub-\ndirectories Level_1_dir and Level_2_dir.\n \nCommand:\nrm – r *\n \nThe asterisk (*) is a wild card character that stands for all the files\nwith any name."},{"number":975,"categorie":"AWS","question":"What is the difference between the –v and –x options in Bash shell scripts?","reponse":"In a BASH Unix shell we can specify the options –v and –x on top\nof a script as follows:\n \n#!/bin/bash -x –v\n \n \nWith –x option BASH shell will echo the commands like for, select,\ncase etc. after  substituting the arguments and variables. So it will\nbe an expanded form of the command that shows all the actions of\nthe script. It is very useful for debugging a shell script.\n \nWith –v option BASH shell will echo every command before\nsubstituting the values of arguments and variables. In –v option Unix\nwill print each line as it reads.\n \nIn –v option, If we run the script, the shell prints the entire file and\nthen executes. If we run the script interactively, it shows each\ncommand after pressing enter."},{"number":976,"categorie":"AWS","question":"What is a Filter in Unix command?","reponse":"In Unix there are many Filter commands like- cat, awk, grep, head,\ntail cut etc.\n \nA Filter is a software program that takes an input and produces an\noutput, and it can be used in a stream operation.\n \nE.g. cut -d : -f 2 /etc/passwd | grep abc\n \nWe can mix and match multiple filters to create a complex command\nthat can solve a problem.\n \nAwk and Sed are complex filters that provide fully programmable\nfeatures.\n \nEven Data scientists use Unix filters to get the overview of data\nstored in the files."},{"number":977,"categorie":"AWS","question":"What is Kernel in Unix operating system?","reponse":"Kernel is the central core component of a Unix operating system\n(OS).\n \nA Kernel is the main component that can control everything within\nUnix OS.\n \nIt is the first program that is loaded on startup of Unix OS. Once it is\nloaded it will manage the rest of the startup process.\n \nKernel manages memory, scheduling as well as communication with\nperipherals like printers, keyboards etc.\n \nBut Kernel does not directly interact with a user. For a new task,\nKernel will spawn a shell and user will work in a shell.\n \nKernel provides many system calls. A software program interacts\nwith Kernel by using system calls.\n \nKernel has a protected memory area that cannot be overwritten\naccidentally by any process."},{"number":978,"categorie":"AWS","question":"What is a Shell in Unix OS?","reponse":"Shell in Unix is a user interface that is used by a user to access Unix\nservices.\n \nGenerally a Unix Shell is a command line interface (CLI) in which\nusers enter commands by typing or uploading a file.\n \nWe use a Shell to run different commands and programs on Unix\noperating system.\n \nA Shell also has a command interpreter that can take our commands\nand send these to be executed by Unix operating system.\n \nSome of the popular Shells on Unix are: Korn shell, BASH, C shell\netc."},{"number":979,"categorie":"AWS","question":"What are the different shells in Unix that you know about?","reponse":"Unix has many flavors of Shell. Some of these are as follows:\n \nBourne shell: We use sh for Bourne shell.\nBourne Again shell: We use bash to run this shell.\nKorn shell: We can use ksh to for Korn shell.\nZ shell: The command to use this is zsh\nC shell: We use csh to run C shell.\nEnhanced C shell: tcsh is the command for enhanced C shell."},{"number":980,"categorie":"AWS","question":"What is the first character of the output in ls –l command ?","reponse":"We use ls -l command to list the files and directories in a directory.\nWith -l option we get long listing format. \n \nIn this format the first character identifies the entry type. The entry\ntype can be one of the following:\n \n           b     Block special file\n           c     Character special file\n           d     Directory\n           l     Symbolic link\n           s     Socket link\n           p     FIFO\n           -     Regular file\n \nIn general we see d for directory and - for a regular file."},{"number":981,"categorie":"AWS","question":"What is the difference between Multi-tasking and Multi-user environment?","reponse":"In a Multi-tasking environment, same user can submit more than one\ntasks and operating system will execute them at the same time. \n \nIn a Multi-user environment, more than one user can interact with\nthe operating system at the same time."},{"number":982,"categorie":"AWS","question":"What is Command Substitution in Unix?","reponse":"Command substitution is a mechanism by which Shell passes the\noutput of a command as an argument to another command. We can\neven use it to set a variable or use an argument list in a for loop.\n \nE.g. rm `cat files_to_delete` \nIn this example files_to_delete is a file containing the list of files to\nbe deleted. cat command outputs this file and gives the output to rm\ncommand. rm command deletes the files.\n \nIn general Command Substitution is represented by back quotes `."},{"number":983,"categorie":"AWS","question":"What is an Inode in Unix?","reponse":"An Inode is a Data Structure in Unix that denotes a file or a\ndirectory on file system. It contains information about file like-\nlocation of file on the disk, access mode, ownership, file type etc.\n \nEach Inode has a number that is used in the index table. Unix kernel\nuses Inode number to access the contents of an Inode.\n \nWe can use ls -i command to get the inode number of a file."},{"number":984,"categorie":"AWS","question":"What is the difference between absolute path and relative path in Unix file system?","reponse":"Absolute path is the complete path of a file or directory from the\nroot directory. In general root directory is represented by / symbol.\nIf we are in a directory and want to know the absolute path, we can\nuse pwd command.\n \nRelative path is the path relative the current location in directory.\n \nE.g. In a directory structure /var/user/kevin/mail if we are in kevin\ndirectory then pwd command will give  absolute path as \n/var/user/kevin. \n \nAbsolute path of mail folder is /var/user/kevin/mail. For mail\nfolder ./mail is the relative path of mail directory from kevin folder."},{"number":985,"categorie":"AWS","question":"What are the main responsibilities of a Unix Shell?","reponse":"Some of the main responsibilities of a Unix Shell are as follows:\n \n1. Program Execution: A shell is responsible for executing the\ncommands and script files in Unix. User can either interactively\nenter the commands in Command Line Interface called terminal or\nthey can run a script file containing a program.\n \n2. Environment Setup: A shell can define the environment for a user.\nWe can set many environment variables in a shell and use the value\nof these variables in our program.\n \n3. Interpreter: A shell acts as an interpreter for our scripts. It has a\nbuilt in programming language that can be used to implement the\nlogic.\n \n4. Pipeline: A shell also can hookup a pipeline of commands. When\nwe run multiple commands separated by | pipe character, the shell\ntakes the output of a command and passes it to next one in the\npipeline.\n \n5. I/O Redirection: Shell is also responsible for taking input from\ncommand line interface (CLI) and sending the output back to CLI.\nWe use >, <, >> characters for this purpose."},{"number":986,"categorie":"AWS","question":"What is a Shell variable?","reponse":"A Unix Shell variable is an internal variable that a shell maintains.\nIt is local to that Shell. It is not made available to the parent shell or\nchild shell.\n \nWe generally use lower case names for shell variables in C shell. \n \nWe can set the value of a shell variable by set command.\n \nE.g. % set max_threads=10\n \nTo delete a Shell variable we can use unset command.\n \nTo use a Shell variable in a script we use $ sign in front of the\nvariable name.  \n \nE.g. echo $max_threads\n Microservices"},{"number":987,"categorie":"Microservices","question":"What is a Microservice?","reponse":"A Microservice is a small and autonomous piece of code that does\none thing very well. It is focused on doing well one specific task in\na big system.\nIt is also an autonomous entity that can be designed, developed and\ndeployed independently.\n \nGenerally, it is implemented as a REST service on HTTP protocol,\nwith technology-agnostic APIs.\nIdeally, it does not share database with any other service."},{"number":988,"categorie":"Microservices","question":"What are the benefits of Microservices architecture?","reponse":"Microservices provide many benefits. Some of the key benefits are:\n1. Scaling: Since there are multiple Microservices instead of\none monolith, it is easier to scale up the service that is\nbeing used more. Eg. Let say, you have a Product Lookup\nservice and Product Buy service. The frequency of Product\nLookup is much higher than Product Buy service. In this\ncase, you can just scale up the Product Lookup service to\nrun on powerful hardware with multiple servers.\nMeanwhile, Product Buy service can remain on less\npowerful hardware.\n2. Resilience: In Microservice architecture, if your one\nservice goes down, it may not affect the rest of the system.\nThe other parts can keep functioning, business as usual\n(BAU). Eg. Let say, you have Product Recommendation\nservice and Product Buy service. If Product\nRecommendation service goes down, the Product Buy\nservice can still keep running.\n3. Technology Mix: With so many changes in technology\neveryday, you can keep using the latest technology for your\nnew Microservices. You can adopt new technologies with\nless risk compared to Monolithic architecture. This is one\nof the best benefits of Microservices architecture.\n4. Reuse: Microservices help you in reusing the lessons\nlearnt from one service to another.\n5. Easy Deployment: Microservices architecture, if done\ncorrectly, helps in making the deployment process smooth.\nIf anything goes wrong, it can be rolled back easily and\nquickly in Microservices"},{"number":989,"categorie":"Microservices","question":"What is the role of architect in Microservices architecture?","reponse":"Architects, in Microservices architecture, play the role of Town\nplanners. They decide in broad strokes about the layout of the\noverall software system.\nThey help in deciding the zoning of the components. They make sure\ncomponents are mutually cohesive but not tightly coupled. They\nneed not worry about what is inside each zone.\nSince they have to remain up to date with the new developments and\nproblems, they have to code with developers to learn the challenges\nfaced in day-to-day life.\nThey can make recommendations for certain tools and technologies,\nbut the team developing a micro service is ultimately empowered to\ncreate and design the service. Remember, a micro service\nimplementation can change with time.\nThey have to provide technical governance so that the teams in their\ntechnical development follow principles of Microservice.\nAt times they work as custodians of overall Microservices\narchitecture"},{"number":990,"categorie":"Microservices","question":"What is the advantage of Microservices architecture over Service Oriented Architecture (SOA)?","reponse":"Service Oriented Architecture (SOA) is an approach to develop\nsoftware by creating multiple services. It creates small parts of\nservices and promotes reusability of software. But SOA\ndevelopment can be slow due to use of things like communication\nprotocols SOAP, middleware and lack of principles.\nOn the other hand, Microservices are agnostic to most of these\nthings. You can use any technology stack, any\nhardware/middleware, any protocol etc. as long as you follow the\nprinciples of Microservices.\nMicroservices architecture also provides more flexibility, stability\nand speed of development over SOA architecture"},{"number":991,"categorie":"Microservices","question":"Is it a good idea to provide a Tailored Service Template for Microservices development in an organization?","reponse":"If your organization is using similar set of technologies, then it is a\ngood idea to provide a Service Template that can be tailored by\ndevelopment teams. It can make development faster. Also it can\nhelp in promoting adoption of various good practices that are\nalready built into template.\nBut if your organization uses wide variety of technologies, then it\nmay not be wise to produce and maintain a template for each\nservice. Instead of that, it is better to introduce tools that help in\nmaintaining same set of practices related to Microservices among\nall such technologies.\nThere are many organizations that provide tailored templates for\nMicroservices. Eg. Dropwizard, Karyon etc. You can use these\ntemplates to make faster development of services in your\norganization.\nAlso remember that template code should not promote shared code.\nThis can lead to tight coupling between Microservices."},{"number":992,"categorie":"Microservices","question":"What are the disadvantages of using Shared libraries approach to decompose a monolith application?","reponse":"You can create shared libraries to increase reuse and sharing of\nfeatures among teams. But there are some downsides to it.\nSince shared libraries are implemented in same language, it\nconstrains you from using multiple types of technologies.\nIt does not help you with scaling the parts of system that need better\nperformance.\nDeployment of shared libraries is same as deployment of Monolith\napplication, so it comes with same deployment issues.\nShared libraries introduce shared code that can increase coupling in\nsoftware."},{"number":993,"categorie":"Microservices","question":"What are the characteristics of a Good Microservice?","reponse":"Good Microservices have these characteristics:\n1. Loose coupling: A Microservice knows little about any\nother service. It is as much independent as possible. The\nchange made in one Microservice does not require changes\nin other Microservices.\n2. Highly cohesive: Microservices are highly cohesive so\nthat each one of them can provide one set of behavior\nindependently.\n3. Bounded Context: A Microservice serves a bounded\ncontext in a domain and communicates with rest of the\ndomain by using an interface for that Bounded context.\n4. Business Capability: Microservices individually add\nbusiness capability that is part of big picture in\norganization."},{"number":994,"categorie":"Microservices","question":"What is Bounded Context?","reponse":"A bounded context is like a specific responsibility that is developed\nwithin a boundary. In a domain there can be multiple bounded\ncontexts that are internally implemented.  Eg. A hospital system can\nhave bounded contexts like- Emergency Ward handling, Regular\nvaccination, Out patient treatment etc. Within each bounded context,\neach sub-system can be independently designed and implemented."},{"number":995,"categorie":"Microservices","question":"What are the points to remember during integration of Microservices?","reponse":"Some of the important points to remember during integration of\nMicroservices are:\nTechnology Agnostic APIs: Developing Microservices in a\ntechnology agnostic way helps in integration of multiple\nMicroservices. With time, the technology implementation can\nchange but the interface between Microservices can remain same.\n \nBreaking Changes: Every change in Microservice should not\nbecome a breaking change for client. It is better to minimize the\nimpact of a change on an existing client. So that existing clients’ do\nnot have to keep changing their code to adapt to changes in a\nMicroservice.\n \nImplementation Hiding: Each Microservice should hide its internal\nimplementation details from another one. This helps in minimizing\nthe coupling between Microservices that are integrated for a\ncommon solution.\n \nSimple to use: A Microservice should be simple to use for a\nconsumer, so that the integration points are simpler. It should allow\nclients to choose their own technology stack"},{"number":996,"categorie":"Microservices","question":"Is it a good idea for Microservices to share a common database?","reponse":"Sharing a common database between multiple Microservices\nincreases coupling between them. One service can start accessing\ndata tables of another service. This can defeat the purpose of\nbounded context. So it is not a good idea to share a common\ndatabase between Microservices."},{"number":997,"categorie":"Microservices","question":"What is the preferred type of communication between Microservices?","reponse":"Synchronous or\nAsynchronous?\n \nSynchronous communication is a blocking call in which client\nblocks itself from doing anything else, till the response comes back.\nIn Asynchronous communication, client can move ahead with its\nwork after making an asynchronous call. Therefore client is not\nblocked.\nIn synchronous communication, a Microservice can provide instant\nresponse about success or failure. In real-time systems, synchronous\nservice is very useful. In Asynchronous communication, a service\nhas to react based on the response received in future.\nSynchronous systems are also known as request/response based.\nAsynchronous systems are event-based.\nSynchronous Microservices are not loosely coupled.\nDepending on the need and critical nature of business domain,\nMicroservices can choose synchronous or asynchronous form of\ncommunication"},{"number":998,"categorie":"Microservices","question":"What is the difference between Orchestration and Choreography in Microservices architecture?","reponse":"In Orchestration, we rely on a central system to control and call\nvarious Microservices to complete a task. In Choreography, each\nMicroservice works like a State Machine and reacts based on the\ninput from other parts.\nOrchestration is a tightly coupled approach for integrating\nMicroservices. But Choreography introduces loose coupling. Also,\nChoreography based systems are more flexible and easy to change\nthan Orchestration based systems.\nOrchestration is often done by synchronous calls. But choreography\nis done by asynchronous calls. The synchronous calls are much\nsimpler compared to asynchronous communication"},{"number":999,"categorie":"Microservices","question":"What are the issues in using REST over HTTP for Microservices?","reponse":"In REST over HTTP, it is difficult to generate a client stub.\nSome Web-Servers also do not support all the HTTP verbs like-\nGET, PUT, POST, DELETE etc. \nDue to JSON or plain text in response, performance of REST over\nHTTP is better than SOAP. But it is not as good as plain binary\ncommunication.\nThere is an overhead of HTTP in each request for communication.\nHTTP is not well suited for low-latency communications.\nThere is more work in consumption of payload. There may be\noverhead of serialization, deserialization in HTTP"},{"number":1000,"categorie":"Microservices","question":"Can we create Microservices as State Machines?","reponse":"Yes, Microservices are independent entities that serve a specific\ncontext. For that context, the Microservice can work as a State\nMachine. In a State Machine, there are lifecycle events that cause\nchange in the state of the system.\nEg. In a Library service, there is a book that changes state based on\ndifferent events like- issue a book, return a book, lose a book, late\nreturn of a book, add a new book to catalog etc. These events and\nbook can form a state machine for Library Microservice."}]